<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alphora.Dataphor.DAE</name>
    </assembly>
    <members>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Normalizer.DisjunctiveNormalize(Alphora.Dataphor.DAE.Compiling.Plan,Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode)">
            <summary>
            Converts the given node to an equivalent logical expression in disjunctive normal form.
            </summary>
            <param name="node">The input expression.</param>
            <returns>A plan node representing an equivalent logical expression in disjunctive normal form.</returns>
            <remarks>
            <para>
            NOTE: The runtime of this algorithm is known to be exponential in the number of elementary propositions involved in
            the input expression. There are known methods for improving this based on the notions of equisatisfiability, rather
            than pure equivalence, however, these methods would have to be reviewed for applicability to 3VL logic. The methods
            are described in the following references:
            </para>
            <para>
            Paul Jackson, Daniel Sheridan: Clause Form Conversions for Boolean Circuits. In: Holger H. Hoos, David G. Mitchell (Eds.): Theory and Applications of Satisfiability Testing, 7th International Conference, SAT 2004, Vancouver, BC, Canada, May 10–13, 2004, Revised Selected Papers. Lecture Notes in Computer Science 3542, Springer 2005, pp. 183–198
            G.S. Tseitin: On the complexity of derivation in propositional calculus. In: Slisenko, A.O. (ed.) Structures in Constructive Mathematics and Mathematical Logic, Part II, Seminars in Mathematics (translated from Russian), pp. 115–125. Steklov Mathematical Institute (1968)
            </para>
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Normalizer.ConjunctiveNormalize(Alphora.Dataphor.DAE.Compiling.Plan,Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode)">
            <summary>
            Converts the given node to an equivalent logical expression in conjunctive normal form.
            </summary>
            <param name="node">The input expression.</param>
            <returns>A plan node representing an equivalent logical expression in conjunctive normal form.</returns>
            <remarks>
            <para>
            NOTE: The runtime of this algorithm is known to be exponential in the number of elementary propositions involved in
            the input expression. There are known methods for improving this based on the notions of equisatisfiability, rather
            than pure equivalence, however, these methods would have to be reviewed for applicability to 3VL logic. The methods
            are described in the following references:
            </para>
            <para>
            Paul Jackson, Daniel Sheridan: Clause Form Conversions for Boolean Circuits. In: Holger H. Hoos, David G. Mitchell (Eds.): Theory and Applications of Satisfiability Testing, 7th International Conference, SAT 2004, Vancouver, BC, Canada, May 10–13, 2004, Revised Selected Papers. Lecture Notes in Computer Science 3542, Springer 2005, pp. 183–198
            G.S. Tseitin: On the complexity of derivation in propositional calculus. In: Slisenko, A.O. (ed.) Structures in Constructive Mathematics and Mathematical Logic, Part II, Seminars in Mathematics (translated from Russian), pp. 115–125. Steklov Mathematical Institute (1968)
            </para>
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Normalizer.DistributeNot(Alphora.Dataphor.DAE.Compiling.Plan,Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode)">
            <summary>
            Distributes logical negation through conjunction or disjunction by applying DeMorgan's laws, recursively.
            </summary>
            <param name="notNode">The input logical negation.</param>
            <returns>A logically equivalent expression with negation distributed.</returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Normalizer.CollectClauses(Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode,System.String)">
            <summary>
            Collects all and or or clauses in the given node.
            </summary>
            <param name="node">The node from which the clauses will be collected.</param>
            <param name="instruction">The instruction, and or or, to be collected.</param>
            <returns>A list of clauses of the given instruction.</returns>
            <remarks>
            If the given node is a binary operator of the given instruction, the left and right operands to
            the node will be collected, recursively. Otherwise, the node is returned as a clause.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.NameBindingContext.Identifier">
            <summary>The identifier being resolved for.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.NameBindingContext.BindingFlags">
            <summary>Indicates whether the identifier is to be resolved locally, globally, or both.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.NameBindingContext.ResolutionPath">
            <summary>The resolution path used to resolve the identifier.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.NameBindingContext.Object">
            <summary>The schema object which the identifier resolved to if the resolution was successful, null otherwise.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.NameBindingContext.Names">
            <summary>The list of names from the namespace which the identifier matches.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.NameBindingContext.IsAmbiguous">
            <summary>Returns true if the identifier could not be resolved because it matched multiple names in the namespace.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.NameBindingContext.SetBindingDataFromContext(Alphora.Dataphor.DAE.Compiling.NameBindingContext)">
            <summary>Sets the binding data for this context to the binding data of the given context.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorBindingContext.Statement">
            <summary>Gets the statement which originated the binding request.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorBindingContext.OperatorNameContext">
            <summary>Gets the name binding context used to resolve the operator name.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorBindingContext.OperatorName">
            <summary>Gets the operator name being resolved for.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorBindingContext.ResolutionPath">
            <summary>Gets the name resolution path being used to perform the resolution.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorBindingContext.CallSignature">
            <summary>Gets the signature of the call being resolved for.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorBindingContext.IsExact">
            <summary>Indicates that the resolution must be exact. (No casting or conversion)</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorBindingContext.IsOperatorNameResolved">
            <summary>Indicates that the operator name was resolved, not necessarily correctly (it could be ambiguous)</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.OperatorBindingContext.Operator">
            <summary>The operator resolved, if a successful resolution is possible, null otherwise.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorBindingContext.Matches">
            <summary>All the possible matches found for the calling signature.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.OperatorBindingContext.SetBindingDataFromContext(Alphora.Dataphor.DAE.Compiling.OperatorBindingContext)">
            <summary>Sets the binding data for this context to the binding data of the given context.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.ScalarConversionContext.CanConvert">
            <summary>Returns true if ASourceType is ATargetType or there is only one conversion path with the best narrowing score, false otherwise.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.ScalarConversionContext.BestPaths">
            <summary>Contains the set of conversion paths with the current best narrowing score.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.ScalarConversionContext.BestPath">
            <summary>Returns the single conversion path with the best narrowing score, null if there are multiple paths with the same score.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Compiler.ResolveVariableIdentifier(Alphora.Dataphor.DAE.Compiling.Plan,System.String,System.Int32@,System.Collections.Generic.List{System.String})">
            <summary> Returns the index of a data object on the stack, -1 if unable to resolve. </summary>
            <param name="columnIndex"> If the variable resolves to a column reference, AColumnIndex will contain the column index, -1 otherwise </param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Compiler.ResolveCatalogIdentifier(Alphora.Dataphor.DAE.Compiling.Plan,Alphora.Dataphor.DAE.Compiling.NameBindingContext)">
            <summary>Attempts to resolve the given name binding context.</summary>
            <remarks>
            This is the primary catalog identifier resolution procedure.  This procedure will not throw an error if it is unable to
            resolve the identifier.  If the identifier is ambiguous, the IsAmbiguous flag will be set in the NameBindingContext.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Compiler.FindDefaultSpecialForScalarType(Alphora.Dataphor.DAE.Compiling.Plan,Alphora.Dataphor.DAE.Schema.IDataType)">
            <summary>Returns the default special for the given type. Will throw an exception if the type is not scalar, or the type has multiple specials defined. Will return null if the type has no specials defined.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Compiler.FindCallNode(Alphora.Dataphor.DAE.Compiling.Plan,Alphora.Dataphor.DAE.Compiling.OperatorBindingContext,Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode[])">
            <summary>The main overload of FindCallNode which all other overloads call.  All call resolutions funnel through this method.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Compiler.EnsureSearchableNode(Alphora.Dataphor.DAE.Compiling.Plan,Alphora.Dataphor.DAE.Runtime.Instructions.TableNode,Alphora.Dataphor.DAE.Schema.Order)">
            <summary>Ensures that the node given by ASourceNode is searchable by the order given by ASearchOrder. This method should only be called in a binding context.</summary>
            <remarks>
            This method during the binding phase to ensure that a given node will produce a result set in the given order and with the requested capabilities.
            If the source node does support a searchable cursor ordered by the given order, the compiler will first request an order node be emitted
            and then determine the device of that order node. If the resulting ordered node does not provide searchable capabilities, then if the
            order is supported by the device, a browse node is used to provide the search capabilities, otherwise a copy node is used to materialize
            the order and provide the requested capabilities.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerErrorLevel.Fatal">
            <summary>Fatal error, compilation will terminate.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerErrorLevel.NonFatal">
            <summary>Non-fatal error, compilation will continue, but will not complete.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerErrorLevel.Warning">
            <summary>Compiler warning, compilation will continue, and be able to complete.  The user will be informed of the warning.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Compiling.CompilerException">
            <summary>Indicates an error encountered during the semantic analysis phase of compiling.</summary>
            <remarks>
            The CompilerException indicates that the semantic analyzer encountered an invalid construct while 
            processing the abstract syntax tree for a given program.  The line number and position of the
            invalid constructs will be given if possible.  Only the compiler should throw exceptions of this type.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnknownStatementClass">
            <summary>Error code 105100: "Unknown statement class "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnknownExpressionClass">
            <summary>Error code 105101: "Unknown expression class "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidIdentifier">
            <summary>Error code 105102: "Identifier "{0}" is not a valid expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CreatingDuplicateIdentifier">
            <summary>Error code 105103: "The identifier "{0}" is already defined in this scope."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnknownLiteralType">
            <summary>Error code 105104: "Unable to resolve type for literal token "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.BooleanExpressionExpected">
            <summary>Error code 105105: "Boolean expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.IntegerExpressionExpected">
            <summary>Error code 105106: "Integer expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ErrorExpressionExpected">
            <summary>Error code 105107: "Error expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ExpressionTypeMismatch">
            <summary>Error code 105108: "Expression type "{0}" cannot be assigned to type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.TableExpressionExpected">
            <summary>Error code 105109: "Table expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.PresentationExpressionExpected">
            <summary>Error code 105110: "Presentation expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.TableOrRowExpressionExpected">
            <summary>Error code 105111: "Table or row expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.RowExpressionExpected">
            <summary>Error code 105112: "Row expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.EntryExpressionExpected">
            <summary>Error code 105113: "Entry expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ListExpressionExpected">
            <summary>Error code 105114: "List expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CursorExpressionExpected">
            <summary>Error code 105115: "Cursor expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.TableExpressionsNotCompatible">
            <summary>Error code 105116: "Type "{0}" is not compatible with type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ScalarExpressionExpected">
            <summary>Error code 105117: "Scalar expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ScalarTypeExpected">
            <summary>Error code 105118: "Scalar type specifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.TableIdentifierExpected">
            <summary>Error code 105119: "Table identifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ViewIdentifierExpected">
            <summary>Error code 105120: "View identifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ScalarTypeIdentifierExpected">
            <summary>Error code 105121: "Scalar type identifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ConstraintIdentifierExpected">
            <summary>Error code 105122: "Constraint identifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ReferenceIdentifierExpected">
            <summary>Error code 105123: "Reference identifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DeviceIdentifierExpected">
            <summary>Error code 105124: "Device identifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ServerLinkIdentifierExpected">
            <summary>Error code 105125: "Server link identifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ServerLinkExpected">
            <summary>Error code 105126: "Server link expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.JoinMustBeEquiJoin">
            <summary>Error code 105127: "Join expression must be an equi-join."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ColumnNameExpected">
            <summary>Error code 105128: "Column name expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NoCatalog">
            <summary>Error code 105129: "No catalog available in compiler "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.KeyRequired">
            <summary>Error code 105130: "Table must have a key defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidRowInTableSelector">
            <summary>Error code 105131: "Row expression cannot be converted to the row type for this table selector: {0}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnableToDetermineUpdateKey">
            <summary>Error code 105132: "Unable to determine a unique key for use in updating the given expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ConveyorClassExpected">
            <summary>Error code 105133: "Conveyor class expected.  Given: {0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnknownTypeSpecifier">
            <summary>Error code 105134: "Unknown type specifier class "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidReferenceObject">
            <summary>Error code 105135: "Reference "{0}" cannot be defined on object "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ReferenceMustTargetKey">
            <summary>Error code 105136: "Reference "{0}" must target a key of table "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidReferenceColumn">
            <summary>Error code 105137: "Reference "{0}" is invalid because column "{1}" of type "{2}" cannot reference column "{3}" of type "{4}" in table "{5}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DeviceClassExpected">
            <summary>Error code 105138: "Device class expected.  Given: {0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DeviceScalarTypeClassExpected">
            <summary>Error code 105139: "DeviceScalarType class expected.  Given {0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DeviceOperatorClassExpected">
            <summary>Error code 105140: "DeviceOperator class expected.  Given {0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidElementType">
            <summary>Error code 105141: ""</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnknownOrder">
            <summary>Error code 105142: "Unknown order reference "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidOverrideDirective">
            <summary>Error code 105143: "No operator available to override "{0}({1})"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidVirtualDirective">
            <summary>Error code 105144: "Host instructions may not be virtual calls "{0}({1})"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnableToCondenseQualifierExpression">
            <summary>Error code 105145: "Unable to condense qualifier expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnableToCollapseQualifierExpression">
            <summary>Error code 105146: "Unable to collapse qualifier expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnknownPropertyReference">
            <summary>Error code 105147: "Scalar type "{0}" does not contain a component named "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidQualifier">
            <summary>Error code 105148: "Invalid qualifier "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.OperatorNotFound">
            <summary>Error code 105149: "Unable to resolve operator reference "{0}" with signature "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidExtractionTarget">
            <summary>Error code 105150: "Column "{0}" cannot be extracted from an expression of type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidAssignmentTarget">
            <summary>Error code 105151: "Target of an assignment must be a variable."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidUpdateTarget">
            <summary>Error code 105152: "Invalid data modification target."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.VariableReferenceRequired">
            <summary>Error code 105153: "Constant value cannot be passed to a var or out parameter."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidEntryInPresentationSelector">
            <summary>Error code 105154: "Invalid entry selector in presentation selector."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidRetrieveTarget">
            <summary>Error code 105155: "Invalid retrieve target."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidTypeOfTarget">
            <summary>Error code 105156: "Typeof cannot be called on object "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidAggregateInvocation">
            <summary>Error code 105157: "Aggregate operator "{0}" cannot be called in this context."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidRaiseContext">
            <summary>Error code 105158: "Raise statement cannot be invoked without an argument outside of a catch block."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.AmbiguousClearValue">
            <summary>Error code 105159: "Ambiguous clear value for scalar type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.KeyColumnNotFound">
            <summary>Error code 105160: "Key column "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ConveyorRequired">
            <summary>Error code 105161: "Unable to determine a default conveyor for scalar type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DefaultSelectorCannotBeProvided">
            <summary>Error code 105162: "Default selector cannot be provided for representation "{0}" on scalar type "{1}" because it does not have a single property."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DefaultReadAccessorCannotBeProvided">
            <summary>Error code 105163: "Default read accessor cannot be provided for property "{0}" of representation "{1}" on scalar type "{2}" because the representation is not system-provided."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DefaultWriteAccessorCannotBeProvided">
            <summary>Error code 105164: "Default write accessor cannot be provided for property "{0}" of representation "{1}" on scalar type "{2}" because the representation is not system-provided."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ConstantObjectCannotBeAssigned">
            <summary>Error code 105165: "Constant data object "{0}" cannot be assigned a value."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ConstantObjectCannotBePassedByReference">
            <summary>Error code 105166: "Constant data object cannot be passed by reference to parameter "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnknownIdentifier">
            <summary>Error code 105167: "Unknown identifier "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnimplementedVirtualAggregateCalls">
            <summary>Error code 105168: "Unimplemented: virtual aggregate calls."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ObjectHasDependentConstraints">
            <summary>Error code 105169: "Object "{0}" cannot be modified because it has dependent constraints."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InheritedObject">
            <summary>Error code 105170: "Object "{0}" is inherited and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ObjectHasDependents">
            <summary>Error code 105171: "Object "{0}" cannot be altered or dropped because it is referenced by at least the following objects: {1}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ObjectIsReferenced">
            <summary>Error code 105172: "Object "{0}" cannot be modified because it is referenced by object "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidMembershipOperand">
            <summary>Error code 105173: "In operator cannot be invoked on values of type "{0}" and "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ListTypeExpected">
            <summary>Error code 105174: "List type specifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.TableTypeExpected">
            <summary>Error code 105175: "Table type specifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidEventSource">
            <summary>Error code 105177: "Schema object "{0}" is not a valid source for events of type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnknownEventSourceSpecifierClass">
            <summary>Error code 105178: "Unknown event source specifier class "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidEventType">
            <summary>Error code 105179: "Event source "{0}" does not trigger events of type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.IncompatibleEventHandler">
            <summary>Error code 105180: "Operator "{0}" is incompatible with event signature "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CastingPathNotFound">
            <summary>Error code 105181: "No casting path was found from "{0}" to "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.PhysicalCastOperatorNotFound">
            <summary>Error code 105182: "Physical casting operator from "{0}" to "{1}" not found.  This operator is required because the physical representations of the scalar types are different."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NoLoop">
            <summary>Error code 105183: "Break or continue statements must appear within a looping construct."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidCast">
            <summary>Error code 105184: "Cannot cast a value of type "{0}" to type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidConstraintExpression">
            <summary>Error code 105185: "Constraint expression must be deterministic and have no side effects."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidSpecialExpression">
            <summary>Error code 105186: "Special value expression must be deterministic and have no side effects."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidCompareExpression">
            <summary>Error code 105187: "Compare expression must be deterministic and have no side effects."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidColumnBinding">
            <summary>Error code 105188: "Identifier "{0}" was compiled as a variable reference, but is binding as a column reference."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidRowJoin">
            <summary>Error code 105189: "Join specifier not allowed for a row join."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidAggregationSource">
            <summary>Error code 105190: "Expression to be aggregated must be deterministic."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidTableReferenceArgument">
            <summary>Error code 105191: "Table value passed by reference to parameter "{0}" must be deterministic."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidSearchableCall">
            <summary>Error code 105192: "Cursor must be ordered to perform searchable calls."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidAllSpecification">
            <summary>Error code 105193: "All specification can only used to assign rights for specific catalog objects."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NonRemotableConstraintExpression">
            <summary>Error code 105194: "Only database-wide and transition constraints may reference global table variables."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ScalarTypeMapRequired">
            <summary>Error code 105195: "Unable to determine a default scalar type map for scalar type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.RoleIdentifierExpected">
            <summary>Error code 105196: "Role identifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnknownGranteeType">
            <summary>Error code 105197: "Unknown grantee type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidColumnExtractorExpression">
            <summary>Error code 105198: "Column extractor expression must reference a single column unless invoking an aggregate operator."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidRowExtractorExpression">
            <summary>Error code 105199: "Row extractor expression must reference a table expression with at most one row.  Use a restriction or quota query to limit the number of rows in the source table expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NoDefaultDevice">
            <summary>Error code 105200: "No default device specified."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnableToResolveDefaultDevice">
            <summary>Error code 105201: "Errors occurred while attempting to resolve the default device name "{0}" for the current library."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.AmbiguousIdentifier">
            <summary>Error code 105202: "The identifier "{0}" is ambiguous between the following identifiers: {1}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.OptimizationError">
            <summary>Error code 105203: "Internal Error: Optimization phase exceptions occurred."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.BindingError">
            <summary>Error code 105204: "Internal Error: Binding phase exceptions occurred."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnableToResolveIdentifier">
            <summary>Error code 105205: "Unable to resolve variable identifier "{0}".</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CreatingHidingIdentifier">
            <summary>Error code 105206: "The identifier "{0}" cannot be defined in this scope because it would hide the identifier "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CreatingHiddenIdentifier">
            <summary>Error code 105207: "The identifier "{0}" cannot be defined in this scope because it would be hidden by the identifier "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.AmbiguousOperatorName">
            <summary>Error code 105208: "Operator name "{0}" is ambiguous between the following operator names: {1}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NoSignatureForParameterCardinality">
            <summary>Error code 105209: "No signature for operator "{0}" has ({1}) parameters."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.AmbiguousOperatorCall">
            <summary>Error code 105210: "The call "{0}{1}" is ambiguous between the following operators: {2}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidOperatorCall">
            <summary>Error code 105211: "The closest matching signature to the call "{0}{1}" is "{2}" which has some invalid arguments."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NoConversionForParameter">
            <summary>Error code 105212: "Argument ({0}) cannot be converted from "{1}" to "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NoExactMatch">
            <summary>Error code 105213: "No signature for operator "{0}" matches the call signature "{1}" exactly."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CreatingDuplicateObjectName">
            <summary>Error code 105214: "An object named "{0}" is already defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CreatingHidingObjectName">
            <summary>Error code 105215: "The name "{0}" cannot be used because it would hide the name "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CreatingHiddenObjectName">
            <summary>Error code 105216: "The name "{0}" cannot be used because it would be hidden by the name "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CreatingDuplicateSignature">
            <summary>Error code 105217: "The operator "{0}" already has a definition for the signature "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CreatingHidingOperatorName">
            <summary>Error code 105218: "The operator name "{0}" cannot be used because it would hide the operator name "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CreatingHiddenOperatorName">
            <summary>Error code 105219: "The operator name "{0}" cannot be used because it would be hidden by the operator name "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NonFatalErrors">
            <summary>Error code 105220: "Non-fatal compiler errors encountered."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.FatalErrors">
            <summary>Error code 105221: "Fatal compiler error encountered.  Compilation terminated."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnableToConstructSort">
            <summary>Error code 105222: "Unable to construct a sort for data type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnableToFindDefaultSpecial">
            <summary>Error code 105223: "Cannot determine a default special value for data type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NoConversion">
            <summary>Error code 105224: "Cannot convert a value of type "{0}" to a value of type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NoColumnConversion">
            <summary>Error code 105225: "Cannot convert values in column "{0}" of type "{1}" to values of type "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.AmbiguousConversion">
            <summary>Error code 105226: "The conversion from values of type "{0}" to type "{1}" is ambiguous among the following conversion paths: {2}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NarrowingConversion">
            <summary>Error code 105227: "Narrowing conversion used to convert a value of type "{0}" to type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.OperatorNotAttachedToObjectEvent">
            <summary>Error code 105228: "The operator "{0}" is not attached to the "{1}" event of object "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.OperatorNotAttachedToColumnEvent">
            <summary>Error code 105229: "The operator "{0}" is not attached to the "{1}" event of column "{2}" in table "{3}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnableToExtractRow">
            <summary>Error code 105230: "Unable to extract row from data type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnableToExtractEntry">
            <summary>Error code 105231: "Unable to extract entry from data type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ExpressionStatement">
            <summary>Error code 105232: "Possibly incorrect use of expression as a statement."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.TypeSpecifierExpected">
            <summary>Error code 105233: "Unable to determine data type for variable declaration."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DDLStatementInOperator">
            <summary>Error code 105234: "DDL statements must be dynamically executed within an operator block.  Use System.Execute to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidConveyorForCompoundScalar">
            <summary>Error code 105235: "A default selector and accessors for representation "{0}" in scalar type "{1}" cannot be provided because a conveyor has been specified for the scalar type."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.MultipleSystemProvidedRepresentations">
            <summary>Error code 105236: "A default selector and accessors for representation "{0}" in scalar type "{1}" cannot be provided because another representation has already determined the native representation for the scalar type."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DuplicateDeviceScalarType">
            <summary>Error code 105237: "Device "{0}" already has a type map for type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DuplicateDeviceOperator">
            <summary>Error code 105238: "Device "{0}" already has an operator map for operator "{1}" with signature "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DeviceOperatorClassRequired">
            <summary>Error code 105239: "Unable to determine a default device operator class for operator "{0}" in device "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidSelector">
            <summary>Error code 105240: "Selector for representation "{0}" of type "{1}" is invalid because selectors must be deterministic, have no side effects, and be evaluable in isolation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidReadAccessor">
            <summary>Error code 105241: "Read accessor for property "{0}" of representation "{1}" of type "{2}" is invalid because read accessors must be deterministic, have no side effects and be evaluable in isolation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidWriteAccessor">
            <summary>Error code 105242: "Write accessor for property "{0}" of representation "{1}" of type "{2}" is invalid because write accessors must be deterministic and be evaluable in isolation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnsupportedPlan">
            <summary>Error code 105243: "Device "{0}" did not support the plan "{1}" for the following reasons:\r\n{2}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.TableExpressionsNotProductCompatible">
            <summary>Error code 105244: "Table expression of type "{0}" contains common column names with table expression of type "{1}" and would result in duplicate column names if used in a times expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.PossiblyIncorrectProductExpression">
            <summary>Error code 105245: "Table expression of type "{0}" does not have common column names with table expression of type "{1}", resulting in a possibly incorrect times expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidReferenceColumnCount">
            <summary>Error code 105246: "Reference "{0}" must target the same number of columns in both tables."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.TableVarIdentifierExpected">
            <summary>Error code 105247: "Table or view identifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ExpressionExpected">
            <summary>Error code 105248: "Expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.TargetRowTypeMissingColumn">
            <summary>Error code 105249: "Target row type does not have a column named "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.SourceRowTypeMissingColumn">
            <summary>Error code 105250: "Source row type does not have a column named "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.TargetTableTypeMissingColumn">
            <summary>Error code 105251: "Target table type does not have a column named "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.SourceTableTypeMissingColumn">
            <summary>Error code 105252: "Source table type does not have a column named "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CursorTypeVariableInScope">
            <summary>Error code 105253: "Variable declarations after a cursor definition may affect cursor execution. Ensure that all variable declarations appear before opening any cursors."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.OuterJoinMustBeConditioned">
            <summary>Error code 105254: "Outer joins cannot be natural, they must have a condition specified."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidOuterJoin">
            <summary>Error code 105255: "Outer joins cannot be many-to-many, because the resulting set would have only sparse keys."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidTableSelector">
            <summary>Error code 105256: "Table selector cannot be evaluated because the key includes columns that have no relative comparison operators defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NoMatch">
            <summary>Error code 105257: "No signature for operator "{0}" matches the call signature "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidRestrictionCondition">
            <summary>Error code 105258: "Restriction condition is invalid because it contains non-repeatable operator invocations."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.AmbiguousTableIndexerKey">
            <summary>Error code 105259: "Table indexer expression is ambiguous. Specify a key to be used using the by clause."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.UnresolvedTableIndexerKey">
            <summary>Error code 105260: "Table indexer expression is invalid because no keys have the required number and type of columns."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidTableIndexerKey">
            <summary>Error code 105261: "Table indexer expression is invalid because the resolved key does not have the same number of columns as the indexer expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.RowExtractorDeprecated">
            <summary>Error code 105262: "Row extraction using the from keyword has been deprecated and will not be supported in future releases. Use a table indexer expression ([]) to extract row values."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ColumnExtractorDeprecated">
            <summary>Error code 105263: "Column extraction using the from keyword has been deprecated and will not be supported in future releases. Use a qualifier expression (.) to extract column values."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.TooManyTermsForImplicitTableIndexer">
            <summary>Error code 105264: "Table indexer expression has too many terms for efficient implicit key resolution. Specify a key to be used using the by clause."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.ForEachVariableNameRequired">
            <summary>Error code 105265: "The row variable name is only valid for table-based foreach statements."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidForEachStatement">
            <summary>Error code 105266: "Foreach statement may only operator on list or table values."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidColumnReference">
            <summary>Error code 105267: "Column reference not allowed in this context."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CompilerMessage">
            <summary>Error code 105268: "{0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidExplodeExpression">
            <summary>Error code 105269: "Explode expression must specify an order by clause if it includes a level or sequence column."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidExplodeExpressionOrder">
            <summary>Error code 105270: "Order specified for explode expression must include some key of the source expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidOrderDependentAggregateInvocation">
            <summary>Error code 105271: "Aggregate operator "{0}" is order-dependent. Use the order by clause to specify an ordering for this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidOrderDependentAggregateInvocationOrder">
            <summary>Error code 105272: "Order specified for order-dependent aggregate operator invocation "{0}" must include some key of the source expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.LiteralArgumentRequired">
            <summary>Error code 105273: "Argument ({0}) must be literal (evaluable at compile-time)."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DeprecatedOperator">
            <summary>Error code 105274: "Operator "{0}" has been deprecated and will no longer be supported in a future version."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.PotentiallyAmbiguousImplicitTableIndexer">
            <summary>Error code 105275: "Source expression has multiple keys with columns of the same types, resulting in a potentially ambiguous implicit table indexer expression. Specify a key to be used using the by clause."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidTransitionConstraintExpression">
            <summary>Error code 105276: "Transition constraint expression must be repeatable and have no side effects."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.PossiblyIncorrectSemiTableExpression">
            <summary>Error code 105277: "Table expression of type "{0}" does not have common column names with table expression of type "{1}", resulting in a possibly incorrect having or without expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidIndexerExpression">
            <summary>Error code 105278: "Indexer expression must contain one and only one indexing expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DeprecatedTag">
            <summary>Error code 105279: "The tag "{0}" has been deprecated. Use tag "{1}" instead. For more information, see the Tags Reference in the Dataphor Developer's Guide."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.RowTypeExpected">
            <summary>Error code 105280: "Row type specifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InternalError">
            <summary>Error code 105281: "Internal error: Unexpected exception encountered during compilation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CannotClearSourceColumn">
            <summary>Error code 105282: "The clear referential action cannot be used for source column "{0}" because it is marked not nil and the type of the column does not have an unambiguous special defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.OperatorAlreadyAttachedToObjectEvent">
            <summary>Error code 105283: "The operator "{0}" is already attached to the "{1}" event of object "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.OperatorAlreadyAttachedToColumnEvent">
            <summary>Error code 105284: "The operator "{0}" is already attached to the "{1}" event of column "{2}" in table "{3}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.InvalidCustomConstraintMessage">
            <summary>Error code 105285: "Errors occurred attempting to compile custom error message for constraint "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.CouldNotConvertSargableArgument">
            <summary>Error code 105286: "Restriction is not sargable because the argument for column "{0}" could not be converted from type "{1}" to type "{2}", resulting in a potential reduction in performance."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.NonRemotableCustomConstraintMessage">
            <summary>Error code 105287: "Custom message may only reference global table variables for database-wide and transition constraints."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.AmbiguousConveyor">
            <summary>Error code 105288: "Conveyor for type "{0}" is ambiguous between "{1}" and "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.CompilerException.Codes.DuplicateRenameColumn">
            <summary>Error code 105289: "Column "{0}" has already been renamed."</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.CompilerMessages.HasFatalErrors">
            <summary>Returns true if there are any fatal or non-compiler errors.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.CompilerMessages.HasErrors">
            <summary>Returns true if there are any fatal, non-fatal or non-compiler errors.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.CompilerMessages.SetLocator(Alphora.Dataphor.DAE.Debug.DebugLocator)">
            <summary> Sets the locator for all locator exceptions that don't have one. </summary>
            <remarks> Note: Doesn't update the offsets. </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Compiling.OperatorMatch">
            <summary>Contains information about potential signature resolution matches.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.OperatorMatch.#ctor(Alphora.Dataphor.DAE.Compiling.OperatorSignature)">
            <summary>Constructs a potential match.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.OperatorMatch.#ctor(Alphora.Dataphor.DAE.Compiling.OperatorSignature,System.Boolean)">
            <summary>Constructs an exact or partial match, depending on the value of AIsExact.</summary>		
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.OperatorMatch.IsExact">
            <summary>Indicates whether this signature is an exact match with the call signature. (No casting or conversion required)</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Compiling.OperatorMatch.IsMatch">
            <summary>Indicates whether this signature is a match with the call signature. (Casting or conversion may be required)</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatch.IsPartial">
            <summary>Indicates that this signature is a match with the call signature but that casting or conversion is required.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatch.CanConvert">
            <summary>For each parameter in the signature, indicates whether a potential conversion was found between the calling signature argument type and this signatures parameter type.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatch.ConversionContexts">
            <summary>Contains a potential conversion context for each parameter in the signature.  If the reference is null, if CanConvert is true, then no conversion is required, otherwise, the modifiers were not compatible.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatch.NarrowingScore">
            <summary>Indicates the total narrowing score for this match.  The narrowing score is the sum of the narrowing scores for all conversions in the match. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatch.PathLength">
            <summary>Indicates the total path length for the conversions in this match.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatches.IsMatch">
            <summary>Indicates whether or not a successful signature match was found.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatches.IsExact">
            <summary>Indicates whether the resolved signature is an exact match for the calling signature. (No casting or conversion required) </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatches.IsPartial">
            <summary>Indicates whether the resolved signature is a partial match for the calling signature. (Casting or conversion required) </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatches.IsAmbiguous">
            <summary>Indicates whether more than one signature matches the calling signature.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatches.Match">
            <summary>Returns the resolved signature for the calling signature.  Null if no match was found.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatches.BestNarrowingScore">
            <summary>Returns the best narrowing score for the possible matches for the calling signature.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatches.ShortestPathLength">
            <summary>Returns the shortest path length among the possible matches with the best narrowing score.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatches.BestMatches">
            <summary>Returns the set of possible matches with the best narrowing score.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.OperatorMatches.ClosestMatch">
            <summary>Returns the closest match for the given signature.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.OperatorResolutionCache.Clear(Alphora.Dataphor.DAE.Schema.Operator)">
            <summary>Removes cached resolutions for this operator, if any.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.OperatorResolutionCache.Clear(System.String)">
            <summary>Removes cached resolutions for the given operator name, if any.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.OperatorResolutionCache.Clear(Alphora.Dataphor.DAE.Schema.ScalarType,Alphora.Dataphor.DAE.Schema.ScalarType)">
            <summary>Removes cached resolutions involving conversions referencing the given scalar type, if any.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.OperatorResolutionCache.Clear(Alphora.Dataphor.DAE.Schema.Conversion)">
            <summary>Removes cached resolutions involving conversion paths using the given conversion, if any.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.OperatorResolutionCache.Clear(Alphora.Dataphor.DAE.Schema.NameResolutionPath)">
            <summary>Removes cached resolutions involving the given name resolution path, if any.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Plan.EvaluateLiteralArgument(Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode,System.String)">
            <summary>
            Used to evaluate literal arguments at compile-time. The given node must be literal, or an exception is raised.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Plan.ExecuteNode(Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode)">
            <summary>
            Used to execute arbitrary plan nodes at compile-time.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.Plan.InATCreationContext">
            <summary>Indicates whether the current plan is executing a statement to create an A/T translated object.</summary>
            <remarks>
            This context is needed because it is not always the case that A/T objects will be being created (or recreated 
            such as when view references are reinferred) inside of an A/T. By checking for this context, we are ensured
            that things that should not be checked for A/T objects (such as errors about derived references not existing in
            adorn expressions, etc.,.) will not occur.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Compiling.Plan.ShouldAffectTimeStamp">
            <summary>Indicates whether time stamps should be affected by alter and drop table variable and operator statements.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Plan.CurrentStatement">
            <remarks>Returns the current statement in the abstract syntax tree being compiled.  Will return null if no statement is on the statement stack.</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Plan.GetCurrentLineInfo">
            <summary>
            Returns the first non-empty LineInfo in the current statement stack, null if no LineInfo is found.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Compiling.Plan.CheckAuthorized(System.String)">
            <summary>Raises an error if the current user is not authorized to administer the given user.</summary>		
        </member>
        <member name="T:Alphora.Dataphor.DAE.Compiling.Symbol">
            <summary>
            Defines the structure for a compile-time symbol
            </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.ProcessCallInfo">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.ProcessCleanupInfo">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteServer">
            <nodoc/>
            <summary> A server interface designed to be utilized through remoting. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServer.Establish(System.String,System.String)">
            <summary> Establishes a managed network-level connection to the server. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServer.Relinquish(Alphora.Dataphor.DAE.Contracts.IRemoteServerConnection)">
            <summary> Relinquishes the connection to the server. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerConnection">
            <nodoc/>
            <summary> Represents a network-level managed connection to the server. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Contracts.IRemoteServerConnection.ConnectionName">
            <summary> Returns the name of the connection given when the connection was established. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerConnection.Connect(Alphora.Dataphor.DAE.SessionInfo)">
            <summary> Provides the remote equivalent to the Connect method of IServer. </summary>
            <returns> A new IRemoteServerSession interface. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerConnection.Disconnect(Alphora.Dataphor.DAE.Contracts.IRemoteServerSession)">
            <summary> Disconnects an active remote session. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerSession">
            <nodoc/>
            <summary> A session interface designed to be utilized through remoting. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Contracts.IRemoteServerSession.Server">
            <value> A reference to the IRemoteServer object associated with this session. </value>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerSession.StartProcess(Alphora.Dataphor.DAE.ProcessInfo,System.Int32@)">
            <summary> Starts a new process on the session. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerSession.StopProcess(Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess)">
            <summary> Stops the given process. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess">
            <nodoc/>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.BeginApplicationTransaction(System.Boolean,System.Boolean,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary>Begins an application transaction and returns its unique identifier.</summary>        
            <param name="AShouldJoin">Indicates whether the process should auto-enlist in the newly created application transaction.</param>
            <param name="AIsInsert">If joining the new application transaction, should it join as insert participant.</param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.PrepareApplicationTransaction(System.Guid,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary>Prepares the application transaction for commit.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.CommitApplicationTransaction(System.Guid,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary>Commits the application transaction with the given identifier.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.RollbackApplicationTransaction(System.Guid,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary>Aborts the application transaction with the given identifier.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.ApplicationTransactionID">
            <summary>Returns the ID of the application transaction this process is currently participating in, and Guid.Empty otherwise.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.JoinApplicationTransaction(System.Guid,System.Boolean,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary>Joins this process to the given application transaction.</summary>
            <remarks>
            Joins this process to the given application transaction. If the process joins the application transaction
            as an insert participant, then the data for the tables referenced in this process will not be copied into
            the application transaction space. All references to tables on this process will be referencing the tables
            in the application transaction space, rather than the actual database tables.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.LeaveApplicationTransaction(Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary>Leaves the application transaction that this process is participating in.</summary>
            <remarks>
            Once the process is no longer a participant in the application transaction, all table references will once again
            reference the table variables in the actual database.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.PrepareStatement(System.String,Alphora.Dataphor.DAE.Contracts.RemoteParam[],Alphora.Dataphor.DAE.Debug.DebugLocator,Alphora.Dataphor.DAE.Contracts.PlanDescriptor@,Alphora.Dataphor.DAE.Contracts.RemoteProcessCleanupInfo)">
            <summary> Prepares the given statement for remote execution. </summary>
            <param name='AStatement'> A single valid Dataphor statement to prepare. </param>
            <returns> An <see cref="T:Alphora.Dataphor.DAE.IServerStatementPlan"/> instance for the prepared statement. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.UnprepareStatement(Alphora.Dataphor.DAE.Contracts.IRemoteServerStatementPlan)">
            <summary> Unprepares a statement plan. </summary>
            <param name="APlan"> A reference to a plan object returned from a call to PrepareStatement. </param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.PrepareExpression(System.String,Alphora.Dataphor.DAE.Contracts.RemoteParam[],Alphora.Dataphor.DAE.Debug.DebugLocator,Alphora.Dataphor.DAE.Contracts.PlanDescriptor@,Alphora.Dataphor.DAE.Contracts.RemoteProcessCleanupInfo)">
            <summary> Prepares the given expression for remote selection. </summary>
            <param name='AExpression'> A single valid Dataphor expression to prepare. </param>
            <returns> An <see cref="T:Alphora.Dataphor.DAE.IServerExpressionPlan"/> instance for the prepared expression. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.UnprepareExpression(Alphora.Dataphor.DAE.Contracts.IRemoteServerExpressionPlan)">
            <summary> Unprepares an expression plan. </summary>
            <param name="APlan"> A reference to a plan object returned from a call to PrepareExpression. </param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.OpenCursor(System.String,Alphora.Dataphor.DAE.Contracts.RemoteParamData@,Alphora.Dataphor.DAE.Contracts.IRemoteServerExpressionPlan@,Alphora.Dataphor.DAE.Contracts.PlanDescriptor@,Alphora.Dataphor.DAE.ProgramStatistics@,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo,Alphora.Dataphor.DAE.Contracts.RemoteProcessCleanupInfo)">
            <summary> Opens a remote, server-side cursor based on the prepared statement this plan represents. </summary>        
            <returns> An <see cref="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor"/> instance for the prepared statement. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.OpenCursor(System.String,Alphora.Dataphor.DAE.Contracts.RemoteParamData@,Alphora.Dataphor.DAE.Contracts.IRemoteServerExpressionPlan@,Alphora.Dataphor.DAE.Contracts.PlanDescriptor@,Alphora.Dataphor.DAE.ProgramStatistics@,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo,Alphora.Dataphor.DAE.Contracts.RemoteProcessCleanupInfo,System.Guid[]@,System.Int32,Alphora.Dataphor.DAE.Contracts.RemoteFetchData@)">
            <summary>Opens a remote, server-side cursor based on the prepared statement this plan represents, and fetches count rows.</summary>
            <param name="ABookmarks"> A Guid array that will receive the bookmarks for the selected rows. </param>
            <param name="ACount"> The number of rows to fetch, with a negative number indicating backwards movement. </param>
            <param name="AFetchData"> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteFetchData"/> structure containing the result of the fetch. </param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.PrepareScript(System.String,Alphora.Dataphor.DAE.Debug.DebugLocator)">
            <summary> Prepares a given script for remote execution. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.UnprepareScript(Alphora.Dataphor.DAE.Contracts.IRemoteServerScript)">
            <summary> Unprepares a given script. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.GetCatalog(System.String,System.Int64@,System.Int64@,System.Boolean@)">
            <summary>Returns the D4 commands necessary to reconstruct the remote catalog required to support the object named AName, limited to the objects requested in AObjectNames.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.GetClassName(System.String)">
            <summary>Returns the fully qualified class name for the given registered class name.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.GetFileNames(System.String,System.String)">
            <summary>Returns the names of the files and assemblies required to load the given registered class name.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerProcess.GetFile(System.String,System.String)">
            <summary>Retrieves the file for the given file name.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerBatches">
            <nodoc/>    
            <summary> Exposes the representation of a list of IRemoteServerBatch instances. </summary>
            <remarks> IRemoteServerBatches is used by <see cref="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerScript"/> to represent it's batch list. </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerScript">
            <nodoc/>
            <summary> Interface for remotely accessing a script. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Contracts.IRemoteServerScript.Process">
            <summary> The IRemoteServerSession from which this script was prepared. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerScript.Execute(Alphora.Dataphor.DAE.Contracts.RemoteParamData@,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Remotely executes the entire script. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Contracts.IRemoteServerScript.Messages">
            <summary> Provides access to the exceptions encountered when parsing this script, if any. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Contracts.IRemoteServerScript.Batches">
            <summary> A list of batches within this script. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerBatch">
            <nodoc/>
            <summary> Provides remote access to an <see cref="T:Alphora.Dataphor.DAE.IServerBatch"/>. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Contracts.IRemoteServerBatch.ServerScript">
            <summary> Represents the <see cref="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerScript"/> that this batch came from. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerBatch.Prepare(Alphora.Dataphor.DAE.Contracts.RemoteParam[])">
            <summary> Prepares a remote plan. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerBatch.Unprepare(Alphora.Dataphor.DAE.Contracts.IRemoteServerPlan)">
            <summary> Unprepares the remote plan. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerBatch.PrepareExpression(Alphora.Dataphor.DAE.Contracts.RemoteParam[],Alphora.Dataphor.DAE.Contracts.PlanDescriptor@)">
            <summary> Prepares a remote expression. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerBatch.UnprepareExpression(Alphora.Dataphor.DAE.Contracts.IRemoteServerExpressionPlan)">
            <summary> Unprepares a remote expression. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerBatch.PrepareStatement(Alphora.Dataphor.DAE.Contracts.RemoteParam[],Alphora.Dataphor.DAE.Contracts.PlanDescriptor@)">
            <summary> Prepares a remote statement. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerBatch.UnprepareStatement(Alphora.Dataphor.DAE.Contracts.IRemoteServerStatementPlan)">
            <summary> Unprepares a remote statement. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerBatch.Execute(Alphora.Dataphor.DAE.Contracts.RemoteParamData@,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Remotely executes the batch. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerPlan">
            <nodoc/>
            <summary> Remote prepared execution plan. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Contracts.IRemoteServerPlan.Process">
            <value> Returns the <see cref="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerSession"/> instance for this plan. </value>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerStatementPlan">
            <nodoc/>
            <summary> Remote prepared statement execution plan. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerStatementPlan.Execute(Alphora.Dataphor.DAE.Contracts.RemoteParamData@,Alphora.Dataphor.DAE.ProgramStatistics@,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Executes the prepared statement this plan represents. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteProposable">
            <nodoc/>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteProposable.Default(Alphora.Dataphor.DAE.Contracts.RemoteRowBody,System.String,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Requests the default values for a new row in the cursor.  </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteProposable.Change(Alphora.Dataphor.DAE.Contracts.RemoteRowBody,Alphora.Dataphor.DAE.Contracts.RemoteRowBody,System.String,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Requests the affect of a change to the given row. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteProposable.Validate(Alphora.Dataphor.DAE.Contracts.RemoteRowBody,Alphora.Dataphor.DAE.Contracts.RemoteRowBody,System.String,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Ensures that the given row is valid. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerExpressionPlan">
            <nodoc/>
            <summary> An expression plan interface designed to be utilized through remoting. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerExpressionPlan.Evaluate(Alphora.Dataphor.DAE.Contracts.RemoteParamData@,Alphora.Dataphor.DAE.ProgramStatistics@,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Evaluates the expression and returns the result. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerExpressionPlan.Open(Alphora.Dataphor.DAE.Contracts.RemoteParamData@,Alphora.Dataphor.DAE.ProgramStatistics@,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Opens a remote, server-side cursor based on the prepared statement this plan represents. </summary>        
            <returns> An <see cref="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor"/> instance for the prepared statement. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerExpressionPlan.Open(Alphora.Dataphor.DAE.Contracts.RemoteParamData@,Alphora.Dataphor.DAE.ProgramStatistics@,System.Guid[]@,System.Int32,Alphora.Dataphor.DAE.Contracts.RemoteFetchData@,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary>Opens a remote, server-side cursor based on the prepared statement this plan represents, and fetches count rows.</summary>
            <param name="ABookmarks"> A Guid array that will receive the bookmarks for the selected rows. </param>
            <param name="ACount"> The number of rows to fetch, with a negative number indicating backwards movement. </param>
            <param name="AFetchData"> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteFetchData"/> structure containing the result of the fetch. </param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerExpressionPlan.Close(Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Closes a remote, server-side cursor previously created using Open. </summary>
            <param name="ACursor"> The cursor to close. </param>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor">
            <summary> A cursor interface designed to be utilized through remoting. </summary>
            <nodoc/>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Plan">
            <value> Returns the <see cref="T:Alphora.Dataphor.DAE.Contracts.IRemoteServerExpressionPlan"/> instance for this cursor. </value>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Select(Alphora.Dataphor.DAE.Contracts.RemoteRowHeader,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Returns the current row of the cursor. </summary>
            <param name="AHeader"> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteRowHeader"/> structure containing the columns to be returned. </param>
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteRowBody"/> structure containing the row information. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Fetch(Alphora.Dataphor.DAE.Contracts.RemoteRowHeader,System.Guid[]@,System.Int32,System.Boolean,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> 
            Returns the requested number of rows from the cursor. 
            </summary>
            <param name="AHeader"> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteRowHeader"/> structure containing the columns to be returned. </param>
            <param name="ABookmarks"> An Guid array that will receive the bookmarks for the selected rows. </param>
            <param name='ACount'> The number of rows to fetch, with a negative number indicating backwards movement. </param>
            <param name='ASkipCurrent'> True if the fetch should skip the current row of the cursor, false to include the current row in the fetch. </param>
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteFetchData"/> structure containing the result of the fetch. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Fetch(System.Guid[]@,System.Int32,System.Boolean,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Returns the requested number of rows from the cursor. </summary>
            <param name="ABookmarks"> A Guid array that will receive the bookmarks for the selected rows. </param>
            <param name="ACount"> The number of rows to fetch, with a negative number indicating backwards movement. </param>
            <param name='ASkipCurrent'> True if the fetch should skip the current row of the cursor, false to include the current row in the fetch. </param>
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteFetchData"/> structure containing the result of the fetch. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.GetFlags(Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Indicates whether the cursor is on the BOF crack, the EOF crack, or both, which indicates an empty cursor. </summary>
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.CursorGetFlags"/> value indicating the current position of the cursor. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.MoveBy(System.Int32,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Provides a mechanism for navigating the cursor by a specified number of rows. </summary>        
            <param name='ADelta'> The number of rows to move by, with a negative value indicating backwards movement. </param>
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteMoveData"/> structure containing the result of the move. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.First(Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Positions the cursor on the BOF crack. </summary>
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.CursorGetFlags"/> value indicating the state of the cursor after the move. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Last(Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Positions the cursor on the EOF crack. </summary>
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.CursorGetFlags"/> value indicating the state of the cursor after the move. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Reset(Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Resets the server-side cursor, causing any data to be re-read and leaving the cursor on the BOF crack. </summary>        
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.CursorGetFlags"/> value indicating the state of the cursor after the reset. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Insert(Alphora.Dataphor.DAE.Contracts.RemoteRow,System.Collections.BitArray,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Inserts the given <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteRow"/> into the cursor. </summary>        
            <param name="ARow"> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteRow"/> structure containing the Row to be inserted. </param>
            <param name="AValueFlags"> A BitArray indicating which columns of the row have been specified. May be null. </param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Update(Alphora.Dataphor.DAE.Contracts.RemoteRow,System.Collections.BitArray,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Updates the current row of the cursor using the given <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteRow"/>. </summary>        
            <param name="ARow"> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteRow"/> structure containing the Row to be updated. </param>
            <param name="AValueFlags"> A BitArray indicating which columns of the row have been updated. May be null. </param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Delete(Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Deletes the current row from the cursor. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.GetBookmark(Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Gets a bookmark for the current row suitable for use in the <c>GotoBookmark</c> and <c>CompareBookmark</c> methods. </summary>        
            <returns> A Guid value that is the bookmark. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.GotoBookmark(System.Guid,System.Boolean,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Positions the cursor on the row denoted by the given bookmark obtained from a previous call to <c> GetBookmark </c> . </summary>        
            <param name="ABookmark"> A Guid value that is the bookmark. </param>
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteGotoData"/> structure containing the results of the goto call. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.CompareBookmarks(System.Guid,System.Guid,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Compares the value of two bookmarks obtained from previous calls to <c>GetBookmark</c> . </summary>        
            <param name="ABookmark1"> A Guid value that is the first bookmark to compare. </param>
            <param name="ABookmark2"> A Guid value that is the second bookmark to compare. </param>
            <returns> An integer value indicating whether the first bookmark was less than (negative), equal to (0) or greater than (positive) the second bookmark. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.DisposeBookmark(System.Guid,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Disposes a bookmark previously allocated with <see cref="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.GetBookmark(Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)"/>. </summary>
            <remarks> Does nothing if the bookmark does not exist, or has already been disposed.  </remarks>
            <seealso cref="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.DisposeBookmarks(System.Guid[],Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)"/>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.DisposeBookmarks(System.Guid[],Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Disposes a list of bookmarks. </summary>
            <remarks> Does nothing if the bookmark does not exist, or has already been disposed.  </remarks>
            <seealso cref="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.DisposeBookmark(System.Guid,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)"/>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Order">
            <value> Accesses the <see cref="P:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Order"/> of the cursor. </value>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.GetKey(Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteRow"/> structure containing the key for current row. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.FindKey(Alphora.Dataphor.DAE.Contracts.RemoteRow,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Attempts to position the cursor on the row matching the given key.  If the key is not found, the cursor position remains unchanged. </summary>
            <param name="AKey"> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteRow"/> structure containing the key to be found. </param>
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteGotoData"/> structure containing the results of the find. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.FindNearest(Alphora.Dataphor.DAE.Contracts.RemoteRow,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Positions the cursor on the row most closely matching the given key. </summary>
            <param name="AKey"> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteRow"/> structure containing the key to be found. </param>
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.CursorGetFlags"/> value indicating the state of the cursor after the search. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.Refresh(Alphora.Dataphor.DAE.Contracts.RemoteRow,Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <summary> Refreshes the cursor and attempts to reposition it on the given row. </summary>
            <param name="ARow"> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteRow"/> structure containing the row to be positioned on after the refresh. </param>
            <returns> A <see cref="T:Alphora.Dataphor.DAE.Contracts.RemoteGotoData"/> structure containing the result of the refresh. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Contracts.IRemoteServerCursor.RowCount(Alphora.Dataphor.DAE.Contracts.ProcessCallInfo)">
            <returns>An integer value indicating the number of rows in the cursor.</returns>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.IPing">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.RemoteProcessCleanupInfo">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.CatalogResult">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.RemoteRowHeader">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.RemoteRowBody">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.RemoteRow">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.RemoteFetchData">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.RemoteProposeData">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.RemoteParam">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.RemoteParamData">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.ExecuteResult">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.EvaluateResult">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.DirectEvaluateResult">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.CursorResult">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.DirectCursorResult">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.CursorWithFetchResult">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.DirectCursorWithFetchResult">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.FetchResult">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.RemoteMoveData">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Contracts.RemoteGotoData">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.RealSQL.Instructions">
            <summary>RealSQL instruction set</summary>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.RealSQL.Keywords">
            <summary>RealSQL keywords</summary>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.SQL.Keywords">
            <summary>SQL keywords</summary>    
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.SQL.AlterColumnDefinition._domainName">
            <summary>Null domain name indicates no change to the domain of the column</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.D4.Instructions">
            <summary>DAE instruction set</summary>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.D4.Keywords">
            <summary>Dataphor keywords</summary>    
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.D4.EmitMode.ForCopy">
            <summary>ForCopy indicates that the emission is to be used to make a copy of the object.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.D4.EmitMode.ForStorage">
            <summary>ForStorage indicates that the emission is to be used to serialize the object in the persistent catalog store.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.D4.EmitMode.ForRemote">
            <summary>ForRemote indicates that the emission is to be used to transmit the object to a client-side catalog cache.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.D4.TableIdentifierExpression">
            <remarks>The IdentifierExpression descendents are only used by the CLI to provide a more detailed ParseTree when requested.</remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.D4.ForEachStatement.IsAllocation">
            <summary>Indicates whether the variable exists in the current stack window, or should be allocated by the statement</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.D4.ForEachStatement.VariableName">
            <summary>The name of the variable that will receive the value for each successive iteration. If variable name is empty, this is a row foreach statement.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.D4.ForEachStatement.Expression">
            <summary>The list or cursor to be iterated over.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.D4.ForEachStatement.Statement">
            <summary>The iterative statement to be executed.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.D4.ReconcileMode">
            <remarks>
            	Determines when schema reconciliation takes place.<br/>
            	Startup indicates that a full catalog reconciliation is to take place on device startup.<br/>
            	Command indicates that reconciliation should be performed in response to DDL statement execution.<br/>
            	Automatic indicates that reconciliation should be performed when schema objects are requested.<br/>
            </remarks>	
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.D4.ReconcileMaster">
            <remarks>
            	Determines which catalog should be designated as master for the purpose of schema reconciliation.<br/>
            	Server indicates that the Dataphor server should be considered master.<br/>
            	Device indicates that the Device should be considered master.<br/>
            	Both indicates that each catalog should be upgraded to contain the other.<br/>
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tag.Copy">
            <summary>Returns a copy of this tag.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tag.Copy(System.String)">
            <summary>Returns a copy of this tag with the name prefixed by ANameSpace.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tag.Inherit">
            <summary>Returns a copy of this tag with the IsInherited property set to true.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tag.Inherit(System.String)">
            <summary>Returns a copy of this tag with the IsInherited property set to true, and with the tag name prefixed by ANameSpace.</summary>		
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.D4.Tags._tags">
            <summary>
            Internal list of tags, null if the list contains no tags.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.D4.Tags.Item(System.String)">
            <summary>Returns the Tag for the given name, raises an error if the Tag does not exist.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.GetTag(System.String)">
            <summary>Returns the Tag for the given name, if one exists, null otherwise.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.GetTag(System.String,System.Boolean)">
            <summary>Returns the Tag for the given name. If the tag does not exist, an error is thrown if AShouldThrow is true, otherwise, Tag.None is returned.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.GetTagValue(System.String,System.String)">
            <summary>Returns the value of the specified tag, returning ADefaultValue if the tag does not exist.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.GetTagValue(System.String,System.String,System.String)">
            <summary>Returns the value of the specific tag, returning the value of the default tag if the tag does not exist, and ADefaultValue if the default tag does not exist.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.SafeAdd(Alphora.Dataphor.DAE.Language.D4.Tag)">
            <summary>Adds the given tag if it is not already present.</summary>
            <param name="tag">The tag to be added.</param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.Add(Alphora.Dataphor.DAE.Language.D4.Tag)">
            <summary>Adds the given tag, replacing a reference or inherited tag of the same name.</summary>
            <remarks>If a tag already exists of the same name as the tag being added, the tag will be removed if it is a reference or inherited tag. Otherwise, an error will be raised.</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.Inherit(Alphora.Dataphor.DAE.Language.D4.Tag)">
            <summary>Inherits the given tag into this tag list.</summary>
            <remarks>
            If a tag with the same name as the given tag does not exist, the given tag is referenced. If the existing tag with the same name as the given tag
            is a reference, the tag reference is replaced by a call to the Inherit method of the given tag. Otherwise, the value of the existing tag is set
            based on the value of the given tag. Note that changing the value of the tag will cause the IsInherited property to be set to false.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.Join(Alphora.Dataphor.DAE.Language.D4.Tag)">
            <summary>Joins the given tag to this tag list using copy semantics.</summary>
            <remarks>
            If a tag with the same name as the given tag does not exist, the given tag is copied by calling the Copy method of the given tag.
            If the value of the given tag is different than the value of the existing tag, the existing tag is removed. Otherwise, the
            existing tag remains and no action is taken.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.JoinInherit(Alphora.Dataphor.DAE.Language.D4.Tag)">
            <summary>Joins the given tag to this list using reference semantics.</summary>
            <remarks>
            If a tag with the same name as the given tag does not exist, the given tag is referenced in this tag list.
            If the value of the given tag is different than the value of the existing tag, the existing tag is removed.
            Otherwise, the existing tag remains and no action is taken.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.Update(System.String,System.String,System.Boolean)">
            <summary>Updates the value and static setting of the given tag.</summary>
            <remarks>
            If a tag with the given name does not exist, an error is raised.
            If a tag with the given name is being referenced, that tag reference is replaced with a new tag
            with the given value and static setting. Otherwise, the tag is updated with the given value
            and static setting, and the IsInherited property of the tag is set to false.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.Update(System.String,System.String)">
            <summary>Updates the value of the given tag, and sets IsStatic to false.</summary>
            <remarks>This overload is equivalent to calling Update(ATagName, ATagValue, false)</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.Update(Alphora.Dataphor.DAE.Language.D4.Tag)">
            <summary>Updates the value of the tag with the same name as the given tag to the value and static setting of the given tag.</summary>
            <remarks>This overload is equivalent to calling Update(ATag.Name, ATag.Value, ATag.IsStatic)</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.AddOrUpdate(System.String,System.String,System.Boolean)">
            <summary>Updates or adds a tag of the given name with the given value and static setting.</summary>
            <remarks>
            If a tag of the given name does not exist, a tag will be created and added.
            If a tag with the given name is being referenced, that tag reference is replaced with a new tag
            with the given value and static setting. Otherwise, the tag is updated with the given value
            and static setting, and the IsInherited property of the tag is set to false.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.AddOrUpdate(System.String,System.String)">
            <summary>Add or updates the given tag, and sets IsStatic to false.</summary>
            <remarks>This overload is equivalent to calling AddOrUpdate(ATagName, ATagValue, false)</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.AddOrUpdate(Alphora.Dataphor.DAE.Language.D4.Tag)">
            <summary>Adds or updates the tag with the same name as the given tag to the value and static setting of the given tag.</summary>
            <remarks>This overload is equivalent to calling AddOrUpdate(ATag.Name, ATag.Value, ATag.IsStatic)</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.AddRange(Alphora.Dataphor.DAE.Language.D4.Tag[])">
            <summary>Calls Add for each Tag in the given array.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.AddRange(Alphora.Dataphor.DAE.Language.D4.Tags)">
            <summary>Calls Add for each Tag in the given list.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.UpdateRange(Alphora.Dataphor.DAE.Language.D4.Tag[])">
            <summary>Calls Update for each Tag in the given array.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.UpdateRange(Alphora.Dataphor.DAE.Language.D4.Tags)">
            <summary>Calls Update for each Tag in the given list.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.AddOrUpdateRange(Alphora.Dataphor.DAE.Language.D4.Tag[])">
            <summary>Calls AddOrUpdate for each Tag in the given array.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.AddOrUpdateRange(Alphora.Dataphor.DAE.Language.D4.Tags)">
            <summary>Calls AddOrUpdate for each Tag in the given list.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.SafeRemove(System.String)">
            <summary>Removes the tag of the given name if it exists. Otherwise, no action is taken.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.RemoveTag(System.String)">
            <summary>Removes the tag of the given name and returns it, if it exists. Otherwise, null is returned.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.Remove(System.String)">
            <summary>Removes the tag of the given name if it exists. Otherwise, an error is raised.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.SafeRemove(Alphora.Dataphor.DAE.Language.D4.Tag)">
            <summary>Removes the tag with the same name as the given tag if one exists. Otherwise no action is taken.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.Remove(Alphora.Dataphor.DAE.Language.D4.Tag)">
            <summary>Removes the tag with the same name as the given tag if one exists. Otherwise, an error is raised.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.RemoveRange(Alphora.Dataphor.DAE.Language.D4.Tag[])">
            <summary>Calls Remove for each tag in the given array.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.RemoveRange(Alphora.Dataphor.DAE.Language.D4.Tags)">
            <summary>Calls Remove for each tag in the given list.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.SafeRemoveRange(Alphora.Dataphor.DAE.Language.D4.Tag[])">
            <summary>Calls SafeRemove for each tag in the given array.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.SafeRemoveRange(Alphora.Dataphor.DAE.Language.D4.Tags)">
            <summary>Calls SafeRemove for each tag in the given list.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.Contains(Alphora.Dataphor.DAE.Language.D4.Tag)">
            <summary>Returns true if this list contains a tag with the same name as the given tag, false otherwise.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alphora.Dataphor.DAE.Language.D4.Tags.Contains(System.String)" -->
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.CopyTo(Alphora.Dataphor.DAE.Language.D4.Tags)">
            <summary>Copies tags from this tag list to the given tag list.</summary>
            <remarks>
            If the tag in this tag list is a reference, it is copied using the Inherit() method of the tag being referenced,
            otheriwse it is copied using the Copy() method of the tag.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Tags.GetSubset(System.Boolean)">
            <summary> Returns the set of static or non-static tags (not cloned). </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.MetaData.Copy">
            <summary>Creates a copy of the metadata, with tag references copied as inherited tags.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.MetaData.Inherit">
            <summary>Inherits all dynamic tags, with tag references inherited.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.MetaData.Merge(Alphora.Dataphor.DAE.Language.D4.MetaData)">
            <summary>Merges all tags from the given metadata into this metadata.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.MetaData.Inherit(Alphora.Dataphor.DAE.Language.D4.MetaData)">
            <summary>Inherits all dynamic tags from the given metadata into this metadata.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.MetaData.Join(Alphora.Dataphor.DAE.Language.D4.MetaData)">
            <summary>Joins each dynamic tag from the given metadata to the tags for this metadata using copy semantics.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.MetaData.JoinInherit(Alphora.Dataphor.DAE.Language.D4.MetaData)">
            <summary>Joins each dynamic tag from the given metadata to the tags for this metadata using reference semantics.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.MetaData.GetTag(Alphora.Dataphor.DAE.Language.D4.MetaData,System.String)">
            <summary>Retrives the tag of the given name from the given metadata, if the tag exists. Otherwise, null is returned.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.MetaData.RemoveTag(Alphora.Dataphor.DAE.Language.D4.MetaData,System.String)">
            <summary>Removes the tag of the given name from the given metadata and returns it, if it exists. Otherwise, null is returned.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.MetaData.GetTag(Alphora.Dataphor.DAE.Language.D4.MetaData,System.String,System.String,System.String)">
            <summary>Retrieves the value of the given tag from the given metadata, defaulted to the value of the default tag, or the given default value, if neither tag exists.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.MetaData.GetTag(Alphora.Dataphor.DAE.Language.D4.MetaData,System.String,System.String)">
            <summary>Retrieves the value of the given tag from the given metadata, defaulted to the given default value if no tag of that name exists.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.D4.Parser">
            <remarks> Given a Dataphor expression in string form, return a parsed statement.</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Parser.ParseScript(System.String,Alphora.Dataphor.DAE.Language.ParserMessages)">
            <summary>Parses the given Dataphor script.</summary>
            <returns>Returns the script in terms of <see cref="M:Alphora.Dataphor.DAE.Language.D4.Parser.Statement"/> descendents</returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Parser.ParseExpression(System.String)">
            <summary>Parses the given D4 expression.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.D4.Parser.ParseCursorDefinition(System.String)">
            <summary>Parses the given D4 cursor definition.</summary>
            <returns>Returns the parse tree corresponding to the given cursor definition in terms of <see cref="M:Alphora.Dataphor.DAE.Language.D4.Parser.Expression"/> descendents.  Ignores a leading select or cursor selector in the input string.</returns>        
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.LanguageException">
            <summary>Indicates an invalid configuration of the elements in an abstract syntax tree.</summary>
            <remarks>
            The LanguageException is an internal exception used to assert the validity of a given abstract syntax tree.
            LanguageExceptions are thrown when an attempt is made to construct an invalid abstract syntax tree.
            Only the parser should throw this exceptions of this type.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.StatementExpected">
            <summary>Error code 107100: "Statement expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ExpressionExpected">
            <summary>Error code 107101: "Expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.IdentifierExpected">
            <summary>Error code 107102: "Identifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.InstructionExpected">
            <summary>Error code 107103: "Instruction expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.StatementContainer">
            <summary>Error code 107104: "Statement container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ExpressionContainer">
            <summary>Error code 107105: "Expression container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.CaseItemExpected">
            <summary>Error code 107106: "Case item expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.CaseElseExpected">
            <summary>Error code 107107: "Else expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.CaseItemExpressionContainer">
            <summary>Error code 107108: "Case item expression container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ErrorHandlerContainer">
            <summary>Error code 107109: "ErrorHandler container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.TargetExpected">
            <summary>Error code 107110: "Target expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.UpdateColumnExpressionContainer">
            <summary>Error code 107111: "Update column expression container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ServerNameExpected">
            <summary>Error code 107112: "Server name expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ColumnExpressionContainer">
            <summary>Error code 107113: "Column expression container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.NamedColumnExpressionContainer">
            <summary>Error code 107114: "NamedColumn expression container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ColumnNameExpected">
            <summary>Error code 107115: "Column name expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.RenameColumnExpressionContainer">
            <summary>Error code 107116: "RenameColumn expression container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AdornColumnExpressionContainer">
            <summary>Error code 107117: "Adorn column expression container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AggregateColumnExpressionContainer">
            <summary>Error code 107119: "Aggregate expression "{0}" may only contain expression, column, or aggregate column expressions."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.TableNameExpected">
            <summary>Error code 107121: "Table name expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DeviceNameExpected">
            <summary>Error code 107122: "Device name expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ViewNameExpected">
            <summary>Error code 107123: "View name expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.PropertyDefinitionContainer">
            <summary>Error code 107124: "PropertyDefintion container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AlterPropertyDefinitionContainer">
            <summary>Error code 107125: "PropertyDefintion container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DropPropertyDefinitionContainer">
            <summary>Error code 107126: "PropertyDefintion container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.RepresentationDefinitionContainer">
            <summary>Error code 107127: "RepresentationDefintion container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AlterRepresentationDefinitionContainer">
            <summary>Error code 107128: "RepresentationDefintion container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DropRepresentationDefinitionContainer">
            <summary>Error code 107129: "RepresentationDefintion container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.SpecialDefinitionContainer">
            <summary>Error code 107130: "ScalarType special value definition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AlterSpecialDefinitionContainer">
            <summary>Error code 107131: "ScalarType special value definition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DropSpecialDefinitionContainer">
            <summary>Error code 107132: "ScalarType special value definition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ScalarTypeNameDefinitionContainer">
            <summary>Error code 107133: "ScalarType name definition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ScalarTypeNameExpected">
            <summary>Error code 107134: "ScalarType name expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ClassDefinitionExpected">
            <summary>Error code 107135: "Class definition expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.OperatorNameExpected">
            <summary>Error code 107136: "Operator name expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.TypeSpecifierExpected">
            <summary>Error code 107137: "Type specifier expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DeviceScalarTypeMapContainer">
            <summary>Error code 107139: "Device map item container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AlterDeviceScalarTypeMapContainer">
            <summary>Error code 107140: "Device map item container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DropDeviceScalarTypeMapContainer">
            <summary>Error code 107141: "Device map item container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DeviceOperatorMapContainer">
            <summary>Error code 107142: "Device map item container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AlterDeviceOperatorMapContainer">
            <summary>Error code 107143: "Device map item container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DropDeviceOperatorMapContainer">
            <summary>Error code 107144: "Device map item container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ColumnDefinitionContainer">
            <summary>Error code 107145: "ColumnDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AlterColumnDefinitionContainer">
            <summary>Error code 107146: "AlterColumnDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DropColumnDefinitionContainer">
            <summary>Error code 107147: "DropColumnDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.KeyColumnDefinitionContainer">
            <summary>Error code 107148: "KeyColumnDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ReferenceColumnDefinitionContainer">
            <summary>Error code 107149: "ReferenceColumnDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.OrderColumnDefinitionContainer">
            <summary>Error code 107150: "OrderColumnDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.KeyDefinitionContainer">
            <summary>Error code 107151: "KeyDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AlterKeyDefinitionContainer">
            <summary>Error code 107152: "AlterKeyDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DropKeyDefinitionContainer">
            <summary>Error code 107153: "DropKeyDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ReferenceDefinitionContainer">
            <summary>Error code 107154: "ReferenceDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AlterReferenceDefinitionContainer">
            <summary>Error code 107155: "AlterReferenceDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DropReferenceDefinitionContainer">
            <summary>Error code 107156: "DropReferenceDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.OrderDefinitionContainer">
            <summary>Error code 107157: "OrderDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AlterOrderDefinitionContainer">
            <summary>Error code 107158: "AlterOrderDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DropOrderDefinitionContainer">
            <summary>Error code 107159: "DropOrderDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ConstraintDefinitionContainer">
            <summary>Error code 107160: "ConstraintDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AlterConstraintDefinitionContainer">
            <summary>Error code 107161: "AlterConstraintDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DropConstraintDefinitionContainer">
            <summary>Error code 107162: "DropConstraintDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ClassAttributeDefinitionContainer">
            <summary>Error code 107163: "ClassAttributeDefinition container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ClassAttributeNotFound">
            <summary>Error code 107164: "Class attribute "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.NamedTypeSpecifierContainer">
            <summary>Error code 107165: "NamedTypeSpecifier container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.FormalParameterContainer">
            <summary>Error code 107166: "Formal parameter container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.FormalParameterSpecifierContainer">
            <summary>Error code 107167: "Modified type specifier container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DeleteStatementContainer">
            <summary>Error code 107168: "Delete statement "{0}" may only contain delete, from, and where clauses."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DeleteClauseExpected">
            <summary>Error code 107169: "Delete clause expected in delete statement "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.FromClauseExpectedInDelete">
            <summary>Error code 107170: "From clause expected in delete statement "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.FromClauseOrExpressionContainer">
            <summary>Error code 107172: "Join clause "{0}" may only contain a from clause and a join expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.FromClauseExpectedInJoin">
            <summary>Error code 107173: "From clause expected in join clause "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ExpressionOrJoinClauseContainer">
            <summary>Error code 107174: "From clause "{0}" may only contain join clauses."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.TableExpressionExpected">
            <summary>Error code 107175: "Table expression expected in from clause "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.TableAliasExpected">
            <summary>Error code 107176: "Table alias expected in from clause "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.JoinExpressionExpected">
            <summary>Error code 107177: "Join expression expected in join clause "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.InvalidJoinType">
            <summary>Error code 107178: "Invalid join type in join clause "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.OrderFieldExpressionContainer">
            <summary>Error code 107179: "Order clause "{0}" may only contain order field expressions."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.SelectExpressionContainer">
            <summary>Error code 107180: "Select expression "{0}" may only contain select, from, where, group or having clauses."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.SelectClauseExpected">
            <summary>Error code 107181: "Select clause expected in select expression "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.FromClauseExpectedInSelect">
            <summary>Error code 107182: "From clause expected in select expression "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.SelectExpressionExpectedInUnion">
            <summary>Error code 107184: "Select expression expected in union expression "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.SelectOrUnionExpressionContainer">
            <summary>Error code 107185: "Query expression "{0}" may only contain select or union expressions."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.SelectExpressionExpectedInQuery">
            <summary>Error code 107186: "Select expression expected in query expression "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.QueryExpressionOrOrderClauseContainer">
            <summary>Error code 107187: "Select statement "{0}" may only contain a query expression or order by clause."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.QueryExpressionExpected">
            <summary>Error code 107188: "Query expression expected in select statement "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.InsertFieldOrTableExpressionContainer">
            <summary>Error code 107189: "Insert clause "{0}" may only contain a table expression and insert field expressions."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.InsertClauseOrValuesExpressionContainer">
            <summary>Error code 107190: "Insert statement "{0}" may only contain an insert clause and a values expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.InsertClauseExpected">
            <summary>Error code 107191: "Insert clause expected in insert statement "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.ValuesExpressionExpected">
            <summary>Error code 107192: "Expression expected in insert statement "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.UpdateFieldOrTableExpressionContainer">
            <summary>Error code 107193: "Update clause "{0}" may only contain a table expression and update field expressions."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.UpdateStatementContainer">
            <summary>Error code 107194: "Update statement "{0}" may only contain update, from, and where clauses."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.UpdateClauseExpected">
            <summary>Error code 107195: "Update clause expected in update statement "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.FromClauseExpectedInUpdate">
            <summary>Error code 107196: "From clause expected in update statement "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.TableExpressionContainer">
            <summary>Error code 107197: "Delete clause "{0}" may only contain a table expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DataphorException">
            <summary>Error code 107198: "Dataphor exception: {0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.UnknownTypeSpecifier">
            <summary>Error code 107199: "Unknown type specifier: "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.TagReferenceRequired">
            <summary>Error code 107200: "Tag reference may not be null."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.InvalidOperand">
            <summary>Error code 107201: "Invalid operand "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.UnknownStatementClass">
            <summary>Error code 107202: "Unknown statement class "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.UnknownExpressionClass">
            <summary>Error code 107203: "Unknown expression class "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.UnknownInstruction">
            <summary>Error code 107204: "Unknown instruction "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.NamedExpressionNotFound">
            <summary>Error code 107205: "Named expression "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.UnknownJoinType">
            <summary>Error code 107206: "Unknown join type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.TableAliasRequired">
            <summary>Error code 107207: "Table alias required."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.NamedExpressionNotFoundByExpression">
            <summary>Error code 107208: "An entry for the given expression was not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.InvalidContainer">
            <summary>Error code 107209: "{0} container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DuplicateLanguageModifierName">
            <summary>Error code 107210: "Duplicate language modifier "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.LanguageModifierNotFound">
            <summary>Error code 107211: "Language modifier "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.AmbiguousModifierReference">
            <summary>Error code 107212: "Language modifier "{0}" is ambiguous."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LanguageException.Codes.DuplicateAttributeDefinition">
            <summary>Error code 107213: "Class definition already contains a definition for the attribute "{0}"."</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.LexerToken.AsSymbol">
            <summary> Returns the currently active TokenType as a symbol. </summary>
            <remarks> Will raise a <see cref="T:Alphora.Dataphor.DAE.Language.LexerException"/> if the current TokenType is not a symbol. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.LexerToken.AsString">
            <summary> Returns the currently active TokenType as a string. </summary>
            <remarks> Will raise a <see cref="T:Alphora.Dataphor.DAE.Language.LexerException"/> if the current TokenType is not a string. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.LexerToken.AsBoolean">
            <summary> Returns the currently active TokenType as a boolean value. </summary>
            <remarks> Will raise a <see cref="T:Alphora.Dataphor.DAE.Language.LexerException"/> if the current TokenType is not a boolean. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.LexerToken.AsInteger">
            <summary> Returns the currently active TokenType as an integer value. </summary>
            <remarks> Will raise a <see cref="T:Alphora.Dataphor.DAE.Language.LexerException"/> if the current TokenType is not an integer. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.LexerToken.AsFloat">
            <summary> Returns the currently active TokenType as a float value. </summary>
            <remarks> Will raise a <see cref="T:Alphora.Dataphor.DAE.Language.LexerException"/> if the current TokenType is not a float. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.LexerToken.AsHex">
            <summary> Returns the currently active TokenType as a money value. </summary>
            <remarks> Will raise a <see cref="T:Alphora.Dataphor.DAE.Language.LexerException"/> if the current TokenType is not a money literal. </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.LexerToken.CheckType(Alphora.Dataphor.DAE.Language.TokenType)">
            <summary> Ensures that the current TokenType is of the given type.  </summary>
            <remarks> Will raise a <see cref="T:Alphora.Dataphor.DAE.Language.LexerException"/> if it is not. </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.LexerToken.CheckSymbol(System.String)">
            <summary> Ensures that the current TokenType is a symbol equal to the given symbol.  </summary>
            <remarks> Will raise a <see cref="T:Alphora.Dataphor.DAE.Language.LexerException"/> if it is not. </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.Lexer">
            <summary> General purpose lexical analyzer suitable for tokenizing statements of Dataphor and SQL. </summary>
            <remarks>
            	Possible tokens are defined by the <see cref="T:Alphora.Dataphor.DAE.Language.LexerToken"/> enum.
                Whitespace is defined by the <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> method.  See the file BNF.txt for a
            	formal definition of the lexer.  The lexer is initially on a "crack" so the current (0th) entry 
            	is not valid until NextToken() is invoked.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.Lexer.#ctor(System.String)">
            <remarks> It is an error to access the current TokenType until <see cref="M:Alphora.Dataphor.DAE.Language.Lexer.NextToken"/> has been called. </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.Lexer._tokens">
            <summary> Buffer of tokens (clock allocation). </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.Lexer._currentIndex">
            <summary> Current position within the token buffer of the current token. </summary>
            <remarks> Initialized in the constructor to last position so that the lexer starts on a "crack". </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.Lexer.ReadNext(System.Int32)">
            <summary> Reads the next token into the specified location within the buffer. </summary>
            <returns> True if the read token type is not EOF. </returns>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.Lexer.Item(System.Int32,System.Boolean)">
            <summary> The token a specific number of tokens ahead of the current token. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.Lexer.NextToken">
            <summary>Advances the current token.</summary>
            <returns>Returns the now active token.</returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.Lexer.PeekToken(System.Int32)">
            <summary> Gets the symbol the specified number of tokens ahead without advancing the current token. </summary>
            <remarks> If the token is not a symbol, returns an empty string. </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.Lexer.PeekTokenSymbol(System.Int32)">
            <summary> Gets the symbol the specified number of tokens ahead without advancing the current token. </summary>
            <remarks> If the token is not a symbol, returns an empty string. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.Tokenizer.Line">
            <summary> The line number (one-based) of the beginning of the last read token. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Language.Tokenizer.LinePos">
            <summary> The offset position (one-based) of the beginning of the last read token. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.Tokenizer.ReadNext">
            <summary> Pre-reads the next TokenType (does not affect current). </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.Tokenizer.SkipWhiteSpace">
            <summary> Skips any whitespace. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.Tokenizer.SkipComments">
            <summary> Skips all comments and whitepace. </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alphora.Dataphor.DAE.Language.Tokenizer.SkipLineComments" -->
        <member name="T:Alphora.Dataphor.DAE.Language.LexerException">
            <summary>Indicates an exception encoutered during lexical analysis.</summary>
            <remarks>
            The LexerException is thrown whenever the lexical analyzer encouters an error state.
            Only the lexer should throw exceptions of this type.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LexerException.Codes.UnterminatedString">
            <summary>Error code 102100: "Unterminated string constant."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LexerException.Codes.InvalidNumericValue">
            <summary>Error code 102101: "Invalid numeric value."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LexerException.Codes.IllegalInputCharacter">
            <summary>Error code 102102: "Illegal character "{0}" in input string."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LexerException.Codes.TokenExpected">
            <summary>Error code 102103: "{0} expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LexerException.Codes.SymbolExpected">
            <summary>Error code 102104: ""{0}" expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LexerException.Codes.NoActiveToken">
            <summary>Error code 102105: "No active token."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LexerException.Codes.UnexpectedEOF">
            <summary>Error code 102106: "Unexpected end-of-file."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.LexerException.Codes.UnterminatedComment">
            <summary>Error code 102107: "Unterminated comment."</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.LanguageModifier">
            <remarks> LanguageModifier </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.ParserException">
            <summary>Indicates an exception encountered while attempt to construct an abstract syntax tree from a lexical stream.</summary>
            <remarks>
            The ParserException is thrown when the parser encounters an invalid token in the input stream.
            These exceptions indicate an invalid input string is being parsed.
            Only the parser should throw exceptions of this type.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.StatementExpected">
            <summary>Error code 109100: "Statement expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.UnknownTokenType">
            <summary>Error code 109101: "Unknown token type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.ListTerminatorExpected">
            <summary>Error code 109102: ""," or "}" expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.GroupTerminatorExpected">
            <summary>Error code 109103: ""," or ")" expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.StatementTerminatorExpected">
            <summary>Error code 109104: "";" or EOF expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.CaseItemExpressionExpected">
            <summary>Error code 109105: "Case item expression expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.UnknownCreateDirective">
            <summary>Error code 109106: "Unknown create directive "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.UnknownCreateScalarTypeDirective">
            <summary>Error code 109107: "Unknown create type directive "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.UnknownAlterDirective">
            <summary>Error code 109108: "Unknown alter directive "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.UnknownAlterScalarTypeDirective">
            <summary>Error code 109109: "Unknown alter type directive "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.UnknownDropDirective">
            <summary>Error code 109110: "Unknown drop directive "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.UnknownReferenceAction">
            <summary>Error code 109111: "Unknown reference action "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.DefaultDefinitionExists">
            <summary>Error code 109112: "Default definition already specified."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.InvalidOverrideDirective">
            <summary>Error code 109113: "Override directive not allowed after reintroduce."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.InvalidAbstractDirective">
            <summary>Error code 109114: "Operator marked as abstract cannot have a method body."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.InvalidOperatorDefinition">
            <summary>Error code 109115: "Operator must have either a class definition or a body defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.InvalidParameterModifier">
            <summary>Error code 109116: "Invalid parameter modifier."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.InvalidIdentifier">
            <summary>Error code 109117: ""{0}" is not a valid identifier."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.ReservedWordIdentifier">
            <summary>Error code 109118: ""{0}" is a reserved word and may not be used as an identifier."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.TryStatementExpected">
            <summary>Error code 109119: "finally or except expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.DDLDirectiveExpected">
            <summary>Error code 109120: "Schema definition directive expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.TypeSpecifierSet">
            <summary>Error code 109121: "Type specifier already set for selector expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.UnknownEventSpecifier">
            <summary>Error code 109122: "Unknown event specifier "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.InvalidEventSpecifierList">
            <summary>Error code 109123: "Event specifier list contains incompatible event specifiers."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.SortDefinitionExists">
            <summary>Error code 109124: "Sort definition already specified."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.InvalidRightSpecifier">
            <summary>Error code 109125: "Invalid right specifier ('all', 'usage', or '{&lt;list of rights&gt;}' expected)."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.InvalidSecuritySpecifier">
            <summary>Error code 109126: "Invalid security specifier."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.UnknownConstraintTarget">
            <summary>Error code 109127: "Unknown constraint target."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.ParserException.Codes.InvalidColumnExtractorExpression">
            <summary>Error code 109128: "Column extractor expression must reference a single column unless invoking an aggregate operator."</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.ParserMessages.HasErrors">
            <summary>Returns true if there are any errors.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Language.ParserMessages.SetLocator(Alphora.Dataphor.DAE.Debug.DebugLocator)">
            <summary> Sets the locator and increments the offsets for all locator exceptions that don't have one. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Language.SyntaxException">
            <summary>Indicates a syntactic error encountered during the lexical and syntactic analysis phases of compilation.</summary>
            <remarks>
            The SyntaxException is used to return the line number and position of the lexical analyzer when an error is encountered
            during lexical analysis or parsing.  Any exception encountered during these phases will be wrapped with an exception
            of this type.  Only the parser should throw exceptions of this type.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Language.SyntaxException.Codes.SyntaxError">
            <summary>Error code 103100: "Syntax error near "{0}"."</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.ServerState">
            <summary>
            The possible values indicating the state of the Dataphor Server.
            </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.ServerState.Stopped">
            <summary>
            The Dataphor Server is not running, either because it has not been started, or it has been stopped.
            </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.ServerState.Starting">
            <summary>
            The Dataphor Server is in the process of starting in response to a Start command. 
            The Dataphor Server will not respond to connection requests while it is in this state.
            </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.ServerState.Started">
            <summary>
            The Dataphor Server is running and ready to accept connection requests.
            </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.ServerState.Stopping">
            <summary>
            The Dataphor Server is in the process of stopping in response to a Stop command. 
            The Dataphor Server will not respond to connection requests while it is in this state.
            </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerBase">
            <summary> Contains the members common to both remote and local server interfaces </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerBase.Name">
            <summary> The name of the Dataphor Server instance. </summary>
            <value> <para>String</para>
            <para> Default: Dataphor</para> </value>
            <remarks> 
            Returns the name of this Dataphor Server instance. 
            This value can only be set when the Dataphor Server is not running.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerBase.Start">
            <summary> Starts the Dataphor Server instance. </summary>
            <remarks> If the Dataphor Server instance is already running, this call has no effect. </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerBase.Stop">
            <summary> Stops the Dataphor Server instance. </summary>
            <remarks> If the Dataphor Server instance is not running, this call has no effect. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerBase.State">
            <summary> Retrieves the state of the Dataphor Server. </summary>
            <value> ServerState: Starting|Started|Stopping|Stopped </value>
            <remarks>
             <para>Returns a <see cref="T:Alphora.Dataphor.DAE.ServerState"/> value that is one of the </para>
             <para>ServerState enum values indicating the state of the Dataphor Server.</para>
             <para>Stopped -> The Dataphor Server is not running, either because 
             it has not been started, or it has been stopped.</para>
             <para>Starting -> The Dataphor Server is in the process of starting 
             in response to a Start command.  The Dataphor Server will not
             respond to connection requests while it is in this state.</para>
             <para>Started -> The Dataphor Server is running and ready to 
             accept connection requests.</para>
             <para>Stopping -> The Dataphor Server is in the process of 
             stopping in response to a Stop command.  The Dataphor Server will not
             respond to connection requests while it is in this state.</para>
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerBase.CacheTimeStamp">
            <summary>Retrieves the cache timestamp for this server instance.</summary>
            <value> 
            Returns the cache timestamp for this server instance.  
            This timestamp is affected by changes to existing types, 
            operators, and table variables.
            </value>
            <remarks>
            This time stamp is used to coordinate the consistency of a schema cache.  
            It is a monotonically increasing number set by the server whenever the following events occur:
            	A type, table, view, operator, or aggregate operator is altered.
            	A type, table, view, operator, or aggregate operator is dropped.
            A <see cref="T:Alphora.Dataphor.DAE.Server.ServerException"/> will be thrown if the Dataphor Server is not running.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerBase.DerivationTimeStamp">
            <summary>Retrieves the derivation timestamp for this server instance.</summary>
            <value> 
            Returns the derivation timestamp for this server instance.  
            This timestamp is affected by changes to existing types and table variables, 
            and by any reference DDL statement.
            </value>
            <remarks>
            This time stamp is used to coordinate the derivation cache maintained by the frontend server.  
            It is a monotonically increasing number set by the server whenever the following events occur:
            	A reference is created.
            	A type, table, view, or reference is altered.
            	A type, table, view, or reference is dropped.
            A <see cref="T:Alphora.Dataphor.DAE.Server.ServerException"/> will be thrown if the Dataphor Server is not running.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServer">
            <summary> Local server interface. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServer.Connect(Alphora.Dataphor.DAE.SessionInfo)">
            <summary>
            Connects to the server using the given session configuration information.
            </summary>
            <param name='ASessionInfo'> A <see cref="T:Alphora.Dataphor.DAE.SessionInfo"/> object describing session configuration information for the connection request. </param>
            <returns> An <see cref="T:Alphora.Dataphor.DAE.IServerSession"/> interface to the open session. </returns>
            <remarks>
            This method will raise a <see cref="T:Alphora.Dataphor.DAE.Server.ServerException"/> if the Dataphor Server is not running.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServer.Disconnect(Alphora.Dataphor.DAE.IServerSession)">
            <summary> Disconnects an active session. </summary>
            <param name='ASession'> The <see cref="T:Alphora.Dataphor.DAE.IServerSession"/> to be disconnected. </param>
            <remarks>
            If the Dataphor Server is not running, a <see cref="T:Alphora.Dataphor.DAE.Server.ServerException"/> will be raised.
            If the given session is not a valid session for this Dataphor Server, a <see cref="T:Alphora.Dataphor.DAE.Server.ServerException"/> will be raised.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServer.Catalog">
            <summary>Retrieves the local or remote catalog for this server.</summary>
            <remarks>This may be a local or remote catalog and may thus contain a partial or complete representation of the schema.</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerSessionBase">
            <summary> Contains the members common to both remote and local session interfaces </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerSessionBase.SessionID">
            <value> Returns the Dataphor Server assigned ID for this session. </value>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerSessionBase.SessionInfo">
            <value> Returns the <see cref="P:Alphora.Dataphor.DAE.IServerSessionBase.SessionInfo"/> object for this session. </value>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerSession">
            <summary> A local session interface. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerSession.Server">
            <value> Returns the <see cref="T:Alphora.Dataphor.DAE.IServer"/> instance for this session. </value>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerSession.StartProcess(Alphora.Dataphor.DAE.ProcessInfo)">
            <summary> Starts a new process on the session. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerSession.StopProcess(Alphora.Dataphor.DAE.IServerProcess)">
            <summary> Stops the given process. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IsolationLevel">
            <summary>Enumerates the set of Isolation Levels available in the Dataphor Server.</summary>
            <remarks>
            Isolation allows transactions to run as though they were the only transaction running on the system. 
            Isolation levels allow users of the system to control what level of concurrency a given transaction should use. 
            Isolation is achieved at the cost of concurrency. In other words, a completely isolated transaction must ensure
            no resources it relies on can change during the transaction, and therefore causes more contention. Lower isolation
            levels allow the transaction to ensure that only resources it has changed cannot be changed by other transactions,
            and control whether or not changes made by other transactions are visible within the transaction.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.IsolationLevel.Browse">
            <summary>
            Prevents lost updates but allows dirty reads. Data that is written is locked but data that is read may be uncommitted data from other transactions.
            </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.IsolationLevel.CursorStability">
            <summary>
            Prevents lost updates and doesn't allow dirty reads. Data that is written is locked and data that is read is only committed data from other transactions.
            </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.IsolationLevel.Isolated">
            <summary>
            Prevents lost updates and ensures repeatable reads, which implies no dirty reads. This is the highest degree of isolation and provides complete isolation from other transactions.
            </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerProcessBase">
            <summary>Exposes the interface for communicating with a process in the Dataphor Server.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerProcessBase.ProcessID">
            <summary> A unique identifier for the process. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerProcessBase.ProcessInfo">
            <summary> Returns the <see cref="P:Alphora.Dataphor.DAE.IServerProcessBase.ProcessInfo"/> object for this process. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcessBase.BeginTransaction(Alphora.Dataphor.DAE.IsolationLevel)">
            <summary> Begins a new transaction on this process. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcessBase.PrepareTransaction">
            <summary> Prepares a transaction for commit. </summary>
            <remarks>
            Validates that all data within the transaction is consistent, and prepares the transaction for commit.
            It is not necessary to call this to commit the transaction, it is exposed to allow the process to participate in
            2PC distributed transactions.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcessBase.CommitTransaction">
            <summary> Commits the currently active transaction. </summary>
            <remarks>
            Commits the currently active transaction.  
            Reduces the transaction nesting level by one.  
            Will raise if no transaction is currently active.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcessBase.RollbackTransaction">
            <summary>Rolls back the currently active transaction. </summary>
            <remarks>
            Reduces the transaction nesting level by one.
            Will raise if no transaction is currently active.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerProcessBase.InTransaction">
            <value> Returns a boolean value indicating whether the process is currently participating in a transaction. </value>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerProcessBase.TransactionCount">
            <value> Returns the number of active transactions on the current process. </value>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.BeginApplicationTransaction(System.Boolean,System.Boolean)">
            <summary>Begins an application transaction and returns its unique identifier.</summary>        
            <param name="AShouldJoin">Indicates whether the process should auto-enlist in the newly created application transaction.</param>
            <param name="AIsInsert">If joining the new application transaction, should it join as insert participant.</param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.PrepareApplicationTransaction(System.Guid)">
            <summary>Prepares the application transaction for commit.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.CommitApplicationTransaction(System.Guid)">
            <summary>Commits the application transaction with the given identifier.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.RollbackApplicationTransaction(System.Guid)">
            <summary>Aborts the application transaction with the given identifier.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerProcess.ApplicationTransactionID">
            <summary>Returns the ID of the application transaction this process is currently participating in, and Guid.Empty otherwise.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.JoinApplicationTransaction(System.Guid,System.Boolean)">
            <summary>Joins this process to the given application transaction.</summary>
            <remarks>
            Joins this process to the given application transaction. If the process joins the application transaction
            as an insert participant, then the data for the tables referenced in this process will not be copied into
            the application transaction space. All references to tables on this process will be referencing the tables
            in the application transaction space, rather than the actual database tables.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.LeaveApplicationTransaction">
            <summary>Leaves the application transaction that this process is participating in.</summary>
            <remarks>
            Once the process is no longer a participant in the application transaction, all table references will once again
            reference the table variables in the actual database.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.PrepareStatement(System.String,Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary> Prepares the given statement for execution. </summary>
            <param name='AStatement'> A single valid statement to prepare. </param>
            <returns> An <see cref="T:Alphora.Dataphor.DAE.IServerStatementPlan"/> instance for the prepared statement. </returns>
            <remarks> 
            Only the first statement parsed from <c>AStatement</c> will be prepared.  If the
            input string contains more than a single statement, it will be ignored.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.UnprepareStatement(Alphora.Dataphor.DAE.IServerStatementPlan)">
            <summary> Unprepares a statement plan. </summary>
            <param name="APlan"> A reference to a plan object returned from a call to PrepareStatement. </param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.Execute(System.String,Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary>Executes the given statement.</summary>
            <param name='AStatement'> A single valid Dataphor statement to prepare. </param>
            <remarks> 
            <para>
            Only the first statement parsed from <c>AStatement</c> will be executed.  If the
            input string contains more than a single statement, it will be ignored.
            </para>
            <para>
            This call is equivalent to preparing the statement, executing the prepared plan,
            and unpreparing the plan. It is provided for convenience if multiple execution
            of the prepared statement is not necessary.
            </para>
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.PrepareExpression(System.String,Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary> 
            Prepares the given expression for selection.  
            </summary>
            <param name='AExpression'> A single valid expression to prepare. </param>
            <returns> An <see cref="T:Alphora.Dataphor.DAE.IServerExpressionPlan"/> instance for the prepared expression. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.UnprepareExpression(Alphora.Dataphor.DAE.IServerExpressionPlan)">
            <summary> Unprepares an expression plan. </summary>
            <param name="APlan"> A reference to a plan object returned from a call to PrepareExpression. </param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.Evaluate(System.String,Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary>Evaluates the given expression and returns the result.</summary>
            <param name='AExpression'>A single valid expression to be evaluated.</param>
            <remarks>
            This call is equivalent to preparing the expression, evaluating the prepared plan,
            and unpreparing the plan.  It is provided for convenience if multiple evaluation
            of the prepared expression is not necessary.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.OpenCursor(System.String,Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary>Opens a server-side cursor based on the prepared statement this plan represents.</summary>        
            <param name='AExpression'>A single table-valued expression to be retrieved.</param>
            <returns>An <see cref="T:Alphora.Dataphor.DAE.IServerCursor"/> instance for the prepared expression.</returns>
            <remarks>
            This call is equivalent to preparing the expression and opening the cursor from the prepared plan.
            The prepared plan is available through the cursor.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.CloseCursor(Alphora.Dataphor.DAE.IServerCursor)">
            <summary>Closes a server-side cursor previously created using Open.</summary>
            <param name="ACursor">The cursor to close.</param>
            <remarks>
            This call is equivalent to closing the cursor and then unpreparing the 
            expression used to retrieve the cursor.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.PrepareScript(System.String)">
            <summary>Prepares the given script for execution.</summary>
            <param name="AScript">The script to be executed.</param>
            <returns>An <see cref="T:Alphora.Dataphor.DAE.IServerScript"/> instance for the prepared script.</returns>
            <remarks>
            <c>AScript</c> may contain any number of statements to be executed.
            Each top-level statement in the script is considered a batch, and will
            be compiled and executed in isolation, in the order given in the script.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.ExecuteScript(System.String)">
            <summary>Executes the given script as a whole.</summary>
            <param name="AScript">The script to be execute.</param>
            <remarks>
            <para>
            <c>AScript</c> may contain any number of statements to be executed.
            Each top-level statement in the script is considered a batch, and will
            be compiled and executed in isolation, in the order given in the script.
            </para>
            <para>
            This call is equivalent to preparing the script, executing the resulting prepared
            script, and unpreparing the script.
            </para>
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.UnprepareScript(Alphora.Dataphor.DAE.IServerScript)">
            <summary>Unprepares an <see cref="T:Alphora.Dataphor.DAE.IServerScript"/> previously prepared with a call to <c>PrepareScript</c></summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerProcess.DataTypes">
            <summary>A list of system data types.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.CreateType(Alphora.Dataphor.DAE.Language.D4.ClassDefinition)">
            <summary>Creates the System.Type type descriptor for the given class definition.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.CreateObject(Alphora.Dataphor.DAE.Language.D4.ClassDefinition,System.Object[])">
            <summary>Creates an object based on the given class definition.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerProcess.ValueManager">
            <nodoc/>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerProcess.GetServerProcess">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerScriptBase">
            <summary> Interface of common members between <see cref="T:Alphora.Dataphor.DAE.IServerScript"/> and <see cref="!:IRemoteServerScript"/>. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerBatches">
            <summary> Exposes the representation of a list of IServerBatch instances. </summary>
            <remarks> IServerBatches is used by <see cref="T:Alphora.Dataphor.DAE.IServerScript"/> to represent it's batch list. </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerScript">
            <summary> A server script interface. </summary>
            <remarks>
            Scripts are made up of a list of parsed, but not compiled, batches.  The
            script can be executed as a whole, or each batch can be enumerated and
            executed independently.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerScript.Process">
            <summary> The IServerProcess from which this script was prepared. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerScript.Execute(Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary> Executes the IServerScript as a whole.</summary>
            <remarks> Use <see cref="!:IServerScriptBase.Batches"/> to execute or enumerate batches independently. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerScript.Messages">
            <summary> Provides access to the exceptions encountered when parsing this script, if any. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerScript.Batches">
            <summary> A list of batches within this script. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerBatchBase">
            <summary> The members which are common between <see cref="T:Alphora.Dataphor.DAE.IServerBatch"/> and <see cref="!:IRemoteServerBatch"/>. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerBatchBase.IsExpression">
            <summary> Returns true if the batch is a select statement. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerBatchBase.GetText">
            <summary> Retrieves the statement or expression emitted as text (from the parse tree). </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerBatchBase.Line">
            <summary> Indicates which line of the script the batch starts on. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerBatch">
            <summary> An individual batch within a script. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerBatch.ServerScript">
            <summary> The <see cref="T:Alphora.Dataphor.DAE.IServerScript"/> that this batch is part of. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerBatch.Prepare(Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary> Prepares this batch as an expression or statement appropriately. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerBatch.Unprepare(Alphora.Dataphor.DAE.IServerPlan)">
            <summary> Unprepares the batch. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerBatch.PrepareExpression(Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary> Prepares an expression plan from the batch. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerBatch.UnprepareExpression(Alphora.Dataphor.DAE.IServerExpressionPlan)">
            <summary> Unprepares an expression plan, previously prepared with <see cref="M:Alphora.Dataphor.DAE.IServerBatch.PrepareExpression(Alphora.Dataphor.DAE.Runtime.DataParams)"/>. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerBatch.PrepareStatement(Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary> Prepares a statement plan from the batch. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerBatch.UnprepareStatement(Alphora.Dataphor.DAE.IServerStatementPlan)">
            <summary> Unprepares a statement plan, previously prepared with <see cref="M:Alphora.Dataphor.DAE.IServerBatch.PrepareStatement(Alphora.Dataphor.DAE.Runtime.DataParams)"/>. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerBatch.Execute(Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary> Executes the batch. </summary>
            <remarks> Use this if you aren't concerned with the plan, or with retrieving results from an expression. </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.PlanStatistics.PrepareTime">
            <summary>Returns the total prepare time for the plan.</summary>
            <remarks>PrepareTime is the total of CompileTime, OptimizeTime, and BindingTime, plus any incidental overhead between these phases.</remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.PlanStatistics.CompileTime">
            <summary>Returns the compile time for the plan.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.PlanStatistics.OptimizeTime">
            <summary>Returns the optimize time for the plan.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.PlanStatistics.BindingTime">
            <summary>Returns the bind time for the plan. (Binding time is no longer used, all time is reported to the OptimizeTime statistic)</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.ProgramStatistics.ExecuteTime">
            <summary>Returns the total execution time for the program.</summary>
            <remarks>
            Execution time is the total time spent executing on this program. 
            This includes all calls made through this program, or cursors based on the program.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.ProgramStatistics.DeviceExecuteTime">
            <summary>Returns the amount of time spent executing in devices.</summary>
            <remarks>
            This statistic tracks the total amount of time spent waiting for execution on other systems, 
            as opposed to time spent within the Dataphor query processor.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerPlanBase">
            <summary> Exposes the base functionality for a plan in the CLI. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerPlanBase.ID">
            <summary> Returns a globally unique identifier for this plan. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerPlanBase.CheckCompiled">
            <summary> Ensures that this plan was successfully compiled.  Raises an error containing the messages encountered by the compiler, if any. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerPlanBase.PlanStatistics">
            <summary> Returns statistics about plan preparation times. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerPlanBase.ProgramStatistics">
            <summary> Returns statistics about plan execution times. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerPlan">
            <summary> Prepared and compiled execution plan. </summary>
            <seealso cref="T:Alphora.Dataphor.DAE.IServerStatementPlan"/> <seealso cref="T:Alphora.Dataphor.DAE.IServerExpressionPlan"/>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerPlan.Process">
            <value> Returns the <see cref="T:Alphora.Dataphor.DAE.IServerSession"/> instance for this plan. </value>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerPlan.Messages">
            <value> Returns the list of compiler messages encountered while preparing this plan. </value>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerStatementPlan">
            <summary> Prepared statement execution plan. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerStatementPlan.Execute(Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary> Executes the prepared statement this plan represents. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IProposable">
            <summary> Interface for proposing changes to and performing validation on a row. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IProposable.Default(Alphora.Dataphor.DAE.Runtime.Data.IRow,System.String)">
            <summary>Requests the default values for a new row in the cursor.</summary>        
            <param name='ARow'>A <see cref="T:Alphora.Dataphor.DAE.Runtime.Data.Row"/> to be filled in with default values.</param>
            <param name='AColumnName'>The name of the column to default in <paramref name="ABuffer"/>.  If empty, the default is being requested for the full row.</param>
            <returns>A boolean value indicating whether any column was defaulted in <paramref name="ARow"/>.</returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IProposable.Validate(Alphora.Dataphor.DAE.Runtime.Data.IRow,Alphora.Dataphor.DAE.Runtime.Data.IRow,System.String)">
            <summary>Ensures that the given row is valid.</summary>
            <param name='AOldRow'>A <see cref="T:Alphora.Dataphor.DAE.Runtime.Data.Row"/> containing the values of the row before the change. May be null if this is a table-level validate.</param>
            <param name='ANewRow'>A <see cref="T:Alphora.Dataphor.DAE.Runtime.Data.Row"/> containing the changed values.</param>
            <param name='AColumnName'>The name of the column which changed in <paramref name="ANewRow"/>.  If empty, the change affected more than one column.</param>
            <returns>A boolean value indicating whether any column was changed in <paramref name="ANewRow"/>.</returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IProposable.Change(Alphora.Dataphor.DAE.Runtime.Data.IRow,Alphora.Dataphor.DAE.Runtime.Data.IRow,System.String)">
            <summary>Requests the affect of a change to the given row.</summary>
            <param name='AOldRow'>A <see cref="T:Alphora.Dataphor.DAE.Runtime.Data.Row"/> containing the values of the row before the change.</param>
            <param name='ANewRow'>A <see cref="T:Alphora.Dataphor.DAE.Runtime.Data.Row"/> containing the changed row.</param>
            <param name='AColumnName'>The name of the column which changed in <paramref name="ANewRow"/>.  If empty, the change affected more than one column.</param>
            <returns>A boolean value indicating whether any column was changed in <paramref name="ANewRow"/>.</returns>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerExpressionPlan">
            <summary> An expression plan interface. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerExpressionPlan.Evaluate(Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary> Evaluates the expression and returns the result. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerExpressionPlan.Open(Alphora.Dataphor.DAE.Runtime.DataParams)">
            <summary> Opens a server-side cursor based on the prepared statement this plan represents. </summary>        
            <returns> An <see cref="T:Alphora.Dataphor.DAE.IServerCursor"/> instance for the prepared statement. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerExpressionPlan.Close(Alphora.Dataphor.DAE.IServerCursor)">
            <summary> Closes a server-side cursor previously created using Open. </summary>
            <param name="ACursor"> The cursor to close. </param>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerExpressionPlan.Catalog">
            <value> Returns the supporting <see cref="P:Alphora.Dataphor.DAE.IServerExpressionPlan.Catalog"/> for the result type. </value>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerExpressionPlan.DataType">
            <value> Returns the <see cref="P:Alphora.Dataphor.DAE.IServerExpressionPlan.DataType"/> of the compiled expression. </value>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerExpressionPlan.TableVar">
            <value> Returns the <see cref="P:Alphora.Dataphor.DAE.IServerExpressionPlan.TableVar"/> describing the result of the expression. </value>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerExpressionPlan.Order">
            <summary> Returns the order of the result of the expression. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerExpressionPlan.EmitStatement">
            <summary> Returns a fully resolved syntax tree for the expression. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerExpressionPlan.RequestRow">
            <summary> Returns a row for use in selecting from the cursor for this plan. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerExpressionPlan.ReleaseRow(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary> Releases a row previously requested with RequestRow. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorCapability.Navigable">
            <summary>
            Indicates that the cursor supports basic navigational access.
            </summary>
            <remarks>
            All cursors support this basic level of access.
            The following methods are included in the Navigable cursor capability:
            	Select
            	Next
            	Last
            	BOF
            	EOF
            	IsEmpty
            	Reset
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorCapability.BackwardsNavigable">
            <summary>
            Indicates that the cursor supports backwards navigation.
            </summary> 
            <remarks>
            The following methods are included in the BackwardsNavigable cursor capability:
            	Prior
            	First
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorCapability.Bookmarkable">
            <summary>
            Indicates that the cursor supports bookmarks.
            </summary>
            <remarks>
            The following methods are included in the Bookmarkable cursor capability:
            	GetBookmark
            	GotoBookmark
            	CompareBookmarks
            	DisposeBookmark
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorCapability.Searchable">
            <summary>
            Indicates that the cursor supports searching.
            </summary>
            <remarks>
            The following methods are included in the Searchable cursor capability:
            	Order
            	GetKey
            	FindKey
            	FindNearest
            	Refresh
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorCapability.Updateable">
            <summary> Indicates that the cursor is updateable. </summary>
            <remarks>
            The following methods are included in the Updateable cursor capability:
            	Insert
            	Update
            	Delete
            	Default
            	Change
            	Validate
            </remarks> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorCapability.Truncateable">
            <summary> Indicates that the cursor supports truncation. </summary>
            <remarks>
            The following methods are included in the Truncateable cursor capability:
            	Truncate
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorCapability.Countable">
            <summary> Indicates that the cursor supports row count. </summary>
            <remarks>
            The following methods are included in the Countable cursor capability:
            	RowCount
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorType.Static">
            <summary> Indicates that the cursor is insensitive to updates made 
            to the result set after the cursor has been opened. </summary>
            <remarks>
            In a static cursor, updates made to rows in the result set, either 
            by the user of the cursor, or updates that become visible based on 
            the isolation level of the cursor from other transactions, are not 
            visible.  The result set is fully materialized on open, and no 
            changes are made to this set.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorType.Dynamic">
            <summary> Indicates that the cursor is sensitive to updates made 
            to rows in the result set after the cursor has been opened. </summary>
            <remarks>
            In a dynamic cursor, updates made to rows in the result set, either 
            by the user of the cursor, or from other transactions that become 
            visible based on the isolation level of the cursor, are visible 
            through the cursor. The result set is dynamically queried for as 
            it is requested.  Note that this is not a guarantee that updates made
            by other transactions will be visible, only that the system is not 
            required to exclude them.  Depending on how the query is processed, 
            and how the devices performing the processing manipulate the rows 
            in the result set, external updates may or may not be visible.  
            However, a dynamic cursor does guarantee that updates made through 
            the cursor are visible.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.CursorIsolation">
            <summary>Enumerates the set of cursor isolation levels provided by the Dataphor Server.</summary>
            <remarks>
            The isolation level of a cursor allows the cursor to control how concurrency control is implemented
            within the cursor. This control is still subject to the isolation level of the transaction in which
            the cursor is running.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorIsolation.None">
            <summary> Indicates that the cursor runs at the isolation level of the current transaction. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorIsolation.Chaos">
            <summary> This cursor isolation level is deprecated and should not be used. When encountered, this isolation level is equivalent to Browse. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorIsolation.Browse">
            <summary> Browse cursor isolation indicates that the cursor should use optimistic concurrency control </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorIsolation.CursorStability">
            <summary> This cursor isolation level is deprecated and should not be used. When encountered, this isolation level is equivalent to Isolated. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.CursorIsolation.Isolated">
            <summary> Isolated cursor isolation indicates that the cursor should use pessimistic concurrency control </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerCursorBehavior.Capabilities">
            <summary> Retrieves the capabilities of the cursor. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerCursorBehavior.CursorType">
            <summary> Retrieves the type of the cursor. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursorBehavior.Supports(Alphora.Dataphor.DAE.CursorCapability)">
            <summary> Allows for querying the cursor's capabilities. </summary>
            <param name="ACapability"> A capability to query for. </param>
            <returns> True if the cursor supports the specified capability, false otherwise. </returns>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerCursorBehavior.Isolation">
            <summary> Retrieves the cursor's isolation. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerCursorBase">
            <summary> Represents a cursor. </summary>
            <seealso cref="T:Alphora.Dataphor.DAE.IServerCursor"/> <seealso cref="!:IRemoteServerCursor"/>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursorBase.Open">
            <summary> Opens the cursor. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursorBase.Close">
            <summary> Closes the cursor. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerCursorBase.Active">
            <summary> Gets or sets whether the cursor is currently open (Active). </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.IServerCursor">
            <summary> Local server "cracked" cursor interface. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerCursor.Plan">
            <value> Returns the <see cref="T:Alphora.Dataphor.DAE.IServerExpressionPlan"/> instance for this cursor. </value>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Reset">
            <summary> Requeries for the result of the cursor, leaving the cursor on the BOF "crack". </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Next">
            <summary> Navigates to the next data row, or off of the BOF "crack" onto the first row. </summary>
            <returns> True if the cursor is positioned on a row, false otherwise. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Last">
            <summary> Navigates to the EOF crack in the cursor. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.BOF">
            <summary> Determines whether the cursor is situated on the BOF "crack". </summary>
            <remarks>
            This will always be true when the cursor is first opened (or reset).
            Data cannot be retrieved while the cursor is positioned on a crack (BOF or EOF).
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.EOF">
            <summary> Determines whether the cursor is situated on the EOF "crack". </summary>
            <remarks>
            This will be true when the cursor is moved past the last data row (or last is called).
            Data cannot be retrieved while the cursor is positioned on a crack (BOF or EOF).
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.IsEmpty">
            <summary> Returns true if the cursor has no rows. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Select">
            <summary> Retrieves the current row from the cursor. </summary>
            <remarks>
            If the cursor is located on a "crack" (EOF or BOF), this method will throw an exception.
            Use this overload if you do not have a prepared row to select the data into.
            </remarks>
            <returns> A newly constructed <see cref="T:Alphora.Dataphor.DAE.Runtime.Data.Row"/> containing the data for the current row of the cursor. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Select(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary> Selects the values from the current row of the cursor into an existing <see cref="T:Alphora.Dataphor.DAE.Runtime.Data.Row"/>. </summary>
            <remarks>
            <para>
            If the cursor is located on a "crack" (EOF or BOF), this method will throw an exception.
            </para>
            <para>Use this overload if you already have a prepared row to select the data 
            into. This is preferable if you are selecting multiple rows from the cursor.</para>
            </remarks>
            <param name="ARow"> The prepared <see cref="T:Alphora.Dataphor.DAE.Runtime.Data.Row"/> to retrieve the data values into. </param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.First">
            <summary> Situates the cursor on the BOF "crack". </summary>
            <remarks> The cursor must be BackwardsNavigable. </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Prior">
            <summary> Navigates the cursor to the prior row or to the BOF "crack". </summary>
            <remarks> The cursor must be BackwardsNavigable. </remarks>
            <returns> False if after the navigation, the cursor is situated on the BOF "crack". </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.GetBookmark">
            <summary> Retrieves a bookmark representing the current location of the cursor. </summary>
            <remarks> The cursor must be Bookmarkable. </remarks>
            <returns>
            A Guid that may be used as a handle in subsequent bookmarkable calls.  
            A bookmark requested using this method must be released by calling <see cref="M:Alphora.Dataphor.DAE.IServerCursor.DisposeBookmark(System.Guid)"/>.
            </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.GotoBookmark(System.Guid,System.Boolean)">
            <summary> Situates the cursor on the row corresponding to the given bookmark. </summary>
            <remarks> The cursor must be Bookmarkable. </remarks>
            <param name="AForward"> Hint regarding the intended navigation following positioning. </param>
            <returns> True if the cursor was successfully situated on the bookmark. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.CompareBookmarks(System.Guid,System.Guid)">
            <summary> Returns a comparison of bookmark values. </summary>
            <remarks> The cursor must be Bookmarkable. </remarks>
            <returns>
            -1 if ABookmark1 is less than ABookmark2.
            0 if ABookmark1 is equal to ABookmark2.
            1 if ABookmark1 is greater than ABookmark2.
             </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.DisposeBookmark(System.Guid)">
            <summary> Disposes a bookmark previously allocated with <see cref="M:Alphora.Dataphor.DAE.IServerCursor.GetBookmark"/>. </summary>
            <remarks> This method has no effect if the bookmark does not exist, or has already been disposed. </remarks>
            <seealso cref="M:Alphora.Dataphor.DAE.IServerCursor.DisposeBookmarks(System.Guid[])"/>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.DisposeBookmarks(System.Guid[])">
            <summary> Disposes a list of bookmarks. </summary>
            <remarks> This call has no effect if the bookmarks do not exist, or have already been disposed. </remarks>
            <seealso cref="M:Alphora.Dataphor.DAE.IServerCursor.DisposeBookmark(System.Guid)"/>
        </member>
        <member name="P:Alphora.Dataphor.DAE.IServerCursor.Order">
            <summary> Represents the currently selected order of the cursor. </summary>
            <remarks> The cursor must be Searchable. </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.GetKey">
            <summary> Retrieves the key value for the current position of the cursor. </summary>
            <remarks> The cursor must be Searchable. </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.FindKey(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary> Situates the cursor on the row identified by the specified key value. </summary>
            <remarks> The cursor must be Searchable. </remarks>
            <returns> True if the key was successfully located. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.FindNearest(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary> Situates the cursor on the nearest row to the specified key value. </summary>
            <remarks> The cursor must be Searchable. </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Refresh(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary> Performs a refresh operation combined with a <see cref="M:Alphora.Dataphor.DAE.IServerCursor.FindKey(Alphora.Dataphor.DAE.Runtime.Data.IRow)"/>. </summary>
            <remarks> The cursor must be Searchable. </remarks>
            <returns> True if the cursor is positioned on the given row, false otherwise. </returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Insert(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary> Inserts a new row of data into the cursor. </summary>
            <remarks>
            	<para>
            	The cursor must support Updateable to perform this operation.
                </para>
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Insert(Alphora.Dataphor.DAE.Runtime.Data.IRow,System.Collections.BitArray)">
            <summary> Inserts the given row into the cursor. </summary>
            <remarks>
            	Value flags, if specified, indicates which columns of the row have values set.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Update(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary> Updates the row where the cursor is currently situated. </summary>
            <remarks>
            	<para>
            	The cursor must not be on the EOF or BOF "crack" or an exception will be thrown.
            	The cursor must support Updateable to perform this operation.
            	</para>
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Update(Alphora.Dataphor.DAE.Runtime.Data.IRow,System.Collections.BitArray)">
            <summary> Updates the current row of the cursor with the given values. </summary>
            <remarks>
            	Value flags, if specified, indicates which columns of the row are being changed.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.Delete">
            <summary> Deletes the row where the cursor is currently situated. </summary>
            <remarks>
            	<para>
            	The cursor must not be on the EOF or BOF "crack" or an exception will be thrown.
            	The cursor must support Updateable to perform this operation.
            	</para>
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.IServerCursor.RowCount">
            <summary> Returns an integer value indicating the number of rows in the cursor. </summary>
            <remarks> The cursor must support Countable. </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Connection.ConnectionException">
            <summary>The base exception class for all exceptions thrown by the Connection classes. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.TransactionInProgress">
            <summary>Error code 127100: "There is already a transaction in progress for this connection."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.NoTransactionInProgress">
            <summary>Error code 127101: "There is no transaction in progress for this connection."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.DeferredOverflow">
            <summary>Error code 127102: "Deferred read overflow."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.NonDeferredDataType">
            <summary>Error code 127103: "Source data type "{0}" does not support deferred reading."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.UnknownSQLDataType">
            <summary>Error code 127104: "Unknown SQL data type class "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.SQLException">
            <summary>Error code 127105: "Exceptions occurred while executing SQL command."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.UnableToConvertDeferredStreamValue">
            <summary>Error code 127106: "Unable to convert deferred stream value."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.ConnectionBusy">
            <summary>Error code 127107: "Connection is busy."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.OutputParametersNotSupported">
            <summary>Error code 127108: "Connectivity implementation does not support output parameters."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.UnsupportedUpdateableCall">
            <summary>Error code 127109: "Unsupported updateable call."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.UnsupportedSearchableCall">
            <summary>Error code 127110: "Unsupported searchable call."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.StringParameterOverflow">
            <summary>Error code 127120: "String value exceeds length ({1}) of parameter "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.ConnectionClosed">
            <summary>Error code 127121: "Connection is closed."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.UnableToOpenCursor">
            <summary>Error code 127122: "Unable to open cursor."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.ProviderFactoryAlreadyConstructed">
            <summary>Error code 127123: "Provider invariant name cannot be set for this connection because the provider factory has already been constructed."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.ConnectionException.Codes.ProviderInvariantNameRequired">
            <summary>Error code 127124: "Provider invariant name must be specified for the generic connection."</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Connection.SQLCommand.CommandTimeout">
            <summary>The amount of time to wait before timing out when waiting for a command to execute, expressed in seconds.</summary>
            <remarks>The default value for this property is 30 seconds. A value of 0 indicates an infinite timeout.</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Connection.SQLCommand.PrepareStatement(System.String)">
            <summary> Normalize whitespace, determine the parameter indexes, and change parameter formats/names as necessary. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Connection.SQLCommand.ConvertParameterName(System.String)">
            <summary> Allows descendant commands to change the parameter names used in statements. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Connection.SQLConnection.DefaultCommandTimeout">
            <summary>The amount of time to wait before timing out when waiting for a command to execute, expressed in seconds.</summary>
            <remarks>The default value for this property is 30 seconds. A value of 0 indicates an infinite timeout.</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Connection.SQLConnection.IsTransactionFailure(System.Exception)">
            <summary>Indicates whether the given exception indicates a transaction failure such as a deadlock or rollback on the target system.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Connection.SQLConnection.IsConnectionValid">
            <summary>Indicates whether or not this connection is still valid.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Connection.SQLConnection.TransactionFailure">
            <summary>Indicates that the currently active transaction has been rolled back by the target system due to a deadlock, or connection failure.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Connection.SQLFloatType.Width">
            <summary>
            Specifies whether the floating point value is single-precision (1) or double-precision (2).
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Connection.SQLUtility.ProcessBatches(System.String,System.String)">
            <summary>Returns the set of batches in the given script, delimited by the given terminator.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Debug.Debugger">
            <summary>
            Implements a Debugger for use in debugging D4 processes.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.Stop">
            <summary>
            Stops the debugger
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.Attach(Alphora.Dataphor.DAE.Server.ServerProcess)">
            <summary>
            Attaches the debugger to a process
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.Detach(Alphora.Dataphor.DAE.Server.ServerProcess)">
            <summary>
            Detaches the debugger from a process.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.AttachSession(Alphora.Dataphor.DAE.Server.ServerSession)">
            <summary>
            Attaches the debugger to a session.
            </summary>
            <remarks>
            When the debugger is attached to a session, all running processes on that session
            are attached to the debugger. In addition, any processes subsequently started
            on that session are automatically attached to the debugger.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.GetRunningCount">
            <summary>
            Returns the number of attached processes that are currently running.
            </summary>
            <remarks>
            This method assumes the sync handle has already been acquired by the calling thread.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.WaitForPause(Alphora.Dataphor.DAE.Runtime.Program,Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode)">
            <summary>
            Waits for the debugger to pause
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.Pause">
            <summary>
            Initiates a pause.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.Run">
            <summary>
            Runs all processes.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.Pulse">
            <summary>
            Pulses the debugger to allow paused processes to check for abort due to a terminate request coming from the server.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.GetSessions">
            <summary>
            Returns the list of currently debugged sessions.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.GetProcesses">
            <summary>
            Returns the list of current debugged processes, with the running status and current location of each.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.GetCallStack(System.Int32)">
            <summary>
            Returns the current call stack of a process.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.GetStack(System.Int32,System.Int32)">
            <summary>
            Returns the current stack of a process within a specific window.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.ToggleBreakpoint(System.String,System.Int32,System.Int32)">
            <summary>
            Toggles a breakpoint, returning true if the breakpoint was set, and false if it was cleared.
            </summary>
            <param name="locator">A locator identifying the document or operator in which the breakpoint is set.</param>
            <param name="line">The line on which the breakpoint is set.</param>
            <param name="linePos">The line position, -1 for no line position.</param>
            <returns>True if the breakpoint was set, false if it was cleared.</returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.Debugger.Yield(Alphora.Dataphor.DAE.Server.ServerProcess,Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode)">
            <summary>
            Yields the current program to the debugger if a breakpoint or break condition is satisfied.
            </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Debug.DebugLocator">
            <summary>
            Represents a debug locator used to specify the originating location for the source text of a compiled plan.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.DebugLocator.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a new DebugLocator instance.
            </summary>
            <param name="locator">The locator reference.</param>
            <param name="line">The line number (1-based) at which the locator begins.</param>
            <param name="linePos">The character position (1-based) at which the locator begins.</param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.DebugLocator.#ctor(Alphora.Dataphor.DAE.Debug.DebugLocator,System.Int32,System.Int32)">
            <summary>
            Constructs a new DebugLocator based on a source locator and current line information.
            </summary>
            <param name="locator">The source locator.</param>
            <param name="line">The current line number (1-based)</param>
            <param name="linePos">The current line position (1-based)</param>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Debug.DebugLocator.Locator">
            <summary>
            Gets the locator reference for this instance.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Debug.DebugLocator.Line">
            <summary>
            Gets the line number (1-based) at which the locator begins.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Debug.DebugLocator.LinePos">
            <summary>
            Gets the character position (1-based) at which the locator begins.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.DebugLocator.ToString">
            <summary>
            Returns a string representation of the locator.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.DebugLocator.Parse(System.String)">
            <summary>
            Parses the given string and returns a debug locator instance.
            </summary>
            <remarks>
            If the string is not a valid encoding of a debug locator, an ArgumentException is thrown.</remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Debug.DebugLocator.ProgramLocatorPrefix">
            <summary>
            Program locator string used to indicate that a locator is a reference to dynamic or ad-hoc execution
            </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Debug.DebugLocator.OperatorLocatorPrefix">
            <summary>
            Operator locator string used to indicate that a locator is a reference to an operator created by a dynamic or ad-hoc execution
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.DebugLocator.IsProgramLocator(System.String)">
            <summary>
            Returns true if the locator is a program locator
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.DebugLocator.GetProgramID(System.String)">
            <summary>
            Returns the program id encoded in the given program locator.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.DebugLocator.OperatorLocator(System.String)">
            <summary>
            Constructs an operator locator string based on an operator specifier.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.DebugLocator.IsOperatorLocator(System.String)">
            <summary>
            Returns true if the locator is an operator locator
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.DebugLocator.GetOperatorSpecifier(System.String)">
            <summary>
            Returns the operator specifier encoded in the given operator locator.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.DebugLocator.Equals(System.Object)">
            <summary>
            Dynamic debug locator used as the locator for all dynamic execution.
            </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Debug.SourceContext">
            <summary>
            Represents a compile-time source context, i.e. the script currently being compiled.
            </summary>
            <remarks>
            Note that the script may be a subset of the overall script identified by the
            locator. Line and LinePos are the offset in the locator at which AScript starts.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Debug.SourceContext.Locator">
            <summary>
            Provides a locator that is used to determine the location for the given script. May be null.
            </summary>
            <remarks>
            If the locator is not specified, the source context is used to allow debugging
            of dynamic or ad-hoc scripts.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Debug.SourceUtility.CopySection(System.String,Alphora.Dataphor.DAE.Language.LineInfo)">
            <summary>
            Copies a delimited section out of a given script.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionUtility.GetTransaction(Alphora.Dataphor.DAE.Server.ServerProcess,System.Guid)">
            <summary>Gets the application transaction and acquires a lock on it. The caller is responsible for releasing the lock.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Device.ApplicationTransaction.BeginApplicationTransactionNode">
            <remarks>
            operator BeginApplicationTransaction() : Guid;
            operator BeginApplicationTransaction(const AShouldJoin : Boolean, const AShouldInsert : Boolean) : Guid;
            Initiates an application transaction in the server and returns the ID 
            of that transaction to be used in subsequent application transaction calls.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Device.ApplicationTransaction.JoinApplicationTransactionNode">
            <remarks>
            operator JoinApplicationTransaction(AID : Guid, AIsInsert : Boolean);
            Joins this process to the given application transaction.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Device.ApplicationTransaction.LeaveApplicationTransactionNode">
            <remarks>
            operator LeaveApplicationTransaction(): String;
            Leaves the application transaction this process is participating in.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Device.ApplicationTransaction.CommitApplicationTransactionNode">
            <remarks>
            operator CommitApplicationTransaction(AID : Guid);
            Accepts all the changes made during the application transaction.
            Once an application transaction has been successfully committed, it is an error to attempt any further manipulations in the transaction.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Device.ApplicationTransaction.RollbackApplicationTransactionNode">
            <remarks>
            operator RollbackApplicationTransaction(AID : Guid);
            Rejects all the changes made during the application transaction.
            Once an application transaction has been successfully rolled back, it is an error to attempt any further manipulations in the transaction.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.ApplicationTransaction.OperatorMap.ResolveTranslatedOperator(Alphora.Dataphor.DAE.Schema.Operator)">
            <summary>Returns the translated operator for the given source operator, if it exists. Null otherwise.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransaction.ID">
            <summary>The unique identifier for this application transaction.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransaction.Session">
            <summary>The server session managing this application transaction.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransaction.Device">
            <summary>The application transaction device for the server.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransaction.Tables">
            <summary>The storage tables for the table variables within the application transaction.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransaction.InATReplayContext">
            <summary>Indicates whether this device is replaying an application transaction.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransaction.IsGlobalContext">
            <summary>Indicates whether or not the A/T is currently in a global context, preventing enlistment and resolution of A/T objects.</summary>
            <remarks>
            A global context is used to indicate that the process or plan is currently in a context in which no resolution
            should result in a resolve of an A/T object, or enlistment of an existing object into the A/T. Global context 
            is checked when:
               - Resolving a catalog identifier in an A/T, it prevents resolution of the identifier to the A/T variable
               - Determining whether to enlist a non-A/T resolved catalog object, it prevents the enlistment
               - Resolving an operator invocation in an A/T, it prevents resolution of the invocation to the A/T operator
               - Determining whether to enlist a non-A/T resolved operator, it prevents the enlistment
               - Compiling an A/T populate node, it prevents the creation of the node
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransaction.PushGlobalContext">
            <summary>Pushes a global context to prevent resolution and enlistment into this A/T.</summary>
            <remarks>
            A global context is used to indicate that the process or plan is currently in a context in which no resolution
            should result in a resolve of an A/T object, or enlistment of an existing object into the A/T. Global context 
            pushed when:
               - compiling a source populate node to prevent resolution of identifiers to the A/T variables
               - Preparing an A/T to ensure that no new enlistment into the A/T occurs during the prepare phase
               - Rolling back an A/T, to ensure that no new enlistment into the A/T occurs during the rollback
               - Compiling table map retrieve nodes to prevent recursion into the enlistment process
               - Loading a non-A/T object from the catalog while in an A/T, to prevent A/T enlistment
               - Compiling table var keys, orders, and constraints, to prevent A/T enlistment
               - Reinferring view references for a non-A/T view while in an A/T, to prevent A/T enlistment
               - Recompiling a non-A/T operator while in an A/T, to prevent A/T enlistment
               - Ensuring a given node is searchable, to prevent recreation of an existing populate node
               - Compiling a browse variant, to prevent A/T enlistment
               - Determining capabilities for a cursor node, to prevent recreation of an existing populate node
               - Invoking an operator that should not translate into an A/T, to prevent A/T enlistment
               - Binding an A/T populate node, to prevent A/T enlistment and recursion
               - Compiling the select node for a table node, to prevent A/T enlistment
               - Binding the source node for an insert statement, it prevents creation of the populate node
               - Ensuring the source node for an update or delete statement is static, it prevents duplication of the populate node
               - Compiling the JoinATNode used to insert data during A/T population, to prevent A/T enlistment
               - Accessing or maintaining a check table for constraint checks, to prevent A/T enlistment and resolution
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransaction.IsLookup">
            <summary>Indicates whether or not we are currently in a lookup context and should not resolve or enlist A/T variables.</summary>
            <remarks>
            A lookup context is entered when compiling the right side of a left lookup, and is used to prevent the compiler from entering
            an A/T on a table that is not going to be modified by the current A/T.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionException.Codes.InvalidApplicationTransactionID">
            <summary>Error Code 125100: "Invalid application transaction id "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionException.Codes.UnknownOperation">
            <summary>Error Code 125101: "Unknown application transaction operation type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionException.Codes.TableMapContainer">
            <summary>Error Code 125102: "TableMap container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionException.Codes.TableMapNotFound">
            <summary>Error Code 125103: "TableMap not found for table "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionException.Codes.SourceAlreadyPopulating">
            <summary>Error Code 125104: "Application transaction id "{0}" is already being populated."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionException.Codes.ApplicationTransactionClosed">
            <summary>Error Code 125105: "Application transaction id "{0}" has been closed and cannot be further manipulated."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionException.Codes.ProcessAlreadyParticipating">
            <summary>Error Code 125106: "This process is already participating in an application transaction."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionException.Codes.ProcessNotParticipating">
            <summary>Error Code 125107: "This process not participating in an application transaction."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionException.Codes.AlreadyApplicationTransactionVariable">
            <summary>Error Code 125108: "Table variable "{0}" is already an application transaction table variable for table variable "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionException.Codes.TableVariableParticipating">
            <summary>Error Code 125109: "Table variable "{0}" is participating in at least one application transaction and cannot be altered or dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.ApplicationTransaction.ApplicationTransactionException.Codes.OperatorParticipating">
            <summary>Error Code 125110: "Operator "{0}" is participating in at least one application transaction and cannot be altered or dropped."</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.ResolveName(System.String,Alphora.Dataphor.DAE.Schema.NameResolutionPath,System.Collections.Generic.List{System.String})">
            <summary>Resolves the given name and returns the catalog object, if an unambiguous match is found. Otherwise, returns null.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.ResolveOperatorName(System.String)">
            <summary>Ensures that any potential match with the given operator name is in the cache so that operator resolution can occur.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.ResolveCatalogObject(System.Int32)">
            <summary>Resolves the catalog object with the given id. If the object is not found, an error is raised.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.ResolveCachedCatalogObject(System.Int32)">
            <summary>Returns the cached object for the given object id, if it exists and is in the cache, null otherwise.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.ResolveCachedCatalogObject(System.Int32,System.Boolean)">
            <summary>Returns the cached object for the given object id, if it exists and is in the cache. An error is thrown if the object is not in the cache and AMustResolve is true, otherwise null is returned.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.ResolveCachedCatalogObject(System.String)">
            <summary>Returns the cached object with the given name, if it exists and is in the cache, null otherwise.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.ResolveCachedCatalogObject(System.String,System.Boolean)">
            <summary>Returns the cached object with the given name, if it exists and is in the cache. An error is thrown if the object is not in the cache and AMustResolve is true, otherwise null is returned.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.CacheCatalogObject(Alphora.Dataphor.DAE.Schema.CatalogObject)">
            <summary>Adds the given object to the catalog cache.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.ClearCatalogObject(Alphora.Dataphor.DAE.Schema.CatalogObject)">
            <summary>Removes the given object from the catalog cache.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.ShouldSerializeCatalogObject(Alphora.Dataphor.DAE.Schema.CatalogObject)">
            <summary>Returns true if the given object is not an A/T object.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.InsertCatalogObject(Alphora.Dataphor.DAE.Schema.CatalogObject)">
            <summary>Inserts the given object into the catalog cache. If this is not a repository, also inserts the object into the catalog store.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.UpdateCatalogObject(Alphora.Dataphor.DAE.Schema.CatalogObject)">
            <summary>Updates the given object in the catalog cache. If this is not a repository, also updates the object in the catalog store.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.DeleteCatalogObject(Alphora.Dataphor.DAE.Schema.CatalogObject)">
            <summary>Deletes the given object in the catalog cache. If this is not a repository, also deletes the object in the catalog store.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.CacheUser(Alphora.Dataphor.DAE.Schema.User)">
            <summary>Adds the given user to the cache, without affecting the underlying store.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.ClearUser(System.String)">
            <summary>Removes the given user from the cache, without affecting the underlying store.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession.ClearUsers">
            <summary>Clears the users cache, without affecting the underlying store.</summary>		
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogException.Codes.ReadOnlyDevice">
            <summary>Error code 115100: "System catalog does not support ad hoc updates."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogException.Codes.CatalogHeaderNotFound">
            <summary>Error code 115101: "Catalog header not found for table variable "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogException.Codes.UnsupportedUpdate">
            <summary>Error code 115102: "System catalog does not support updates to table "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogException.Codes.SharedCatalogStore">
            <summary>Error code 115103: "Catalog store is shared and cannot be updated."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogException.Codes.CursorHasNoCurrentRow">
            <summary>Error code 115104: "Catalog store cursor has no current row."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogException.Codes.CatalogStoreInitialized">
            <summary>Error code 115105: "Store settings cannot be changed once the catalog store has been initialized."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogException.Codes.CatalogStoreClassNameRequired">
            <summary>Error code 115106: "Catalog store class name required."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogCacheLevel.None">
            <summary> Indicates that the table variable will be completely re-populated on each request. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogCacheLevel.Normal">
            <summary> Indicates that the table variable is populated when necessary by comparing the timestamp stored with the last populate against the catalog timestamp. This is the default cache level. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogCacheLevel.Cached">
            <summary> Indicates that the table variable is a normal table buffer, maintained by standard insert, update, and delete statements through D4. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogCacheLevel.Maintained">
            <summary> Indicates that the table variable is populated when initially requested, and maintained thereafter. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogCacheLevel.StoreTable">
            <summary> Indicates that the table variable is a base table variable in the catalog store. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogCacheLevel.StoreView">
            <summary> Indicates that the table variable is a derived table variable in the catalog store. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.Catalog.CatalogHeader.Cached">
            <summary>Indicates that the table buffer for this header has been populated and should be maintained. Only used for the Maintained catalog cache level. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogStore.Initialize(Alphora.Dataphor.DAE.Server.Engine)">
            <summary>Initializes the catalog store, ensuring the store has been created.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogStoreConnection.SelectUserOperators(System.String)">
            <summary>Returns a list of headers for each operator owned by the given user.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogStoreConnection.HasDeviceObjects(System.Int32)">
            <summary>Returns true if there are any device objects registered for the given device, false otherwise.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogStoreConnection.SelectDeviceObjectID(System.Int32,System.Int32)">
            <summary>Returns the ID of the device object map for the device with ID ADeviceID and object AObjectID, if it exists, -1 otherwise.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogStoreConnection.IsEmpty">
            <summary>Returns true if there are no catalog objects in the catalog. This will only be true on a first-time startup.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogStoreConnection.SnapshotBase">
            <summary>Takes a snapshot of the base system objects. Should only be run once during first-time startup, immediately after the creation of the base system objects.</summary>
            <remarks>
            The base system objects are the minimum set of objects required to establish connection to and begin compiling D4 statements.
            This is the set of objects that are created programmatically by server startup, and are the only objects that will be in 
            a repository-mode server at initial startup. Because of this, they also make up the set up of objects that will always be
            present in any given client-side cache, and are therefore used as the seed for the client-side cache tracking mechanisms in the
            main server (see GatherDefaultCachedObjects).
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogStoreConnection.SelectBaseCatalogObjects">
            <summary>Returns a list of catalog headers for the base system objects.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogStoreConnection.CatalogObjectExists(System.String)">
            <summary>Returns true if an object of the given name is already present in the database.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogStoreConnection.ResolveCatalogObjectName(System.String)">
            <summary>Returns a list of CatalogObjectHeaders that matched the given name.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogStoreConnection.ResolveOperatorName(System.String)">
            <summary>Returns a list of CatalogObjectHeaders for operators whose operator name matched the given name.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.CatalogStoreConnection.SelectOperatorHandlers(System.Int32)">
            <summary>Returns the set of handlers that invoke the given operator</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.NameResolutionCache.Clear">
            <summary> Remove all entries from the cache. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Device.Catalog.NameResolutionCache.Clear(System.String)">
            <summary> Removes entries that could potentially be affected by the given object name. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Device.Memory.MemoryDevice">
            <summary> In-memory storage device. </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.DeviceException.Codes.UnsupportedTranslation">
            <summary>Error code 114100: "Unsupported translation "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.DeviceException.Codes.TransactionInProgress">
            <summary>Error code 114102: "There is already a transaction in progress for this device."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.DeviceException.Codes.NoTransactionInProgress">
            <summary>Error code 114103: "There is no transaction in progress for this device."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.DeviceException.Codes.ExpressionDevice">
            <summary>Error code 114105: "Memory device only supports expressions."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.DeviceException.Codes.RowCouldNotBeLocated">
            <summary>Error code 114106: "Row could not be located."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.DeviceException.Codes.InvalidExecuteRequest">
            <summary>Error code 114110: "Device "{0}" cannot perform requested operation "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.DeviceException.Codes.ConnectionFailure">
            <summary>Error code 114111: "Connection failure with device ""{0}"". All active transactions have been rolled back."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.DeviceException.Codes.TransactionFailure">
            <summary>Error code 114112: "Transaction failure on device ""{0}"". All active transactions have been rolled back."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.DeviceException.Codes.MaxRowCountExceeded">
            <summary>Error code 114113: "Maximum physical row count ({0}) exceeded for table "{1}" in device "{2}"; to enable unlimited rows (with possible performance implications) use: alter device {2} alter class {{ alter "MaxRowCount" = "-1" }};"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Device.DeviceException.Codes.UnpreparedDevicePlan">
            <summary>Error code 114114: "Internal error: Device plan is not prepared for this plan."</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Data.DataValue">
            <remarks>
            Base class for all host representations in the DAE.
            All values have a data type and are associated with some process in the system.
            The host representation is an active wrapper for the native representation of some value.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.DataValue.ValuesOwned">
            <summary>Indicates whether disposal of the value should deallocate any resources associated with the value.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.DataValue.IsNil">
            <summary>Indicates whether or not this value is initialized.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.DataValue.IsNative">
            <summary>Indicates whether this value is stored in its native representation.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.DataValue.AsNative">
            <summary>Gets or sets this value in its native representation.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.DataValue.AsPhysical">
            <summary>Gets or sets this value in its physical representation.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.DataValue.IsPhysicalStreaming">
            <summary>Indicates whether or not the conveyor for values of this type uses streams to read/write.  If this is false, the conveyor will use byte arrays.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.GetPhysicalSize(System.Boolean)">
            <summary>Returns the number of bytes required to store the physical representation of this value.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.WriteToPhysical(System.Byte[],System.Int32,System.Boolean)">
            <summary>Writes the physical representation of this value into the byte array given in ABuffer, beginning at the offset given by offset.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.WriteToPhysical(System.IO.Stream,System.Boolean)">
            <summary>Writes the physical representation of this value into the stream given in AStream.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.ReadFromPhysical(System.Byte[],System.Int32)">
            <summary>Sets the native representation of this value by reading the physical representation from the byte array given in ABuffer, beginning at the offset given by offset.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.ReadFromPhysical(System.IO.Stream)">
            <summary>Sets the native representation of this value by reading the physical representation from the stream given in AStream.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.CopyAs(Alphora.Dataphor.DAE.Schema.IDataType)">
            <summary>Copies the native representation of this value and returns the host representation as the given type.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.FromNative(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Schema.IDataType,System.Object)">
            <summary>Returns the host representation of the given native value.  This is a by-reference operation.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.FromNativeRow(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Schema.IRowType,Alphora.Dataphor.DAE.Runtime.Data.NativeRow,System.Int32)">
            <summary>Returns the host representation of the given native value.  This is a by-reference operation.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.FromNativeList(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Schema.IListType,Alphora.Dataphor.DAE.Runtime.Data.NativeList,System.Int32)">
            <summary>Returns the host representation of the given native value.  This is a by-reference operation.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.FromPhysical(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Schema.IDataType,System.Byte[],System.Int32)">
            <summary>Returns the host representation of the given physical value.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.DisposeNative(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Schema.IDataType,System.Object)">
            <summary>Disposes the given native value.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.DataValue.NativeValuesEqual(Alphora.Dataphor.DAE.Runtime.IValueManager,System.Object,System.Object)">
            <summary>
            Compares two native values directly.
            </summary>
            <remarks>
            The method expects both values to be non-null.
            The method uses direct comparison, it does not attempt to invoke the D4 equality operator for the values.
            Note that this method expects that neither argument is null.
            </remarks>
            <returns>True if the values are equal, false otherwise.</returns>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.IndexException.Codes.UnableToCompareKeys">
            <summary>Error code 117100: "Internal Index Error: Unable to compare keys."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.IndexException.Codes.UnableToCopyKey">
            <summary>Error code 117101: "Internal Index Error: "Unable to copy key."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.IndexException.Codes.UnableToCopyData">
            <summary>Error code 117102: "Internal Index Error: "Unable to copy data."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.IndexException.Codes.UnableToDisposeKey">
            <summary>Error code 117103: "Internal Index Error: "Unable to dispose key."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.IndexException.Codes.UnableToDisposeData">
            <summary>Error code 117104: "Internal Index Error: "Unable to dispose data."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.IndexException.Codes.DuplicateKey">
            <summary>Error code 117105: "Internal Index Error: "Duplicate key violation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.IndexException.Codes.DuplicateRoutingKey">
            <summary>Error code 117106: "Internal Index Error: "Duplicate routing key."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.IndexException.Codes.KeyNotFound">
            <summary>Error code 117107: "Internal Index Error: "Key not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.OuterJoinTable._rowFound">
            <summary>Indicates that the current row in the right cursor is a match for the current row in the left cursor.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.OuterJoinTable._rowIncluded">
            <summary>Indicates that some right side match has been found for the current row of the left cursor.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTreeRowsMovedHandler">
            <remarks>
            Provides a callback to notify users of the index when a set of rows has moved.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTreeRowDeletedHandler">
            <remarks>
            Provides a callback to notify users of the index when a row is deleted.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Data.RowTreeSearchPath">
            <remarks>
            Provides a storage structure for the search path followed by the find key in terms of index nodes.
            See the description of the FindKey method for the Index class for more information.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.RowTreeNode.NodeSearch(Alphora.Dataphor.DAE.Schema.IRowType,Alphora.Dataphor.DAE.Runtime.Data.NativeRow,System.Int32@)">
            <summary>
            Performs a binary search among the entries in this node for the given key.  Will always return an
            entry index in AEntryNumber, which is the index of the entry that was found if the method returns true,
            otherwise it is the index where the key should be inserted if the method returns false.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.RowTreeNode.FindKey(Alphora.Dataphor.DAE.Schema.IRowType,Alphora.Dataphor.DAE.Runtime.Data.NativeRow,Alphora.Dataphor.DAE.Runtime.Data.RowTreeSearchPath,System.Int32@)">
            <summary>
            The recursive portion of the find key algorithm invoked by the FindKey method of the parent Index.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.RowTreeNode.InsertData(Alphora.Dataphor.DAE.Runtime.Data.NativeRow,Alphora.Dataphor.DAE.Runtime.Data.NativeRow,System.Int32)">
            <summary>Inserts the given Key and Data streams into this node at the given index.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree">
            <remarks>
            Provides a generic implementation of a B+Tree structure.
            The main characteristics of this structure are Fanout, and Capacity.
            Each node in the index is a pair of lists of rows. 
            </remarks>	
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.Root">
            <summary>The root node in the tree.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.Head">
            <summary>The head node of the tree.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.Tail">
            <summary>The tail node of the tree.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.Height">
            <summary>The height of the tree.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.Fanout">
            <summary>The number of entries per routing node in the tree.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.Capacity">
            <summary>The number of entries per data node in the tree.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.Key">
            <summary>The description of the order for the index.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.KeyRowType">
            <summary>The row type of the key for the index.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.DataRowType">
            <summary>The row type for data for the index.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.Insert(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Runtime.Data.NativeRow,Alphora.Dataphor.DAE.Runtime.Data.NativeRow)">
            <summary>
            The given streams are copied into the index, so references within the streams 
            are considered owned by the index after the insert.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.Update(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Runtime.Data.NativeRow,Alphora.Dataphor.DAE.Runtime.Data.NativeRow)">
            <summary>Updates the entry given by AOldKey to the stream given by ANewKey.  The data for the entry is moved to the new location.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.Update(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Runtime.Data.NativeRow,Alphora.Dataphor.DAE.Runtime.Data.NativeRow,Alphora.Dataphor.DAE.Runtime.Data.NativeRow)">
            <summary>Updates the entry given by AOldKey to the entry given by ANewKey and ANewData.  If AOldKey == ANewKey, the data for the entry is updated in place, otherwise it is moved to the location given by ANewKey.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.Delete(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Runtime.Data.NativeRow)">
            <summary>Deletes the entry given by AKey.  The streams are disposed through the DisposeKey event, so it is the responsibility of the index user to dispose references within the streams.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree.FindKey(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Schema.IRowType,Alphora.Dataphor.DAE.Runtime.Data.NativeRow,Alphora.Dataphor.DAE.Runtime.Data.RowTreeSearchPath,System.Int32@)">
            <summary>
            Searches for the given key within the index.  ARowTreeSearchPath and AEntryNumber together give the 
            location of the key in the index.  If the search is successful, the entry exists, otherwise 
            the EntryNumber indicates where the entry should be placed for an insert.
            </summary>
            <param name="key">The key to be found.</param>
            <param name="rowTreeSearchPath">A <see cref="T:Alphora.Dataphor.DAE.Runtime.Data.RowTreeSearchPath"/> which will contain the set of nodes along the search path to the key.</param>
            <param name="entryNumber">The EntryNumber where the key either is, or should be, depending on the result of the find.</param>
            <returns>A boolean value indicating the success or failure of the find.</returns>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.NativeTable.Insert(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary>Inserts the given row into all the indexes of the table value.</summary>
            <param name="row">The given row must conform to the structure of the table value.</param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.ObjectMarshal.ToNativeOf(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Schema.IDataType,System.Object)">
            <summary>
            Converts the C# host representation of a value to the "Native" representation (using NativeLists, NativeRows, and NativeTables)
            </summary>
            <param name="dataType">The target data type for the conversion.</param>
            <param name="value">The source value to be converted.</param>
            <returns>The value in its "Native" representation.</returns>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Data.ProjectTable">
            <remarks> 
            	ProjectTable expects its source to be ordered by the projection columns if it is required
            	to be distinct.  The compiler will ensure this is the case.
            </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Data.Scan">
            <remarks>
            Provides a "scan" on the given NativeTable using the given access path (NativeRowTree).
            A scan implements the Navigable, BackwardsNavigable, and Searchable CursorCapabilities in
            the same way as a Table value is expected to. A scan is an active window onto the given
            table value, changes made to the underlying data are immediately reflected in the scan.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Scan.#ctor(Alphora.Dataphor.DAE.Runtime.IValueManager,Alphora.Dataphor.DAE.Runtime.Data.NativeTable,Alphora.Dataphor.DAE.Runtime.Data.NativeRowTree,Alphora.Dataphor.DAE.Runtime.Data.ScanDirection,Alphora.Dataphor.DAE.Runtime.Data.IRow,Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <remarks> Scan range keys are inclusive. </remarks>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Scan.CompareKeys(Alphora.Dataphor.DAE.Runtime.Data.IRow,Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <remarks>The keys passed to this function must be of the same row type as the key for the accesspath for the scan</remarks>		
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Data.Row">
            <remarks>
            Provides a fixed length buffer for cell values with overflow management built in.
            Used in conjunction with the CellValueStream, provides transparent variable length
            value storage in a fixed length buffer.
            </remarks>    
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Row.GetValue(System.Int32)">
            <summary>This is a by-reference access of the value, changes made to the resulting DataValue will be refelected in the actual row.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Row.GetNativeValue(System.Int32)">
            <summary>
            Returns the native representation if the value is stored in non-native form (as a StreamID)
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.Row.Item(System.Int32)">
            <summary>This is a by-reference access of the value, changes made to the resulting DataValue will be refelected in the actual row.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Row.IndexOfColumn(System.String)">
            <summary>Returns the index of the given column name, resolving first for the full name, then for a partial match.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Row.GetIndexOfColumn(System.String)">
            <summary>Returns the index of the given column name, resolving first for the full name, then for a partial match.  Throws an exception if the column name is not found.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Row.GetValueFlags">
            <summary>Returns an array of ARow.DataType.Columns.Count boolean values indicating whether each column in ARow has a value.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Data.Scalar">
            <summary>Provides the host representation for scalar values in the DAE.</summary>
            <remarks>
            The host representation will wrap either a native representation of the value, or a stream representation of the value.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.Scalar.StreamID">
            <summary>Returns the stream id that contains the data for the physical representation of this scalar.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Scalar.OpenStream">
            <summary>Opens a stream to read the data for this value. If this instance is native, the stream will be read only.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Data.InternedScalar">
            <summary>A scalar value which is currently contained inside a native row or list.</summary>	
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Data.InternedScalar.IsNative">
            <summary>Indicates whether the value for this scalar is stored in its native representation.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.ScanException.Codes.ScanInactive">
            <summary>Error code 110100: "Cannot perform this operation on a closed scan."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.ScanException.Codes.NoActiveRow">
            <summary>Error code 110101: "Scan has no active row."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Data.ScanException.Codes.ClusteredRowNotFound">
            <summary>Error code 110102: "Row could not be located using clustered index."</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Data.Table">
            <remarks> Table </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Table.FindKey(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary>
            Attempts to position the cursor on the key specified by the given row.  
            The row must be a superset of the current order key of the table.
            Returns true if successful, false otherwise.
            </summary>        
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Table.FindKey(Alphora.Dataphor.DAE.Runtime.Data.IRow,System.Boolean)">
            <param name="forward"> Provides a hint about the intended direction for bi-directionally navigable cursors. </param>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Table.FindNearest(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary>
            Attempts to position the cursor on the key most closely matching the
            key specified by the given row.  If the given row is not already a
            key or partial key of the current order of the table, a partial
            key will be constructed from the row containing the same or fewer
            columns of the current key of the order.  If any column in the key
            has no value, the rest of the columns in the key must also have no
            value.  If a row cannot be constructed meeting this criteria, the
            FindNearest will fail.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Table.IsKeyRow(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary>Returns true if the given key has the same number of columns in the same order as the node order key.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Table.IsPartialKeyRow(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary>Returns true if the given key has the same or fewer columns in the same order as the node order key, and once any column is null, the rest of the columns are also null.</summary>        
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Table.EnsureKeyRow(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary>
            Returns a row that is guaranteed to contain the same columns in the same order as the node order.  
            If the given row does not satisfy this requirement, a row of the proper row type is created and the values from the given row are copied into it.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Data.Table.EnsurePartialKeyRow(Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary>
            Returns a row that is guaranteed to contain the same or fewer columns in the same order as the node order,
            and once a column is null, the rest of the columns are null as well.  If the given row does not satisfy this
            requirement, a row of the proper row type is created and the values from the given row are copied into it.
            If no such row can be created, null is returned.
            </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortNegateNode">
            <remarks> operator iNegate(short) : short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerNegateNode">
            <remarks> operator iNegate(int) : int </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongNegateNode">
            <remarks> operator iNegate(long) : long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalNegateNode">
            <remarks> operator iNegate(decimal) : decimal </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BytePowerNode">
            <remarks> operator iPower(byte, byte) : byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortPowerNode">
            <remarks> operator iPower(short, short) : short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerPowerNode">
            <remarks> operator iPower(integer, integer) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongPowerNode">
            <remarks> operator iPower(long, long) : long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalPowerNode">
            <remarks> operator iPower(decimal, decimal) : decimal </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteMultiplicationNode">
            <remarks> operator iMultiplication(byte, byte) : byte </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortMultiplicationNode">
            <remarks> operator iMultiplication(short, short) : short </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerMultiplicationNode">
            <remarks> operator iMultiplication(integer, integer) : integer </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongMultiplicationNode">
            <remarks> operator iMultiplication(long, long) : long </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalMultiplicationNode">
            <remarks> operator iMultiplication(decimal, decimal) : decimal </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyDecimalMultiplicationNode">
            <remarks> operator iMultiplication(money, decimal) : money </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalMoneyMultiplicationNode">
            <remarks> operator iMultiplication(decimal, money) : money </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyIntegerMultiplicationNode">
            <remarks> operator iMultiplication(money, integer) : money </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerMoneyMultiplicationNode">
            <remarks> operator iMultiplication(integer, money) : money </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteDivisionNode">
            <remarks> operator iDivision(byte, byte) : decimal</remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteDivNode">
            <remarks> operator iDiv(byte, byte) : byte</remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortDivisionNode">
            <remarks> operator iDivision(short, short) : decimal</remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortDivNode">
            <remarks> operator iDiv(short, short) : short </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerDivisionNode">
            <remarks> operator iDivision(integer, integer) : decimal</remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerDivNode">
            <remarks> operator iDiv(integer, integer) : integer </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongDivisionNode">
            <remarks> operator iDivision(long, long) : decimal</remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongDivNode">
            <remarks> operator iDiv(long, long) : long </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalDivisionNode">
            <remarks> operator iDivision(decimal, decimal) : decimal </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalDivNode">
            <remarks> operator iDiv(decimal, decimal) : decimal </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyDivisionNode">
            <remarks> operator iDivision(Money, Money) : Decimal </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyDecimalDivisionNode">
            <remarks> operator iDivision(money, decimal) : money </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalMoneyDivisionNode">
            <remarks> operator iDivision(decimal, money) : money </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyIntegerDivisionNode">
            <remarks> operator iDivision(money, integer) : money </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerMoneyDivisionNode">
            <remarks> operator iDivision(integer, money) : money </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteModNode">
            <remarks> operator iMod(byte, byte) : byte </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortModNode">
            <remarks> operator iMod(short, short) : short </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerModNode">
            <remarks> operator iMod(integer, integer) : integer </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongModNode">
            <remarks> operator iMod(long, long) : long </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalModNode">
            <remarks> operator iMod(decimal, decimal) : decimal </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringAdditionNode">
            <remarks> operator iAddition(string, string) : string </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteAdditionNode">
            <remarks> operator iAddition(byte, byte) : byte </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortAdditionNode">
            <remarks> operator iAddition(short, short) : short </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerAdditionNode">
            <remarks> operator iAddition(integer, integer) : integer </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongAdditionNode">
            <remarks> operator iAddition(long, long) : long </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalAdditionNode">
            <remarks> operator iAddition(decimal, decimal) : decimal </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyAdditionNode">
            <remarks> operator iAddition(money, money) : money </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteSubtractionNode">
            <remarks> operator iSubtraction(byte, byte) : byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortSubtractionNode">
            <remarks> operator iSubtraction(short, short) : short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerSubtractionNode">
            <remarks> operator iSubtraction(integer, integer) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongSubtractionNode">
            <remarks> operator iSubtraction(long, long) : long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalSubtractionNode">
            <remarks> operator iSubtraction(decimal, decimal) : decimal </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneySubtractionNode">
            <remarks> operator iSubtraction(money, money) : money </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BinaryEqualNode">
            <remarks> operator iEqual(Binary, Binary) : Boolean; </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BinaryToBase64StringNode">
            <remarks> operator ToBase64String(AGraphic : Graphic) : string </remarks>
            <remarks> operator ToBase64String(ABinary : Binary) : string </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteBitwiseNotNode">
            <remarks> operator iBitwiseNot(byte) : byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortBitwiseNotNode">
            <remarks> operator iBitwiseNot(short) : short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerBitwiseNotNode">
            <remarks> operator iBitwiseNot(int) : int </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongBitwiseNotNode">
            <remarks> operator iBitwiseNot(long) : long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteBitwiseAndNode">
            <remarks> operator iBitwiseAnd(byte, byte) : byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortBitwiseAndNode">
            <remarks> operator iBitwiseAnd(short, short) : short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerBitwiseAndNode">
            <remarks> operator iBitwiseAnd(integer, integer) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongBitwiseAndNode">
            <remarks> operator iBitwiseAnd(long, long) : long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteBitwiseOrNode">
            <remarks> operator iBitwiseOr(byte, byte) : byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortBitwiseOrNode">
            <remarks> operator iBitwiseOr(short, short) : short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerBitwiseOrNode">
            <remarks> operator iBitwiseOr(integer, integer) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongBitwiseOrNode">
            <remarks> operator iBitwiseOr(long, long) : long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteBitwiseXorNode">
            <remarks>operator iBitwiseXor(byte, byte) : byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortBitwiseXorNode">
            <remarks>operator iBitwiseXor(short, short) : short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerBitwiseXorNode">
            <remarks>operator iBitwiseXor(integer, integer) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongBitwiseXorNode">
            <remarks>operator iBitwiseXor(long, long) : long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteShiftLeftNode">
            <remarks> operator iLeftShift(byte, integer) : byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortShiftLeftNode">
            <remarks> operator iLeftShift(short, integer) : short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerShiftLeftNode">
            <remarks> operator iLeftShift(integer, integer) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongShiftLeftNode">
            <remarks> operator iLeftShift(long, integer) : long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteShiftRightNode">
            <remarks> operator >>(byte, integer) : byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortShiftRightNode">
            <remarks> operator >>(short, integer) : short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerShiftRightNode">
            <remarks> operator >>(integer, integer) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongShiftRightNode">
            <remarks> operator >>(long, integer) : long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanNotNode">
            <remarks>operator System.iNot(System.Boolean) : System.Boolean</remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanAndNode">
            <remarks> 
            operator System.iAnd(System.Boolean, System.Boolean) : System.Boolean
            Be aware!!! D4 does NOT do short circuit evaluation...
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanOrNode">
            <remarks>operator System.iOr(System.Boolean, System.Boolean) : System.Boolean</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanXorNode">
            <remarks>operator System.iXor(System.Boolean, System.Boolean) : System.Boolean</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ScalarEqualNode">
            <remarks> operator iEqual(scalar, scalar) : Boolean </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteEqualNode">
            <remarks> operator iEqual(byte, byte) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortEqualNode">
            <remarks> operator iEqual(short, short) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerEqualNode">
            <remarks> operator iEqual(integer, integer) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongEqualNode">
            <remarks> operator iEqual(long, long) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.GuidEqualNode">
            <remarks> operator iEqual(Guid, Guid) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanEqualNode">
            <remarks> operator iEqual(bool, bool) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalEqualNode">
            <remarks> operator iEqual(decimal, decimal) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringEqualNode">
            <remarks> operator iEqual(string, string) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyEqualNode">
            <remarks> operator iEqual(money, money) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ErrorEqualNode">
            <remarks> operator iEqual(Error, Error) : Boolean; </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteNotEqualNode">
            <remarks> operator iNotEqual(byte, byte) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortNotEqualNode">
            <remarks> operator iNotEqual(short , short ) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerNotEqualNode">
            <remarks> operator iNotEqual(integer, integer) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongNotEqualNode">
            <remarks> operator iNotEqual(long, long) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.GuidNotEqualNode">
            <remarks> operator iNotEqual(Guid, Guid) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanNotEqualNode">
            <remarks> operator iNotEqual(bool, bool) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalNotEqualNode">
            <remarks> operator iNotEqual(decimal, decimal) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringNotEqualNode">
            <remarks> operator iNotEqual(string, string) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyNotEqualNode">
            <remarks> operator iNotEqual(money, money) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanGreaterNode">
            <remarks> operator iGreater(bool, bool) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteGreaterNode">
            <remarks> operator iGreater(byte, byte) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortGreaterNode">
            <remarks> operator iGreater(short, short) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerGreaterNode">
            <remarks> operator iGreater(integer, integer) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongGreaterNode">
            <remarks> operator iGreater(long, long) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.GuidGreaterNode">
            <remarks> operator iGreater(Guid, Guid) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalGreaterNode">
            <remarks> operator iGreater(decimal, decimal) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringGreaterNode">
            <remarks> operator iGreater(string, string) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyGreaterNode">
            <remarks> operator iGreater(money, money) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanLessNode">
            <remarks> operator iLess(bool, bool) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteLessNode">
            <remarks> operator iLess(byte, byte) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortLessNode">
            <remarks> operator iLess(short, short) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerLessNode">
            <remarks> operator iLess(integer, integer) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongLessNode">
            <remarks> operator iLess(long, long) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.GuidLessNode">
            <remarks> operator iLess(Guid, Guid) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalLessNode">
            <remarks> operator iLess(decimal, decimal) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringLessNode">
            <remarks> operator iLess(string, string) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyLessNode">
            <remarks> operator iLess(money, money) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanInclusiveGreaterNode">
            <remarks> operator iInclusiveGreater(bool, bool) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteInclusiveGreaterNode">
            <remarks> operator iInclusiveGreater(byte, byte) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortInclusiveGreaterNode">
            <remarks> operator iInclusiveGreater(short, short) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerInclusiveGreaterNode">
            <remarks> operator iInclusiveGreater(integer, integer) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongInclusiveGreaterNode">
            <remarks> operator iInclusiveGreater(long, long) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.GuidInclusiveGreaterNode">
            <remarks> operator iInclusiveGreater(Guid, Guid) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalInclusiveGreaterNode">
            <remarks> operator iInclusiveGreater(decimal, decimal) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringInclusiveGreaterNode">
            <remarks> operator iInclusiveGreater(string, string) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyInclusiveGreaterNode">
            <remarks> operator iInclusiveGreater(money, money) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanInclusiveLessNode">
            <remarks> operator iInclusiveLess(bool, bool) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteInclusiveLessNode">
            <remarks> operator iInclusiveLess(byte, byte) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortInclusiveLessNode">
            <remarks> operator iInclusiveLess(short, short) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerInclusiveLessNode">
            <remarks> operator iInclusiveLess(integer, integer) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongInclusiveLessNode">
            <remarks> operator iInclusiveLess(long, long) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.GuidInclusiveLessNode">
            <remarks> operator iInclusiveLess(Guid, Guid) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalInclusiveLessNode">
            <remarks> operator iInclusiveLess(decimal, decimal) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringInclusiveLessNode">
            <remarks> operator iInclusiveLess(string, string) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyInclusiveLessNode">
            <remarks> operator iInclusiveLess(money, money) : bool </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanCompareNode">
            <remarks> operator iCompare(bool, bool) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteCompareNode">
            <remarks> operator iCompare(byte, byte) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortCompareNode">
            <remarks> operator iCompare(short, short) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerCompareNode">
            <remarks> operator iCompare(int, int) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongCompareNode">
            <remarks> operator iCompare(long, long) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.GuidCompareNode">
            <remarks> operator iCompare(Guid, Guid) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalCompareNode">
            <remarks> operator iCompare(decimal, decimal) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyCompareNode">
            <remarks> operator iCompare(money, money) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringCompareNode">
            <remarks> operator iCompare(string, string) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanCompareNode">
            <remarks> operator iCompare(TimeSpan, TimeSpan) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteMaxNode">
            <remarks> operator Max(byte, byte) : byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortMaxNode">
            <remarks> operator Max(Short, Short) : Short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerMaxNode">
            <remarks> operator Max(Integer, Integer) : Integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongMaxNode">
            <remarks> operator Max(Long, Long) : Long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalMaxNode">
            <remarks> operator Max(Decimal, Decimal) : Decimal </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanMaxNode">
            <remarks> operator Max(TimeSpan, TimeSpan) : TimeSpan </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeMaxNode">
            <remarks> operator Max(DateTime, DateTime) : DateTime </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateMaxNode">
            <remarks> operator Max(Date, Date) : Date </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeMaxNode">
            <remarks> operator Max(Time, Time) : Time </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyMaxNode">
            <remarks> operator Max(Money, Money) : Money </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteMinNode">
            <remarks> operator Min(byte, byte) : byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortMinNode">
            <remarks> operator Min(Short, Short) : Short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerMinNode">
            <remarks> operator Min(Integer, Integer) : Integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongMinNode">
            <remarks> operator Min(Long, Long) : Long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalMinNode">
            <remarks> operator Min(Decimal, Decimal) : Decimal </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeMinNode">
            <remarks> operator Min(DateTime, DateTime) : DateTime </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanMinNode">
            <remarks> operator Min(TimeSpan, TimeSpan) : TimeSpan </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateMinNode">
            <remarks> operator Min(Date, Date) : Date </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeMinNode">
            <remarks> operator Min(Time, Time) : Time </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyMinNode">
            <remarks> operator Min(Money, Money) : Money </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanBetweenNode">
            <remarks> operator iBetween(boolean, boolean, boolean) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteBetweenNode">
            <remarks> operator iBetween(byte, byte, byte) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortBetweenNode">
            <remarks> operator iBetween(short, short, short) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerBetweenNode">
            <remarks> operator iBetween(integer, integer, integer) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongBetweenNode">
            <remarks> operator iBetween(long, long, long) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.GuidBetweenNode">
            <remarks> operator iBetween(Guid, Guid, Guid) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalBetweenNode">
            <remarks> operator iBetween(decimal, decimal, decimal) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyBetweenNode">
            <remarks> operator iBetween(money, money, money) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringBetweenNode">
            <remarks> operator iBetween(string, string, string) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanBetweenNode">
            <remarks> operator iBetween(TimeSpan, TimeSpan, TimeSpan) : integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ObjectToStringNode">
            <remarks> operator ToString(System.Generic) : System.String </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanToStringNode">
            <remarks> operator BooleanToString(System.Boolean) : System.String </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToBooleanNode">
            <remarks> operator StringToBoolean(System.String) : System.Boolean </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteToStringNode">
            <remarks> operator ByteToString(System.Byte) : System.String </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToByteNode">
            <remarks> operator StringToByte(System.String) : System.Byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortToStringNode">
            <remarks> operator ShortToString(System.Short) : System.String </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToShortNode">
            <remarks> operator StringToShort(System.String) : System.Short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerToStringNode">
            <remarks> operator IntegerToString(System.Integer) : System.String </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToIntegerNode">
            <remarks> operator StringToInteger(System.String) : System.Integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongToStringNode">
            <remarks> operator LongToString(System.Long) : System.String </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToLongNode">
            <remarks> operator StringToLong(System.String) : System.Long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.GuidToStringNode">
            <remarks> operator ToString(AGuid : Guid) : string </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToGuidNode">
            <remarks> operator ToGuid(AString : string) : Guid </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteToBooleanNode">
            <remarks> operator ByteToBoolean(System.Byte) : System.Boolean </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanToByteNode">
            <remarks> operator BooleanToByte(System.Boolean) : System.Byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortToBooleanNode">
            <remarks> operator ShortToBoolean(System.Short) : System.Boolean </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanToShortNode">
            <remarks> operator BooleanToShort(System.Boolean) : System.Short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerToBooleanNode">
            <remarks> operator IntegerToBoolean(System.Integer) : System.Boolean </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanToIntegerNode">
            <remarks> operator BooleanToInteger(System.Boolean) : System.Integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongToBooleanNode">
            <remarks> operator LongToBoolean(System.Long) : System.Boolean </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.BooleanToLongNode">
            <remarks> operator BooleanToLong(System.Boolean) : System.Long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteToShortNode">
            <remarks> operator ByteToShort(System.Byte) : System.Short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortToByteNode">
            <remarks> operator ShortToByte(System.Short) : System.Byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteToIntegerNode">
            <remarks> operator ByteToInteger(System.Byte) : System.Integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerToByteNode">
            <remarks> operator IntegerToByte(System.Integer) : System.Byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ByteToLongNode">
            <remarks> operator ByteToLong(System.Byte) : System.Long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongToByteNode">
            <remarks> operator LongToByte(System.Long) : System.Byte </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortToIntegerNode">
            <remarks> operator ShortToInteger(System.Short) : System.Integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerToShortNode">
            <remarks> operator IntegerToShort(System.Integer) : System.Short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ShortToLongNode">
            <remarks> operator ShortToLong(System.Short) : System.Long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongToShortNode">
            <remarks> operator LongToShort(System.Long) : System.Short </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerToLongNode">
            <remarks> operator IntegerToLong(System.Integer) : System.Long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongToIntegerNode">
            <remarks> operator LongToInteger(System.Long) : System.Integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalToStringNode">
            <remarks> operator DecimalToString(System.Decimal) : System.String </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.MoneyToStringNode">
            <remarks> operator MoneyToString(System.Decimal) : System.String </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToDecimalNode">
            <remarks> operator StringToDecimal(System.String) : System.Decimal </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToMoneyNode">
            <remarks> operator StringToMoney(System.String) : System.Decimal </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalToIntegerNode">
            <remarks> operator DecimalToInteger(System.Decimal) : System.Integer </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerToDecimalNode">
            <remarks> operator IntegerToDecimal(System.Integer) : System.Decimal </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalToLongNode">
            <remarks> operator DecimalToLong(System.Decimal) : System.Long </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.LongToDecimalNode">
            <remarks> operator LongToDecimal(System.Long) : System.Decimal </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeToTimeSpanNode">
            <remarks> operator System.TimeSpan(System.DateTime) : System.TimeSpan; </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanToDateTimeNode">
            <remarks> operator System.DateTime(System.TimeSpan) : System.DateTime; </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTicksSelectorNode">
            <remarks>operator System.TimeSpan.Ticks(ATicks : Long) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanMillisecondsSelectorNode">
            <remarks>operator System.TimeSpan.Milliseconds(AMilliseconds : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanSecondsSelectorNode">
            <remarks>operator System.TimeSpan.Seconds(ASeconds : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanMinutesSelectorNode">
            <remarks>operator System.TimeSpan.Minutes(AMinutes : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanHoursSelectorNode">
            <remarks>operator System.TimeSpan.Hours(AMinutes : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanDaysSelectorNode">
            <remarks>operator System.TimeSpan.Days(ADays : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanMillisecondsSelectorNode">
            <remarks>operator System.TimeSpan.TimeSpan(ADays : Integer, AHours : Integer, AMinutes : Integer, ASeconds : Integer, AMilliseconds : Integer) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanSecondsSelectorNode">
            <remarks>operator System.TimeSpan.TimeSpan(ADays : Integer, AHours : Integer, AMinutes : Integer, ASeconds : Integer) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanMinutesSelectorNode">
            <remarks>operator System.TimeSpan.TimeSpan(ADays : Integer, AHours : Integer, AMinutes : Integer) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanHoursSelectorNode">
            <remarks>operator System.TimeSpan.TimeSpan(ADays : Integer, AHours : Integer) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanDaysSelectorNode">
            <remarks>operator System.TimeSpan.TimeSpan(ADays : Integer) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTicksReadTicksNode">
            <remarks>operator System.TimeSpan.TicksReadTicks(AValue : TimeSpan) : Long;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTicksWriteTicksNode">
            <remarks>operator System.TimeSpan.TicksWriteTicks(AValue : TimeSpan, ATicks : Long) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanMillisecondsReadMillisecondsNode">
            <remarks>operator System.TimeSpan.MillisecondsReadMilliseconds(AValue : TimeSpan) : Decimal;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanMillisecondsWriteMillisecondsNode">
            <remarks>operator System.TimeSpan.MillisecondsWriteMilliseconds(AValue : TimeSpan, AMilliseconds : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanSecondsReadSecondsNode">
            <remarks>operator System.TimeSpan.SecondsReadSeconds(AValue : TimeSpan) : Decimal;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanSecondsWriteSecondsNode">
            <remarks>operator System.TimeSpan.SecondsWriteSeconds(AValue : TimeSpan, ASeconds : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanMinutesReadMinutesNode">
            <remarks>operator System.TimeSpan.MinutesReadMinutes(AValue : TimeSpan) : Decimal;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanMinutesWriteMinutesNode">
            <remarks>operator System.TimeSpan.MinutesWriteMinutes(AValue : TimeSpan, AMinutes : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanHoursReadHoursNode">
            <remarks>operator System.TimeSpan.HoursReadHours(AValue : TimeSpan) : Decimal;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanHoursWriteHoursNode">
            <remarks>operator System.TimeSpan.HoursWriteHours(AValue : TimeSpan, AHours : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanDaysReadDaysNode">
            <remarks>operator System.TimeSpan.DaysReadDays(AValue : TimeSpan) : Decimal;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanDaysWriteDaysNode">
            <remarks>operator System.TimeSpan.DaysWriteDays(AValue : TimeSpan, ADays : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanReadDayNode">
            <remarks>operator System.TimeSpan.TimeSpanReadDay(AValue : TimeSpan) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanWriteDayNode">
            <remarks>operator System.TimeSpan.TimeSpanWriteDay(AValue : TimeSpan, ADay : Integer) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanReadHourNode">
            <remarks>operator System.TimeSpan.TimeSpanReadHour(AValue : TimeSpan) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanWriteHourNode">
            <remarks>operator System.TimeSpan.TimeSpanWriteHour(AValue : TimeSpan, AHour : Integer) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanReadMinuteNode">
            <remarks>operator System.TimeSpan.TimeSpanReadMinute(AValue : TimeSpan) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanWriteMinuteNode">
            <remarks>operator System.TimeSpan.TimeSpanWriteMinute(AValue : TimeSpan, AMinute : Integer) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanReadSecondNode">
            <remarks>operator System.TimeSpan.TimeSpanReadSecond(AValue : TimeSpan) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanWriteSecondNode">
            <remarks>operator System.TimeSpan.TimeSpanWriteSecond(AValue : TimeSpan, ASecond : Integer) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanReadMillisecondNode">
            <remarks>operator System.TimeSpan.TimeSpanReadMillisecond(AValue : TimeSpan) : Decimal;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeSpanTimeSpanWriteMillisecondNode">
            <remarks>operator System.TimeSpan.TimeSpanWriteMillisecond(AValue : TimeSpan, AMillisecond : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeTicksSelectorNode">
            <remarks>operator System.DateTime.Ticks(ATicks : Long) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeSelectorNode">
            <remarks>operator System.DateTime.DateTime(AYears : Integer, AMonths : Integer, ADays : Integer, AHours : Integer, AMinutes : Integer, ASeconds : Integer, AMilliseconds : Integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeSecondsSelectorNode">
            <remarks>operator System.DateTime.DateTime(AYears : Integer, AMonths : Integer, ADays : Integer, AHours : Integer, AMinutes : Integer, ASeconds : Integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeMinutesSelectorNode">
            <remarks>operator System.DateTime.DateTime(AYears : Integer, AMonths : Integer, ADays : Integer, AHours : Integer, AMinutes : Integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeDaysSelectorNode">
            <remarks>operator System.DateTime.DateTime(AYears : Integer, AMonths : Integer, ADays : Integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeNode">
            <remarks>operator System.DateTime.DateTime(ATimeSpan : TimeSpan) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeTicksReadTicksNode">
            <remarks>operator System.DateTime.TicksReadTicks(AValue : DateTime) : Long;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeTicksWriteTicksNode">
            <remarks>operator System.DateTime.TicksWriteTicks(AValue : DateTime, ATicks : Long) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeReadYearNode">
            <remarks>operator System.DateTime.DateTimeReadYear(AValue : DateTime) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeWriteYearNode">
            <remarks>operator System.DateTime.DateTimeWriteYear(AValue : DateTime, AYear : Integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeReadMonthNode">
            <remarks>operator System.DateTime.DateTimeReadMonth(AValue : DateTime) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeWriteMonthNode">
            <remarks>operator System.DateTime.DateTimeWriteMonth(AValue : DateTime, AMonth : Integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeReadDayNode">
            <remarks>operator System.DateTime.DateTimeReadDay(AValue : DateTime) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeWriteDayNode">
            <remarks>operator System.DateTime.DateTimeWriteDay(AValue : DateTime, ADay : Integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeReadHourNode">
            <remarks>operator System.DateTime.DateTimeReadHour(AValue : DateTime) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeWriteHourNode">
            <remarks>operator System.DateTime.DateTimeWriteHour(AValue : DateTime, AHour : Integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeReadMinuteNode">
            <remarks>operator System.DateTime.DateTimeReadMinute(AValue : DateTime) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeWriteMinuteNode">
            <remarks>operator System.DateTime.DateTimeWriteMinute(AValue : DateTime, AMinute : Integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeReadSecondNode">
            <remarks>operator System.DateTime.DateTimeReadSecond(AValue : DateTime) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeWriteSecondNode">
            <remarks>operator System.DateTime.DateTimeWriteSecond(AValue : DateTime, ASecond : Integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeReadMillisecondNode">
            <remarks>operator System.DateTime.DateTimeReadMillisecond(AValue : DateTime) : Decimal;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTimeDateTimeWriteMillisecondNode">
            <remarks>operator System.DateTime.DateTimeWriteMillisecond(AValue : DateTime, AMillisecond : Decimal) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTicksSelectorNode">
            <remarks>operator System.Date.Ticks(ATicks : Long) : Date;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTicksReadTicksNode">
            <remarks>operator System.Date.TicksReadTicks(AValue : Date) : Long;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDateTicksWriteTicksNode">
            <remarks>operator System.Date.TicksWriteTicks(AValue : Date, ATicks : Long) : Date;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTicksSelectorNode">
            <remarks>operator System.Time.Ticks(ATicks : Long) : Time;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTimeMillisecondsSelectorNode">
            <remarks>operator System.Time.Time(AHours : Integer, AMinutes : Integer, ASeconds : Integer, AMilliseconds : Integer) : Time;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTimeSecondsSelectorNode">
            <remarks>operator System.Time.Time(AHours : Integer, AMinutes : Integer, ASeconds : Integer) : Time;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTimeMinutesSelectorNode">
            <remarks>operator System.Time.Time(AHours : Integer, AMinutes : Integer) : Time;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTicksReadTicksNode">
            <remarks>operator System.Time.TicksReadTicks(AValue : Time) : Long;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTicksWriteTicksNode">
            <remarks>operator System.Time.TicksWriteTicks(AValue : Time, ATicks : Long) : Time;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTimeReadHourNode">
            <remarks>operator System.Time.TimeReadHour(AValue : Time) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTimeWriteHourNode">
            <remarks>operator System.Time.TimeWriteHour(AValue : Time, AHour : Integer) : Time;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTimeReadMinuteNode">
            <remarks>operator System.Time.TimeReadMinute(AValue : Time) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTimeWriteMinuteNode">
            <remarks>operator System.Time.TimeWriteMinute(AValue : Time, AMinute : Integer) : Time;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTimeReadSecondNode">
            <remarks>operator System.Time.TimeReadSecond(AValue : Time) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTimeWriteSecondNode">
            <remarks>operator System.Time.TimeWriteSecond(AValue : Time, ASecond : Integer) : Time;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTimeReadMillisecondNode">
            <remarks>operator System.Time.TimeReadMillisecond(AValue : Time) : Decimal;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemTimeTimeWriteMillisecondNode">
            <remarks>operator System.Time.TimeWriteMillisecond(AValue : Time, AMillisecond : Decimal) : Time;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToTimeSpanNode">
            <remarks>operator ToTimeSpan(AString : String) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToDateTimeNode">
            <remarks>operator ToDateTime(AString : string) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToDateNode">
            <remarks>operator ToDate(AString : string) : Date;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringToTimeNode">
            <remarks>operator ToTime(AString : string) : Time;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanToStringNode">
            <remarks>operator ToString(ATimeSpan : TimeSpan) : String;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeToStringNode">
            <remarks>operator ToString(ADateTime : DateTime) : String;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeToStringNode">
            <remarks>operator ToString(ATime : Time) : String;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateToStringNode">
            <remarks>operator ToString(ADate : Date) : String;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DatePartNode">
            <remarks>operator DatePart(ADateTime : DateTime) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimePartNode">
            <remarks>operator TimePart(ADateTime : DateTime) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeNode">
            <remarks>operator DateTime() : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ActualDateTimeNode">
            <remarks>operator ActualDateTime() : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateNode">
            <remarks>operator Date() : Date;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ActualDateNode">
            <remarks>operator ActualDate() : Date;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeNode">
            <remarks>operator Time() : Time; </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.ActualTimeNode">
            <remarks>operator ActualTime() : Time; </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DayOfWeekNode">
            <remarks>operator DayOfWeek(ADateTime : DateTime) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DayOfYearNode">
            <remarks>operator DayOfYear(ADateTime : DateTime) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DaysInMonthNode">
            <remarks>operator DaysInMonth(AYear : Integer, AMonth : Integer) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IsLeapYearNode">
            <remarks>operator IsLeapYear(AYear : Integer) : Boolean;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DurationNode">
            <remarks>operator Duration(ATimeSpan : TimeSpan) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeAddMonthsNode">
            <remarks>operator AddMonths(ADateTime : DateTime, AMonths : integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeMonthsBetweenNode">
            <remarks>operator MonthsBetween(AStartDateTime : DateTime, AEndDateTime : DateTime) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeAddYearsNode">
            <remarks>operator AddYears(ADateTime : DateTime, AYears : integer) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeYearsBetweenNode">
            <remarks>operator YearsBetween(AStartDateTime : DateTime, AEndDateTime : DateTime) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateAddMonthsNode">
            <remarks>operator AddMonths(ADate : Date, AMonths : integer) : Date;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateAddYearsNode">
            <remarks>operator AddYears(ADate : Date, AYears : integer) : Date;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanNegateNode">
            <remarks>operator iNegate(AValue : TimeSpan) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanAdditionNode">
            <remarks>operator iAddition(ALeftValue : TimeSpan, ARightValue : TimeSpan) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeTimeSpanAdditionNode">
            <remarks>operator iAddition(ALeftValue : DateTime, ARightValue : TimeSpan) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeSpanAdditionNode">
            <remarks>operator iAddition(ALeftValue : Date, ARightValue : TimeSpan) : Date;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeTimeSpanAdditionNode">
            <remarks>operator iAddition(ALeftValue : Time, ARightValue : TimeSpan) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanSubtractionNode">
            <remarks>operator iSubtraction(ALeftValue : TimeSpan, ARightValue : TimeSpan) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeSubtractionNode">
            <remarks>operator iSubtraction(ALeftValue : DateTime, ARightValue : DateTime) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateSubtractionNode">
            <remarks>operator iSubtraction(ALeftValue : Date, ARightValue : Date) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSubtractionNode">
            <remarks>operator iSubtraction(ALeftValue : Time, ARightValue : Time) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeTimeSpanSubtractionNode">
            <remarks>operator iSubtraction(ALeftValue : DateTime, ARightValue : TimeSpan) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeSpanSubtractionNode">
            <remarks>operator iSubtraction(ALeftValue : Date, ARightValue : TimeSpan) : Date;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeTimeSpanSubtractionNode">
            <remarks>operator iSubtraction(ALeftValue : Time, ARightValue : TimeSpan) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanIntegerMultiplicationNode">
            <remarks>operator iMultiplication(ALeftValue : TimeSpan, ARightValue : Integer) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerTimeSpanMultiplicationNode">
            <remarks>operator iMultiplication(ALeftValue : Integer, ARightValue : TimeSpan) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanDecimalMultiplicationNode">
            <remarks>operator iMultiplication(ALeftValue : TimeSpan, ARightValue : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalTimeSpanMultiplicationNode">
            <remarks>operator iMultiplication(ALeftValue : Decimal, ARightValue : TimeSpan) : DateTime;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanIntegerDivisionNode">
            <remarks>operator iDivision(ALeftValue : TimeSpan, ARightValue : Integer) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.IntegerTimeSpanDivisionNode">
            <remarks>operator iDivision(ALeftValue : Integer, ARightValue : TimeSpan) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanDecimalDivisionNode">
            <remarks>operator iDivision(ALeftValue : TimeSpan, ARightValue : Decimal) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DecimalTimeSpanDivisionNode">
            <remarks>operator iDivision(ALeftValue : Decimal, ARightValue : TimeSpan) : TimeSpan;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanTimeSpanDivisionNode">
            <remarks>operator iDivision(ALeftValue : TimeSpan, ARightValue : TimeSpan) : Decimal;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanEqualNode">
            <remarks>operator iEqual(ALeftValue : TimeSpan, ARightValue : TimeSpan) : Boolean;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanNotEqualNode">
            <remarks>operator iNotEqual(ALeftValue : TimeSpan, ARightValue : TimeSpan) : Boolean;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanGreaterNode">
            <remarks>operator iGreater(ALeftValue : TimeSpan, ARightValue : TimeSpan) : Boolean;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanInclusiveGreaterNode">
            <remarks>operator iInclusiveGreater(ALeftValue : TimeSpan, ARightValue : TimeSpan) : Boolean;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DateTimeLessNode">
            <remarks>operator iLess(ALeftValue : DateTime, ARightValue : DateTime) : Boolean;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanLessNode">
            <remarks>operator iLess(ALeftValue : TimeSpan, ARightValue : TimeSpan) : Boolean;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.TimeSpanInclusiveLessNode">
            <remarks>operator iInclusiveLess(ALeftValue : TimeSpan, ARightValue : TimeSpan) : Boolean;</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Instructions.JoinNode.CoordinateLeftJoinKey(Alphora.Dataphor.DAE.Runtime.Program,Alphora.Dataphor.DAE.Runtime.Data.IRow,Alphora.Dataphor.DAE.Runtime.Data.IRow,System.Collections.BitArray,System.String)">
            <summary>Coordinates the value of the left join-key column with the value of the right join-key column given by AColumnName.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Instructions.JoinNode.CoordinateRightJoinKey(Alphora.Dataphor.DAE.Runtime.Program,Alphora.Dataphor.DAE.Runtime.Data.IRow,Alphora.Dataphor.DAE.Runtime.Data.IRow,System.Collections.BitArray,System.String)">
            <summary>Coordinates the value of the right join-key column with the value of the left join-key column given by AColumnName.</summary>		
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode">
            <summary> PlanNode </summary>	
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode.CouldSupport">
            <summary>Set by the device to indicate that the node could be supported if necessary, but only by parameterization.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode.BindToProcess(Alphora.Dataphor.DAE.Compiling.Plan)">
            <summary>Rechecks security for the plan using the given plan and associated security context.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Instructions.PlanNode.Clone">
            <summary>
            Copies the PlanNode. The method can only be used on pre-chunking plan nodes.
            </summary>
            <remarks>
            This method provides a mechanism to copy nodes that have reached the compiled state,
            but have not yet been chunked or planned. The copied nodes will have type and
            characteristics determined.
            </remarks>
            <returns>A copy of the node of the same type.</returns>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.DevicePlanNode">
            <summary>
            Represents compiled information for a given node relevant to execution on a specific device.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.RestrictNode.Conditions">
            <summary>Sargable conditions for the restriction.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.RestrictNode.ClosedConditions">
            <summary>Conditions where both sides of the range are specified.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.RestrictNode.OpenConditions">
            <summary>Conditions where only one side of the range is specified.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.RestrictNode.OpenConditionsUseFirstKey">
            <summary>Indicates whether the open conditions should use the first key.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.RestrictNode.IsSeekable">
            <summary>Indicates whether the restriction condition is seekable.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.RestrictNode.IsScanable">
            <summary>Indicates wheter the restriction condition is scanable.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.RowNode.SpecifiedRowType">
            <summary>If this is a specified row selector, this is the specified subset of the row selector.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDecryptStringNode">
            <remarks> <code>operator DecryptString(const AEncrypted : String) : String; </code>
             <para>Note: Decrypt is deterministic and repeatable because it always yields the same result.</para> </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemEncryptStringNode">
            <remarks> <code>operator EncryptString(const AUnencrypted : String) : String; </code>
             <para>Note: Encrypt is not deterministic or repeatable because it includes a random SALT in the result.</para> </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.StringUtility">
            <remarks> The string searching routines in the StringUtility class treat the empty string as though it does not exist in any string.  The standard .NET routines treat the empty string as though it exists in all strings. </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemErrorSelectorNode">
            <remarks>
            operator System.Error(const AMessage : String) : System.Error;
            operator System.Error(const AMessage : String, const AInnerError : System.Error) : System.Error;
            operator System.Error(const ACode : Integer, const AMessage : String) : Error;
            operator System.Error(const ACode : Integer, const AMessage : String, const AInnerError : System.Error) : Error;
            operator System.Error(const ASeverity : String, const AMessage : String) : Error;
            operator System.Error(const ASeverity : String, const AMessage : String, const AInnerError : Error) : Error;
            operator System.Error(const ASeverity : String, const ACode : Integer, const AMessage : String) : Error;
            operator System.Error(const ASeverity : String, const ACode : Integer, const AMessage : String, const AInnerError : Error) : Error;
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemErrorReadSeverityNode">
            <remarks>operator System.Error.ReadSeverity(const AValue : Error) : String;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemErrorWriteSeverityNode">
            <remarks>operator System.Error.WriteSeverity(const AValue : Error, const ASeverity : String) : Error;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemErrorReadCodeNode">
            <remarks>operator System.Error.ReadCode(const AValue : Error) : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemErrorWriteCodeNode">
            <remarks>operator System.Error.WriteCode(const AValue : Error, const ACode : Integer) : Error;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemErrorReadMessageNode">
            <remarks>operator System.Error.ReadMessage(const AValue : Error) : String;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemErrorWriteMessageNode">
            <remarks>operator System.Error.WriteMessage(const AValue : Error, const AMessage : String) : Error;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemErrorReadInnerErrorNode">
            <remarks>operator System.Error.ReadInnerError(const AValue : Error) : Error;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemErrorWriteInnerErrorNode">
            <remarks>operator System.Error.WriteInnerError(const AValue : Error, const AInnerError : Error) : Error;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemGetErrorDescriptionNode">
            <remarks>operator System.Diagnostics.GetErrorDescription(const AValue : Error) : String;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemGetDetailedErrorDescriptionNode">
            <remarks>operator System.Diagnostics.GetDetailedErrorDescription(const AValue : Error) : String;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemBinarySelectorNode">
            <remarks> operator System.Binary.Binary(AValue : String) : System.Binary </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemGuidSelectorNode">
            <remarks> operator System.Guid.Guid(AValue : String) : System.Guid </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemIsSupportedNode">
            <remarks>operator System.Diagnostics.IsSupported(AStatement : String, ADeviceName : Name) : Boolean;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemGetRestrictionAlgorithmNode">
            <remarks>operator System.Diagnostics.GetRestrictionAlgorithm(AExpression : String) : String;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemGetJoinAlgorithmNode">
            <remarks>operator System.Diagnostics.GetJoinAlgorithm(AExpression : String) : String;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemStartProcessNode">
            <remarks>operator StartProcess() : Integer;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemEvaluateNode">
            <remarks>operator Evaluate(const AExpression : System.String) : generic;</remarks>
            <remarks>operator Evaluate(const AExpression : System.String, const AInParams : row) : generic;</remarks>
            <remarks>operator Evaluate(const AExpression : System.String, const AInParams : row, var AOutParams : row) : generic;</remarks>
            <remarks>operator Evaluate(const AProcessID : Integer, const AExpression : String) : generic;</remarks>
            <remarks>operator Evaluate(const AProcessID : Integer, const AExpression : String, const AInParams : row) : generic;</remarks>
            <remarks>operator Evaluate(const AProcessID : Integer, const AExpression : String, const AInParams : row, var AOutParams : row) : generic;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemEvaluateOnNode">
            <remarks>operator EvaluateOn(const AServerName : System.Name, const AExpression : String) : generic;</remarks>
            <remarks>operator EvaluateOn(const AServerName : System.Name, const AExpression : String, const AInParams : row) : generic;</remarks>
            <remarks>operator EvaluateOn(const AServerName : System.Name, const AExpression : String, const AInParams : row, var AOutParams : row) : generic;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemExecuteAsNode">
            <remarks>operator ExecuteAs(AScript : System.String, AUserID : System.UserID, APassword : System.String);</remarks>
            <remarks>operator ExecuteAs(AScript : System.String, AUserID : System.UserID, APassword : System.String; const AInParams : row);</remarks>
            <remarks>operator ExecuteAs(AScript : System.String, AUserID : System.UserID, APassword : System.String; const AInParams : row; var AOutParams : row);</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemOpenNode">
            <remarks>operator Open(AExpression : System.String): System.Cursor;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemSleepNode">
            <remarks>operator Sleep(AMilliseconds : integer);</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.NewGuidNode">
            <remarks> operator NewGuid() : Guid </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemGetDefaultDeviceNameNode">
            <remarks>operator GetDefaultDeviceName();</remarks>    
            <remarks>operator GetDefaultDeviceName(ALibraryName : Name);</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemEnableErrorLoggingNode">
            <remarks>operator EnableErrorLogging();</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDisableErrorLoggingNode">
            <remarks>operator EnableErrorLogging();</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemEncryptPasswordNode">
            <remarks>operator System.EncryptPassword(const AString : System.String) : System.String;</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemCreateServerLinkUserNode">
            <remarks>operator CreateServerLinkUser(AUserID : string, AServerLinkName : System.Name, AServerUserID : string, AServerPassword : string); </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemCreateServerLinkUserWithEncryptedPasswordNode">
            <remarks>operator CreateServerLinkUserWithEncryptedPassword(AUserID : string, AServerLinkName : System.Name, AServerUserID : string, AEncryptedServerPassword : string); </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemSetServerLinkUserIDNode">
            <remarks>operator SetServerLinkUserID(AUserID : string, AServerLinkName : System.Name, AServerUserID : string); </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemSetServerLinkUserPasswordNode">
            <remarks>operator SetServerLinkUserPassword(AUserID : string, AServerLinkName : System.Name, APassword : string); </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemChangeServerLinkUserPasswordNode">
            <remarks>operator ChangeServerLinkUserPassword(AServerLinkName : System.Name, AOldPassword : string, APassword : string); </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemDropServerLinkUserNode">
            <remarks>operator DropServerLinkUser(AUserID : string, AServerLinkName : System.Name); </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Instructions.SystemServerLinkUserExistsNode">
            <remarks>operator ServerLinkUserExists(AUserID : string, AServerLinkName : System.Name) : Boolean;</remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Instructions.PropagateAction.True">
            <summary>Modification propagation is determined by the node.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Instructions.PropagateAction.False">
            <summary>Modification will not be propagated.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Instructions.PropagateAction.Ensure">
            <summary>Modification will be propagated as an update if the row exists for an insert, and as an insert if the row exists for an update.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.Instructions.PropagateAction.Ignore">
            <summary>Modification will be propogated only if the row does not exist for an insert.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Instructions.TableNode.PrepareNewRow(Alphora.Dataphor.DAE.Runtime.Program,Alphora.Dataphor.DAE.Runtime.Data.IRow,Alphora.Dataphor.DAE.Runtime.Data.IRow,System.Collections.BitArray@)">
            <summary>Prepares the row given in ANewRow for use in insert or update modification on this node.</summary>
            <remarks>
            If ANewRow is not equivalent to the DataType of this node, a new row will
            be created based on the DataType of this node and populated with the
            values from ANewRow. If AOldRow is not null, it will be used to provide
            values for the newly created row which are not available in ANewRow, if any.
            The row returned from this routine is guaranteed to be equivalent to the DataType of the node.
            Equivalent for row types is strictly stronger than Equality in that the order
            of columns in the type is the same, where this is not necessarily true for row types
            which are Equal.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Instructions.TableNode.Select(Alphora.Dataphor.DAE.Runtime.Program,Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary>Selects a row based on the node and the given values, will return null if no row is found.</summary>
            <remarks>
            Select restricts the result set based on the clustering key of the node, whereas FullSelect restricts
            the result set based on all columns declared of a type that has an equality operator defined.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Instructions.TableNode.FullSelect(Alphora.Dataphor.DAE.Runtime.Program,Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary>Selects a row based on the node and the given values, will return null if no row is found.</summary>
            <remarks>
            Select restricts the result set based on the clustering key of the node, whereas FullSelect restricts
            the result set based on all columns declared of a type that has an equality operator defined.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Instructions.TableNode.CheckConcurrency(Alphora.Dataphor.DAE.Runtime.Program,Alphora.Dataphor.DAE.Runtime.Data.IRow,Alphora.Dataphor.DAE.Runtime.Data.IRow)">
            <summary>Performs an optimistic concurrency check for the given row.</summary>
            <remarks>
            AOldRow may be a different row type than the data type for this node,
            but ACurrentRow will always be a row type with the same heading as the table type
            for this node.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Instructions.TableNode.PrepareOldRow(Alphora.Dataphor.DAE.Runtime.Program,Alphora.Dataphor.DAE.Runtime.Data.IRow,System.Boolean)">
            <summary>Prepares the given row for update or delete modification on this node.</summary>
            <remarks>
            If ARow is not equivalent to the DataType of this node, a new row will be created
            based on the DataType of this node, and the values from ARow will be copied into it.
            This new row will be used to select the full row from the underlying source table.
            If a row is found, the values from ARow will be copied into it, and it will be used
            as the prepared row.  If a row is not found and ACheckConcurrency is true, an
            exception will be raised.  The row returned from this routine is guaranteed to be 
            equivalent to the data type of this node.  Equivalent for row types is strictly 
            stronger than Equality in that the order of columns in the type is the same, 
            where this is not necessarily true for row types which are Equal.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.TableNode.InsertNode">
            <summary>Used as a compiled insert statement to be executed against the device if ModifySupported is true.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.TableNode.UpdateNode">
            <summary>Used as a compiled update statement to be executed against the device if ModifySupported is true.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.TableNode.DeleteNode">
            <summary>Used as a compiled delete statement to be executed against the device if ModifySupported is true.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.TableNode.SelectNode">
            <summary>Used to perform an optimistic concurrency check for processor handled updates.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.TableNode.FullSelectNode">
            <summary>Used to select the row with a restriction on the entire row (at least columns of a type that has an equality operator), not just the key columns.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.TableNode.SelectAllNode">
            <summary>Used to select the row with a restriction on the key columns, and source outside of any A/T.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Instructions.TableVarNode.ExplicitBind">
            <summary>Indicates that this table var node is explicitly bound to the supporting variable for an application transaction and should not be re-bound to the actual table variable when re-compiled as part of a dynamic execution.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.Program">
            <summary>
            Represents the run-time aspects of a compiled D4 program.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Program.ShouldPushLocals">
            <summary>
            Indicates whether or not process local variables should be pushed onto the program's stack.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Program.Source">
            <summary>
            Contains the source text for the program. Only present if no debug locator is provided.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Runtime.Program.Locator">
            <summary>
            Provides a reference for identifying the source text for the program. May be null for dynamic or ad-hoc execution.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Runtime.Program.SetSourceContext(Alphora.Dataphor.DAE.Debug.SourceContext)">
            <summary>
            Sets the source context for the program.
            </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnableToLockObject">
            <summary>Error code 104100: "Unable to obtain the requested lock on catalog object "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.AdminUserTask">
            <summary>Error code 104101: "Only the system administrator can perform this task."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.SystemUserTask">
            <summary>Error code 104102: "Only the system user can perform this task."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.StackEmpty">
            <summary>Error code 104103: "Stack empty."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidStackIndex">
            <summary>Error code 104104: "Stack index out of range ({0})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.DataParamNotFound">
            <summary>Error code 104105: "A parameter named "{0}" was not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ParamsEmpty">
            <summary>Error code 104106: "Parameter stack empty."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NotAcquired">
            <summary>Error code 104107: "Semaphore cannot be released because it has not been acquired."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidLockMode">
            <summary>Error code 104108: "Semaphore cannot be requested in "{0}" mode."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.CursorNotFound">
            <summary>Error code 104109: "Cursor "{0}" not found."</summary>			
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnableToConstructIndexKey">
            <summary>Error code 104110: "Unable to construct index key."</summary>			
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NativeTableNotFound">
            <summary>Error code 104111: "Internal Error: Native table value for table variable "{0}" not found."</summary>			
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.CurrentListSizeExceedsNewSetting">
            <summary>Error code 104112: "Current list size exceeds new setting for maximum number of cursors."</summary>			
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NewValueViolatesMinimumTableCount">
            <summary>Error code 104113: "New value violates minimum table count for a browse node."</summary>			
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NoTopTable">
            <summary>Error code 104114: "Browse table "{0}" has no top table available."</summary>			
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidSearchArgument">
            <summary>Error code 104115: "Search argument must be a subset of the order columns."</summary>			
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.TargetScanDoesNotContainRow">
            <summary>Error code 104116: "Internal Error: AggregateTable.TargetScan does not contain newly inserted row."</summary>			
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnimplementedOrderNode">
            <summary>Error code 104117: "Unimplemented: OrderNode.SequenceColumn."</summary>			
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnimplementedInternalRowCount">
            <summary>Error code 104118: "Unimplemented: BrowseTable.InternalRowCount()."</summary>			
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NewRowNotFound">
            <summary>Error code 104119: "Internal Error: ExplodeTable.InternalNext: Could not locate newly inserted row"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnionTableNewRowNotFound">
            <summary>Error code 104120: "Internal Error: Newly inserted row not found in UnionTable.InternalNext()."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.TableInactive">
            <summary>Error code 104121: "Table "{0}" must be open to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.TableActive">
            <summary>Error code 104122: "Table "{0}" must be closed to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NotBackwardsNavigable">
            <summary>Error code 104123: "Table is not backwards navigable."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NotBookmarkable">
            <summary>Error code 104124: "Table is not bookmarkable."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NotSearchable">
            <summary>Error code 104125: "Table is not searchable."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NotCountable">
            <summary>Error code 104126: "Table is not countable."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NoCurrentRow">
            <summary>Error code 104127: "Table has no current row to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NotUpdateable">
            <summary>Error code 104128: "Table is not updateable."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NotTruncateable">
            <summary>Error code 104129: "Table is not truncateable."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.TableNodeRequired">
            <summary>Error code 104130: "Table node required to create a Table cursor."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.CapabilityNotSupported">
            <summary>Error code 104131: ""{0}" not supported."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidMinInvocation">
            <summary>Error code 104132: "Minimum string value cannot be determined for an empty set."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidMaxInvocation">
            <summary>Error code 104133: "Maximum string value cannot be determined for an empty set."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.HeapRefNodeExecuted">
            <summary>Error code 104134: "Internal Error: HeapReferenceNode should never be executed."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.CatalogRefNodeExecuted">
            <summary>Error code 104135: "Internal Error: CatalogReferenceNode should never be executed."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.PropertyRefNodeExecuted">
            <summary>Error code 104136: "Internal Error: PropertyReferenceNode should never be executed."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NoSupportingDevice">
            <summary>Error code 104137: "Device "{0}" does not support retrieval for the table variable "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.StatementNotSupported">
            <summary>Error code 104138: "Statement extraction not supported for plan node "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InstructionExecuteNotSupported">
            <summary>Error code 104139: "Instruction execution not supported for plan node "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.RowTableEmpty">
            <summary>Error code 104140: "Row value cannot be extracted from an empty table."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ColumnTableEmpty">
            <summary>Error code 104141: "Column value cannot be extracted from an empty table."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.PresentationEmpty">
            <summary>Error code 104142: "Column value cannot be extracted from an empty presentation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NewRowViolatesRestrictPredicate">
            <summary>Error code 104143: "The new row does not meet the specified filter criteria."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.AggregateOperatorNotFound">
            <summary>Error code 104144: "Unable to resolve aggregate operator reference "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.BrowseVariantNotFound">
            <summary>Error code 104145: "Internal Error: Browse variant not found: Origin index: ({0}), Forward: ({1}), Inclusive: ({2})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.RowViolatesDifferencePredicate">
            <summary>Error code 104146: "New row violates difference predicate."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.RowViolatesJoinPredicate">
            <summary>Error code 104147: "New row violates join predicate."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.TableExpressionsNotProductCompatible">
            <summary>Error code 104148: "Table expressions contain common column names and cannot be used in a times expression."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.TableExpected">
            <summary>Error code 104149: "Table value expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.CatalogConstraintViolation">
            <summary>Error code 104150: "Violation of catalog constraint "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InsertConstraintViolation">
            <summary>Error code 104151: "Violation of insert transition for constraint "{0}" defined on table "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UpdateConstraintViolation">
            <summary>Error code 104152: "Violation of update transition for constraint "{0}" defined on table "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.DeleteConstraintViolation">
            <summary>Error code 104153: "Violation of delete transition for constraint "{0}" defined on table "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.RowConstraintViolation">
            <summary>Error code 104154: "Violation of row constraint "{0}" defined on table "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.TypeConstraintViolation">
            <summary>Error code 104155: "Violation of constraint "{0}" defined on scalar type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ColumnValueRequired">
            <summary>Error code 104156: "Value required for column "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.OptimisticConcurrencyCheckRowNotFound">
            <summary>Error code 104157: "Optimistic concurrency check failed.  Row could not be located for concurrency check."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnableToPerformInsert">
            <summary>Error code 104158: "Unable to perform insert."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnableToPerformUpdate">
            <summary>Error code 104159: "Unable to perform update."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnableToPerformDelete">
            <summary>Error code 104160: "Unable to perform delete."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.TableNodeInternalExecute">
            <summary>Error code 104161: "Table node internal execute cannot be invoked."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.DeviceNameExpected">
            <summary>Error code 104162: "Device name expected in Reconcile operator."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.DDLNodeCannotBeCloned">
            <summary>Error code 104163: "DDL node cannot be cloned."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ConstraintViolation">
            <summary>Error code 104164: "Constraint "{0}" cannot be created because data exists which violates the constraint."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ReferenceConstraintViolation">
            <summary>Error code 104165: "Reference "{0}" cannot be created because rows exist which violate the constraint."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnimplementedCreateCommand">
            <summary>Error code 104166: "{0} cannot be created in this release."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnimplementedAlterCommand">
            <summary>Error code 104167: "{0} cannot be altered in this release."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnimplementedDropCommand">
            <summary>Error code 104168: "{0} cannot be dropped in this release."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.DefaultDefined">
            <summary>Error code 104169: "Column "{0}" in table "{1}" already has a default defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.DefaultNotDefined">
            <summary>Error code 104170: "Column "{0}" in table "{1}" does not have a default defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidAlterTableVarStatement">
            <summary>Error code 104171: "Invalid alter statement."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ObjectNotTableVar">
            <summary>Error code 104172: "Object "{0}" is not a table variable."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ObjectNotTable">
            <summary>Error code 104173: "Object "{0}" is not a table."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ObjectNotView">
            <summary>Error code 104174: "Object "{0}" is not a view."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ObjectNotScalarType">
            <summary>Error code 104175: "Object "{0}" is not a scalar type."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ObjectNotAggregateOperator">
            <summary>Error code 104176: "Object "{0}" is not an aggregate operator."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ObjectNotConstraint">
            <summary>Error code 104177: "Object "{0}" is not a constraint."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ObjectNotReference">
            <summary>Error code 104178: </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ObjectNotServer">
            <summary>Error code 104179: "Object "{0}" is not a server link."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ObjectNotDevice">
            <summary>Error code 104180: "Object "{0}" is not a device."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ObjectIsSystem">
            <summary>Error code 104182: "Object "{0}" is a system object and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.DeviceInUse">
            <summary>Error code 104183: "Device "{0}" is in use and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnsupportedValueType">
            <summary>Error code 104184: "Statement extraction not supported for values of type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InternalMustBeTableNode">
            <summary>Error code 104185: "Internal: DerivedTableVarNode source must be a TableNode descendent."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InternalUnknownTableVariableClass">
            <summary>Error code 104186: "Internal Error: Unknown table variable class."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.SetNotOrdered">
            <summary>Error code 104187: "Set is not ordered."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.SetShouldBeBOF">
            <summary>Error code 104188: "Set should be BOF."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.DataConstraintViolation">
            <summary>Error code 104191: "Violation of constraint "{0}".{1}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidGeneratorsTable">
            <summary>Error code 104192: "Generators table must be of type "table { ID : string, NextKey : integer, key { ID } }"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.TableIsGenerators">
            <summary>Error code 104193: "Table "{0}" is functioning as the generators table and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InternalError">
            <summary>Error code 104194: "Internal Error: {0}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidCast">
            <summary>Error code 104195: "Cannot cast a value of type "{0}" to type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.OptimisticConcurrencyCheckFailed">
            <summary>Error code 104196: "Optimistic concurrency check failed.  Row has been updated by another user."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidRowJoin">
            <summary>Error code 104197: "Rows being joined have common columns, and do not have common values for those columns."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.CursorValueCannotBeCopied">
            <summary>Error code 104198: "Cursor value cannot be copied."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.RowManagerOverflow">
            <summary>Error code 104200: "Maximum row count exceeded in row manager."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ScalarManagerOverflow">
            <summary>Error code 104201: "Maximum scalar count exceeded in scalar manager."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.SemaphoreTimeout">
            <summary>Error code 104202: "Timed out waiting for semaphore."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.LockTimeout">
            <summary>Error code 104203: "Timed out waiting for {0} lock on "{1}" owned by "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidVersionNumberComponent">
            <summary>Error code 104205: "Version number components must be greater than or equal to -1."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidVersionNumber">
            <summary>Error code 104206: "Version number components must be defined in order (major, minor, revision, build).</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ColumnConstraintViolation">
            <summary>Error code 104207: "Violation of column constraint "{0}" on column "{1}" of table "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ErrorValidatingTypeConstraint">
            <summary>Error code 104208: "Exceptions occurred while attempting to validate constraint "{0}" defined on scalar type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ErrorValidatingColumnConstraint">
            <summary>Error code 104209: "Exceptions occurred while attempting to validate constraint "{0}" defined on column "{1}" in table "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ErrorValidatingRowConstraint">
            <summary>Error code 104210: "Exceptions occurred while attempting to validate row constraint "{0}" defined on table "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ErrorValidatingInsertConstraint">
            <summary>Error code 104211: "Exceptions occurred while attempting to validate insert transition for constraint "{0}" defined on table "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ErrorValidatingUpdateConstraint">
            <summary>Error code 104212: "Exceptions occurred while attempting to validate update transition for constraint "{0}" defined on table "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ErrorValidatingDeleteConstraint">
            <summary>Error code 104213: "Exceptions occurred while attempting to validate delete transition for constraint "{0}" defined on table "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ErrorValidatingCatalogConstraint">
            <summary>Error code 104214: "Exceptions occurred while attempting to validate catalog constraint "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ErrorValidatingConstraint">
            <summary>Error code 104215: "Exceptions occurred while attempting to validate constraint "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.StackOverflow">
            <summary>Error code 104216: "Maximum stack depth ({0}) has been exceeded."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.LibraryRegistrationFailed">
            <summary>Error code 104217: "Exceptions occurred while attempting to run the registration script for library "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.LibraryRollbackFailed">
            <summary>Error code 104218: "Exceptions occurred while attempting to rollback library registration for library "{0}": {1}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NonNilConstraintViolation">
            <summary>Error code 104219: "Column "{0}" in table "{1}" cannot be marked non-nil because rows exist which have no values for this column."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidValueType">
            <summary>Error code 104220: "Invalid value type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnableToConvertValue">
            <summary>Error code 104221: "Unable to convert a value of type "{0}" to a value of type "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnableToProvideStreamAccess">
            <summary>Error code 104222: "Unable to provide stream access for a value of type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnableToProvideCursorAccess">
            <summary>Error code 104223: "Unable to provide cursor access for a value of type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.UnpreparedWriteToPhysicalCall">
            <summary>Error code 104224: "Internal Error: Unprepared call of method WriteToPhysical."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ReadOnlyRepresentation">
            <summary>Error code 104225: "Representation "{0}" of scalar type "{1}" is read only."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ScalarTypeDefaultDefined">
            <summary>Error code 104226: "Scalar type "{0}" already has a default defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ScalarTypeDefaultNotDefined">
            <summary>Error code 104227: "Scalar type "{0}" does not have a default defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NoSupportingModificationDevice">
            <summary>Error code 104228: "No supporting device for modification of the expression "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.RuntimeError">
            <summary>Error code 104229: "Runtime error: {0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.NilEncountered">
            <summary>Error code 104230: "A nil was encountered where a value was expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.ValueEncountered">
            <summary>Error code 104231: "A value was encountered where a nil was expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.GeneralConstraintViolation">
            <summary>Error code 104232: "{0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidCharacteristicOverride">
            <summary>Error code 104233: "Stated characteristics ({0}) do not match actual characteristics ({1})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.RowViolatesQuotaPredicate">
            <summary>Error code 104234: "New row violates quota predicate."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.RowViolatesHavingPredicate">
            <summary>Error code 104235: "New row violates having predicate."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.RowViolatesWithoutPredicate">
            <summary>Error code 104236: "New row violates without predicate."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidLength">
            <summary>Error code 104237: "Invalid length argument provided.  The length cannot be a negative value."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.CallOverflow">
            <summary>Error code 104238: "Maximum call depth ({0}) has been exceeded."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Runtime.RuntimeException.Codes.InvalidRowExtractorExpression">
            <summary>Error code 104239: "Row extractor expression must reference a table expression with at most one row.  Use a restriction or quota query to limit the number of rows in the source table expression."</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.IValueManager">
            <summary>
            Provides value management services for processes within the DAE.
            </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Runtime.ValueManager">
            <summary>
            Provides value management services for processes within the DAE.
            </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.Catalog">
            <summary> Catalog </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Catalog.TimeStamp">
            <summary>This time stamp is used to coordinate the catalog device cache tables with the actual system catalog.</summary>
            <remarks>
            This time stamp is incremented whenever any catalog changing event takes place.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Catalog.UpdateTimeStamp">
            <summary>Updates the catalog device cache coordination timestamp for this catalog.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Catalog.CacheTimeStamp">
            <summary>This timestamp is used to coordinate client-side catalog caches.</summary>
            <remarks>
            This timestamp is incremented whenever a change is made to an existing object that is potentially stored in a client-side cache.
            For a more complete description of this property, refer to the CLI documentation.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Catalog.UpdateCacheTimeStamp">
            <summary>Updates the client-side cache coordination timestamp for this catalog.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Catalog.PlanCacheTimeStamp">
            <summary>This timestamp is used to coordinate the server-side plan cache.</summary>
            <remarks>
            This timestamp is incremented whenever a change is made to an existing object that is potentially referenced by a cached plan.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Catalog.UpdatePlanCacheTimeStamp">
            <summary>Updates the server-side plan cache coordination timestamp for this catalog.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Catalog.DerivationTimeStamp">
            <summary>This timestamp is used to coordinate the derivation cache maintained by the Frontend server.</summary>
            <remarks>
            This timestamp is incremented whenever a change is made that could affect a derived paged stored in the Frontend server derivation cache.
            For a more complete description of this property, refer to the CLI documentation.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Catalog.UpdateDerivationTimeStamp">
            <summary>Updates the derivation cache coordination timestamp for this catalog.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Catalog.EmitStatement(Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession,Alphora.Dataphor.DAE.Language.D4.EmitMode,System.String[],System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Emits a statement to reconstruct the catalog based on the given parameters.</summary>
            <param name="mode">Specifies the mode for statement emission.</param>
            <param name="requestedObjectNames">Specifies a list of object names to be serialized.  If this list is empty, the entire catalog is emitted.</param>
            <param name="libraryName">Specifies the name of the library to be emitted.  If this is the empty string, the system library will be emitted.</param>
            <param name="includeSystem">Specifies whether system objects should be included in the emitted catalog.</param>
            <param name="includeDependents">Specifies whether the dependents of the objects should be included in the emitted catalog.</param>
            <param name="includeObject">Specifies whether the object itself should be included in the emitted catalog.</param>
            <remarks>
            This is the main EmitStatement overload which all other EmitStatement overloads call.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Catalog.EmitStatement(Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession,Alphora.Dataphor.DAE.Language.D4.EmitMode,System.Boolean)">
            <summary>Emits a statement to reconstruct the entire catalog.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Catalog.EmitStatement(Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession,Alphora.Dataphor.DAE.Language.D4.EmitMode,System.String,System.Boolean)">
            <summary>Emits a statement to reconstruct the catalog for the given library.</summary>        
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Catalog.EmitStatement(Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession,Alphora.Dataphor.DAE.Language.D4.EmitMode,System.String[])">
            <summary>Emits a statement to reconstruct the specified list of catalog objects.</summary>        
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.Column">
            <remarks> Provides the representation for a column header (Name:DataType) </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.Columns">
            <remarks> Provides a container for Column objects </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Columns.IndexOfColumn(System.String)">
            <summary>Returns the index of the given column name, resolving first for the full name, then for a partial match.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Columns.GetIndexOfColumn(System.String)">
            <summary>Returns the index of the given column name, resolving first for the full name, then for a partial match.  Throws an exception if the column name is not found.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.SchemaComparer">
            <summary>Performs schema comparisons.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.ConstraintType.ScalarType">
            <summary>A scalar type constraint is a truth valued expression which limits the set of values in a scalar type.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.ConstraintType.Column">
            <summary>A Column constraint is a truth valued expression which limits the set of values on a column.  This constraint functions in addition to the type specification of the column, and is equivalent to a row constraint except that it is evaluable in terms of the column only.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.ConstraintType.Row">
            <summary>A Row constraint is a truth valued expression which limits the set of rows permissible in a table.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.ConstraintType.Table">
            <summary>A table constraint is a declarative construct which limits the set of rows permissible in a table such as a key.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.ConstraintType.Database">
            <summary>A database constraint is a truth valued expression which limits the set of table values permissible in the database.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.Constraint">
            <remarks> Constraint </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Constraint.IsDeferred">
            <summary>Indicates whether or not the constraint check should be deferred to transaction commit time.</summary>
            <remarks>
            Only database level constraints can be deferred.  By default all database level constraints are deferred.
            To change this behavior, use the DAE.IsDeferred tag.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Constraint.Enforced">
            <summary>Indicates whether or not the constraint is enforced.</summary>
            <remarks>Set by the DAE.Enforced tag when the constraint is created.</remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.TableVarConstraint.IsPersistent">
            <summary>Table var constraints are always persistent.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.TableVarConstraint.ShouldValidate(System.Collections.BitArray,Alphora.Dataphor.DAE.Schema.Transition)">
            <summary>Returns whether or not the constraint needs to be validated for the specified transition given the specified value flags.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.RowConstraint.ColumnFlags">
            <summary>If specified, indicates which columns are referenced by the constraint</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.RowConstraint.ShouldValidate(System.Collections.BitArray,Alphora.Dataphor.DAE.Schema.Transition)">
            <summary>Returns whether or not the constraint needs to be validated given the specified value flags.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.RowConstraints">
            <remarks> RowConstraints </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.TransitionConstraint.InsertColumnFlags">
            <summary>If specified, indicates which columns are referenced by the insert constraint</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.TransitionConstraint.UpdateColumnFlags">
            <summary>If specified, indicates which columns are referenced by the update constraint</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.TransitionConstraint.DeleteColumnFlags">
            <summary>If specified, indicates which columns are referenced by the delete constraint</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.TransitionConstraint.ShouldValidate(System.Collections.BitArray,Alphora.Dataphor.DAE.Schema.Transition)">
            <summary>Returns whether or not the constraint needs to be validated given the specified value flags.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.TransitionConstraints">
            <remarks> TransitionConstraints </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.Constraints`1">
            <remarks> Constraints </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.CatalogConstraint.Enforced">
            <summary>Indicates whether or not the constraint is enforced.</summary>
            <remarks>Set by the DAE.Enforced tag when the constraint is created.</remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.CatalogConstraint.IsDeferred">
            <summary>Indicates whether or not the constraint check should be deferred to transaction commit time.</summary>
            <remarks>
            Only database level constraints can be deferred.  By default all database level constraints are deferred.
            To change this behavior, use the DAE.IsDeferred tag.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.CatalogConstraints">
            <remarks> CatalogConstraints </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.Default">
            <remarks> Default </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.DeviceScalarType.ToScalar(Alphora.Dataphor.DAE.Runtime.IValueManager,System.Object)">
            <summary>Override this method to provide transformation services to the device for a particular data type.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.DeviceScalarType.FromScalar(Alphora.Dataphor.DAE.Runtime.IValueManager,System.Object)">
            <summary>Override this method to provide transformation services to the device for a particular data type.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.DeviceScalarType.GetStreamAdapter(Alphora.Dataphor.DAE.Runtime.IValueManager,System.IO.Stream)">
            <summary>Override this method to provide transformation services to the device for stream access data types.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Device.SetRegistered">
            <summary>Used for backwards compatibility only</summary>
            <remarks>
            This method is used to force the registered flag to be set for devices that have already been registered but were saved to the
            catalog before the existence of the registered flag. This method will be deprecated in a future release.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Device.ClearRegistered">
            <summary>Used by the catalog device to undo the effects of the register call</summary>
            <remarks>
            This method is only used by the transactional DDL mechansim of the catalog device to ensure that the effects of the register
            are rolled back.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Device.ResolveDeviceOperator(Alphora.Dataphor.DAE.Compiling.Plan,Alphora.Dataphor.DAE.Schema.Operator)">
            <summary>Resolves the operator map for the given operator, caching it if it exists. Returns null if the operator is not mapped.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Device.HasDeviceOperator(Alphora.Dataphor.DAE.Schema.Operator)">
            <summary>Returns true if this device contains a mapping for the given operator, and it is in the cache.</summary>
            <remarks>
            Note that this method does not perform any resolution. It is only used for cache maintenance.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Device.AddDeviceOperator(Alphora.Dataphor.DAE.Schema.DeviceOperator)">
            <summary>Adds the given operator map to the cache.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Device.RemoveDeviceOperator(Alphora.Dataphor.DAE.Schema.DeviceOperator)">
            <summary>Removes the given operator map from the cache.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Device.ResolveDeviceScalarType(Alphora.Dataphor.DAE.Compiling.Plan,Alphora.Dataphor.DAE.Schema.ScalarType)">
            <summary>Returns the scalar type map for the given scalar type, caching it if it exists. Returns null if the scalar type is not mapped.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Device.HasDeviceScalarType(Alphora.Dataphor.DAE.Schema.ScalarType)">
            <summary>Returns true if this device contains a mapping for the given scalar type and it is in the cache.</summary>
            <remarks>
            Note that this method does not perform any resolution. It is only used for cache maintenance.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Device.AddDeviceScalarType(Alphora.Dataphor.DAE.Schema.DeviceScalarType)">
            <summary>Adds the given scalar type map to the cache.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Device.RemoveDeviceScalarType(Alphora.Dataphor.DAE.Schema.DeviceScalarType)">
            <summary>Removes the given scalar type map from the cache.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Device.RequiresAuthentication">
            <summary>Indicates whether the device will attempt to resolve a device user when establishing a connection.</summary>
            <remarks>
            For the internal devices such as the catalog, temp, and A/T devices, the DAE manages access security, and no
            user device mapping is required.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.EventHandler.IsDeferred">
            <summary>Indicates whether or not the execution of this handler should be deferred to transaction commit time.</summary>
            <remarks>
            Event handlers can only be deferred if they are handling the after table variable modification events.
            Event handlers attached to these types of modification events are deferred by default if they access global state.
            To set whether or not an event handler is deferred, use the DAE.IsDeferred tag.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.EventHandler.ShouldTranslate">
            <summary>Indicates whether or not this handler should be invoked in an application transaction.</summary>
            <remarks>
            By default, all event handlers except after table event handlers are translated into an application transaction.  
            If a given handler is invoked within an application transaction, it will not be invoked when the application 
            transaction is committed. To disable application transaction translation of an event handler, 
            use the DAE.ShouldTranslate tag.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.EventHandlers`1">
            <remarks> EventHandlers </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.Libraries">
            <remarks> Libraries </remarks>
        </member>
        <member name="E:Alphora.Dataphor.DAE.Schema.Libraries.OnLibraryCreated">
            <summary>Occurs whenever a library is created in the DAE.</summary>		
        </member>
        <member name="E:Alphora.Dataphor.DAE.Schema.Libraries.OnLibraryAdded">
            <summary>Occurs whenever a library is added to the list of available libraries in the DAE.</summary>
        </member>
        <member name="E:Alphora.Dataphor.DAE.Schema.Libraries.OnLibraryRemoved">
            <summary>Occurs whenever a library is removed from the list of available libraries in the DAE.</summary>
        </member>
        <member name="E:Alphora.Dataphor.DAE.Schema.Libraries.OnLibraryRenamed">
            <summary>Occurs whenever a library is renamed in the DAE.</summary>
        </member>
        <member name="E:Alphora.Dataphor.DAE.Schema.Libraries.OnLibraryDeleted">
            <summary>Occurs whenever a library is deleted in the DAE.</summary>
        </member>
        <member name="E:Alphora.Dataphor.DAE.Schema.Libraries.OnLibraryLoaded">
            <summary>Occurs whenever a library is registered or loaded in the DAE.</summary>
        </member>
        <member name="E:Alphora.Dataphor.DAE.Schema.Libraries.OnLibraryUnloaded">
            <summary>Occurs whenever a library is unregistered or unloaded in the DAE.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.LoadedLibrary.IsRequiredLibrary(Alphora.Dataphor.DAE.Schema.LoadedLibrary)">
            <summary>Returns true if ALibrary is the same as this library, or is required by this library.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.LoadedLibraries">
            <remarks> LoadedLibraries </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.NameResolutionPath">
            <summary>
            NameResolutionPath is a list of LoadedLibraries lists.  
            Each element is the unique set of library dependencies at the level given by the index in the list above the library.
            The first element contains only the library of the name resolution path.
            </summary>    
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Operator.OperandsChanged">
            <summary>Forces the signature to be recreated.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Operator.MangledName">
            <summary>Returns the mangled name of the operator.</summary>
            <remarks>
            Used to reference the operator by a unique name independent of it's object id.
            Because the mangled name may exceed the maximum identifier length, this is only useful for
            in-memory resolution, it is not used as a persistent reference to the operator.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Operator.GetLocator(Alphora.Dataphor.DAE.Language.D4.MetaData)">
            <summary>
            Parses the DebugLocator from the DAE.Locator tag, if present.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Operator.ShouldTranslate">
            <summary>Indicates whether or not this operator should be translated into an application transaction.</summary>
            <remarks>
            By default, operators are translated into an application transaction if they are not host-implemented, 
            access global state, and are not functional.  To change this behavior, use the DAE.ShouldTranslate tag.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ReferenceBase.Enforced">
            <summary>Indicates whether or not the constraint is enforced.</summary>
            <remarks>Set by the DAE.Enforced tag when the constraint is created.</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ReferenceBase.OriginatingReferenceName">
            <summary>For derived references, this is the base reference from which this reference was derived. Otherwise, this is the reference name.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.DerivedReference.ParentReference">
            <summary>For derived references, this is the reference from which this reference was derived.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.DerivedReference.IsExcluded">
            <summary>True if this reference has been excluded by some operation in the expression.</summary>
            <remarks>
            Excluded references should not be considered as an inferred reference, but need to be tracked so
            that the exclusion algorithm for joins works properly through multiple joins. Note that IsExcluded
            is only valid for derived references.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.DerivedReference.OriginatingReferenceName">
            <summary>For derived references, this is the base reference from which this reference was derived. Otherwise, this is the reference name.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.References">
            <remarks> References </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.RowType">
            <remarks> Representation of a row header </remarks>    
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.Properties">
            <remarks> Properties </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Representation.IsPersistent">
            <summary>A represntation is persistent if it has external dependencies.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Representation.HasExternalDependencies">
            <summary>Returns true is this representation is not the system provided representation and this representation or any of its properties have dependencies on something other than the like type.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.Representations">
            <remarks> Representations </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Sort.Equivalent(Alphora.Dataphor.DAE.Schema.Sort)">
            <summary>Returns true if the compare expression for this sort is syntactically equivalent to the compare expression of the given sort.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ScalarConversionPath.Conversion">
            <summary>The initial conversion for this conversion path.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.ScalarConversionPath.NarrowingScore">
            <summary>Indicates the degree of narrowing that will occur on this conversion path.  Each narrowing conversion encountered along the path decreases the narrowing score by 1.  If no narrowing conversions occur along this path, then this number is 0. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ScalarConversionPath.Contains(Alphora.Dataphor.DAE.Schema.ScalarType)">
            <summary>Returns true if this path goes through the given scalar type.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ScalarConversionPaths.BestNarrowingScore">
            <summary>Indicates the best narrowing score encountered so far.  Conversion paths with lower narrowing scores than this need not be pursued any further.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ScalarConversionPaths.ShortestLength">
            <summary>Indicates the shortest path length among paths with the current BestNarrowingScore.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ScalarConversionPaths.BestPaths">
            <summary>Contains the set of conversion paths with the current best narrowing score.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ScalarConversionPaths.CanConvert">
            <summary>Returns true if there is only one conversion path with the best narrowing score and shortest length, false otherwise.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ScalarConversionPaths.BestPath">
            <summary>Returns the single conversion path with the best narrowing score and shortest path length, null if there are multiple paths with the same narrowing score and path length.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ScalarConversionPathCache.Clear">
            <summary>Clears the entire conversion path cache.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ScalarConversionPathCache.Clear(Alphora.Dataphor.DAE.Schema.ScalarType)">
            <summary>Removes any cache entries for conversion paths which reference the specified scalar type.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ScalarConversionPathCache.Clear(Alphora.Dataphor.DAE.Schema.Conversion)">
            <summary>Removes any cache entries for conversion paths which reference the specified conversion.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Special.IsPersistent">
            <summary>Specials are always persistent.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.Specials">
            <remarks> Specials </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.ScalarType">
            <remarks> Implements the representation of scalar data types. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ScalarType.FromClassDefinition">
            <summary>
            Gets or sets the class definition describing the native type representation for an imported scalar type.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ScalarType.ClassDefinition">
            <summary>
            Gets or sets the class definition describing the conveyor class for the type.
            </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.ScalarTypes">
            <remarks> ScalarTypes </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.ObjectList">
            <summary>Maintains a set of objects by ID, with the ability to resolve a reference if necessary, caching that reference.</summary>
            <remarks>This class is used to track dependencies for catalog objects while they are in the cache.</remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ObjectList.IDs">
            <summary>Provides access to the IDs of the objects in the list, by index.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ObjectList.Objects">
            <summary>Provides access to the references to the objects in the list, by index.</summary>
            <remarks>Note that the object reference may be null if it has not yet been resolved to an actual object reference in the catalog.</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.Ensure(System.Int32,Alphora.Dataphor.DAE.Schema.Object)">
            <summary>Ensures that the given object ID and object reference is in the list. AObject may be a null reference.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.Ensure(System.Int32)">
            <summary>Ensures that the given ID is in the list, adding it with a null reference if necessary.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.Ensure(Alphora.Dataphor.DAE.Schema.Object)">
            <summary>Ensures that the given object is in the list by ID, adding the reference as well. AObject may not be a null reference.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.Add(System.Int32,Alphora.Dataphor.DAE.Schema.Object)">
            <summary>Adds the given ID and object reference to the list. If the list already has an entry for AID, an exception is raised. AObject may be a null reference.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.Add(Alphora.Dataphor.DAE.Schema.Object)">
            <summary>Adds the given object to the list by ID, adding the reference as well. AObject may not be a null reference.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.ResolveObject(Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession,System.Int32)">
            <summary>Retrieves the object reference for the object at the given index in this list.</summary>
            <remarks>
            If the object reference is already available in the list, it is used. 
            Otherwise, the given catalog device session is used to resolve the object 
            reference by ID.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.CopyTo(Alphora.Dataphor.DAE.Schema.ObjectList)">
            <summary>Copies the contents of this object list to AObjectList.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.Add(System.Int32)">
            <summary>Adds the given ID to the list with a null reference for the object. If the ID is already in the list, an exception is raised.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.Clear">
            <summary>Clears the IDs and object references for this object list.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.Contains(System.Int32)">
            <summary>Returns true if the list contains the given ID, false otherwise.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.CopyTo(System.Int32[],System.Int32)">
            <summary>This method is not implemented, calling it will throw an exception.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ObjectList.Count">
            <summary>Returns the number of items in the list.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ObjectList.IsReadOnly">
            <summary>Always returns false.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ObjectList.Remove(System.Int32)">
            <summary>Removes the given ID and its associated object reference, if any, from the list. Returns true if the object was in the list, false otherwise.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.ObjectBase">
            <summary>
            Simple base object containing only a name.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.ObjectBase.Name">
            <summary>The name of the object.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.Object">
            <summary>The abstract base class for all schema objects in the catalog cache.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.ID">
            <summary>Auto generated surrogate key for the object.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.CatalogObjectID">
            <summary>The ID of the catalog object that ultimately contains this object, if this is not a catalog object.</summary>
            <remarks>
            For all catalog objects, the value of this property is -1. For all non-catalog objects, the
            value of this property is the ID of the catalog object that ultimately contains this object. For example,
            a column will have a the ID of the table it is part of as the CatalogObjectID. A default on that column
            will also have the ID of the table as the CatalogObjectID, but would have the ID of the containing column
            as the value of the ParentObjectID property.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.ParentObjectID">
            <summary>The ID of the schema object that immediately contains this object, if this is not a catalog object.</summary>
            <remarks>
            For all catalog objects, the value of this property is -1. For all non-catalog objects, the
            value of this property is the ID of the schema object that immediately contains this object. For example,
            a column will have the ID of the table it is part of as the ParentObjectID. A default on that column,
            however, will have the ID of the column as the ParentObjectID, but would have the ID of the table
            as the value of the CatalogObjectID property.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.DisplayName">
            <summary>Returns a user-friendly name for the object.</summary>
            <remarks>
            The DisplayName property is the same as the Name property with the following exceptions:
            	Device maps have an internally unique name, so the DisplayName for these objects is built using the device name and the name of the object being mapped.
            	The DisplayName for session-specific objects is the name of the object in the session in which it was created.
            	The DisplayName for application-transaction-specific objects is the DisplayName of the object being mapped into the application transaction context.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.Description">
            <summary>Returns a more detailed description of the object.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.IsSystem">
            <summary>Returns true if this object is part of the system catalog created and managed by the system, false otherwise.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.Generator">
            <summary>A reference to the object that generated this object.</summary>
            <remarks>Should only be accessed directly for management. To select the generator, use ResolveGenerator.</remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.GeneratorID">
            <summary>The ID of the object responsible for generating this object, if this is a generated object.</summary>
            <remarks>
            If this is a generated object, this will be the ID of the object that generated it. Otherwise, this property will be -1.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.IsGenerated">
            <summary>Returns true if this object was generated by the compiler, rather than explicitly created by a DDL statement, false otherwise.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.IsSessionObject">
            <summary>Returns true if this is a session-specific object, false otherwise.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.IsATObject">
            <summary>Returns true if this is an application-transaction-specific object, false otherwise.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.IsPersistent">
            <summary>Returns true if this object is persisted independently, false otherwuise.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.MetaData">
            <summary>The MetaData for this object.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.MergeMetaData(Alphora.Dataphor.DAE.Language.D4.MetaData)">
            <summary>Merges all tags from the given MetaData into the metadata for this object.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.InheritMetaData(Alphora.Dataphor.DAE.Language.D4.MetaData)">
            <summary>References each dynamic tag in the given metadata, if the metadata for this object does not already contain it.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.JoinMetaData(Alphora.Dataphor.DAE.Language.D4.MetaData)">
            <summary>Joins each dynamic tag in the given meatadata to the metadata for this object, using copy semantics.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.JoinInheritMetaData(Alphora.Dataphor.DAE.Language.D4.MetaData)">
            <summary>Joins each dynamic tag in the given metadata to the metadata for this object, using reference semantics.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Object.IsRemotable">
            <summary>Determines whether this object can be transported across the remoting boundary.</summary>
            <remarks>
            A catalog object is considered remotable by default
            Remotable rules per object type ->
            	Constraint -> Remotable if all dependencies are remotable.
            	Default -> Remotable if all dependencies are remotable.
            	Sort -> Remotable if all dependencies are remotable.
            	Column -> Remotable if its type is remotable as well as its defaults and constraints.
            	ScalarType -> Remotable if all dependencies are remotable, as well as its defaults, constraints, representations and specials.
            	RowType -> Remotable if all columns are remotable
            	TableType -> Remotable if all dependencies are remotable, as well as its columns and constraints.
            	ListType -> Remotable if all dependencies are remotable.
            	CursorType -> Remotable if all dependencies are remotable.
            	Representation -> Remotable if its selector and all its properties are remotable.
            	Property -> Remotable if its accessors are remotable.
            	Special -> Remotable if all dependencies are remotable.
            	Order -> Remotable if all columns are remotable.
            	OrderColumn -> Remotable if the column it refers to is remotable.
            	Reference -> Not remotable, as it references nonremotable objects.
            	TableVar -> Not remotable
            	Operand -> Remotable if all dependencies are remotable.
            	Operator -> Remotable if all dependencies are remotable.
            	Device -> Not remotable.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.MangleQualifiers(System.String)">
            <summary>Replaces all qualifiers in the given name with an underscore.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.Dequalify(System.String)">
            <summary>Removes one level of qualification from the given identifier.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.Unqualify(System.String)">
            <summary>Returns the unqualified identifier.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.Qualifier(System.String)">
            <summary>Returns the qualifier of the given name.  If the name does not contain a qualifier, the empty string is returned.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.IsQualified(System.String)">
            <summary> Returns true if the given identifier isn't qualified (not including the root).</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.RemoveQualifier(System.String,System.String)">
            <summary>Returns the given name with the given qualifier removed.  If the name does not begin with the given qualifier, the given name is returned unchanged.  If the name is equal to the given qualifier, the empty string is returned.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.EnsureDescriptionLength(System.String)">
            <summary>Ensures that the given description is not longer than the maximum description length.</summary>
            <remarks>
            If the given description is longer than the maximum object description length (200 characters), the first
            200 characters less the length of the ellipsis mark (...), or 197 characters, is returned with the ellipsis
            mark appended. Otherwise, the description is returned unchanged.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.EnsureNameLength(System.String)">
            <summary>Ensures that the given name is not longer than the maximum object name length.</summary>
            <remarks>
            If the given name is longer than the maximum object name length (200 characters), the first 200 characters of the
            name are returned. Otheriwse, the name is returned unchanged.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.GetObjectID(Alphora.Dataphor.DAE.Language.D4.MetaData)">
            <summary>Gets the object id from the given meta data and removes the DAE.ObjectID tag, if it exists. Otherwise, returns the value of GetNextObjectID().</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Object.SaveObjectID">
            <summary>Ensures that the object has metadata and a DAE.ObjectID tag with the id of the object.</summary>		
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.ObjectHeader">
            <summary>ObjectHeader</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.DependentObjectHeaders.Contains(System.Int32)">
            <summary>Returns true if this list contains a header with the given ID.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.DependentObjectHeader">
            <summary>DependentObjectHeader</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.FullObjectHeaders._headerHash">
            <summary>Stores the index of the header with a given ID.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.FullObjectHeaders.Contains(System.Int32)">
            <summary>Returns true if this list contains a header with the given ID.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.FullObjectHeader">
            <summary>FullObjectHeader</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.BaseObjects`1.RolloverCount">
            <value>
            An integer value indicating at what size to begin maintenance of secondary indexes on the objects in the list.  
            A value of Int32.MaxValue indicates no maintenance is to be performed.  This value is defaulted to 20.
            </value>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.CatalogObject.IsOwner(Alphora.Dataphor.DAE.Schema.User)">
            <summary>Returns true if AUser is the owner of this object, or is a member of a parent Group of the owner of this object, recursively.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.CatalogObject.IsPersistent">
            <summary>Catalog objects are always persistent.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ObjectCannotBeCopied">
            <summary>Error code 113100: "Object "{0}" cannot be copied into a remote catalog."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.StatementCannotBeEmitted">
            <summary>Error code 113101: "Statement cannot be emitted for schema objects of type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ReferenceCannotBeNull">
            <summary>Error code 113102: "Object reference cannot be null."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ObjectContainer">
            <summary>Error code 113103: "Schema object container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ObjectNotFound">
            <summary>Error code 113104: "Object "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ObjectNameRequired">
            <summary>Error code 113105: "Object name required."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateObjectName">
            <summary>Error code 113106: "Duplicate object name "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateObjectID">
            <summary>Error code 113107: "Duplicate object identifier "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.AmbiguousObjectReference">
            <summary>Error code 113108: "Object reference "{0}" is ambiguous between the following names: {1}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.IndexBucketNotFound">
            <summary>Error code 113109: "Internal Error: Name Index Bucket not found for name "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ConstraintContainer">
            <summary>Error code 113110: "Constraint container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateChildObjectName">
            <summary>Error code 113111: "Duplicate child object "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.TypeSpecifierCannotBeEmitted">
            <summary>Error code 113113: "Type specifier cannot be emitted for object class "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.PropertyContainer">
            <summary>Error code 113114: "Property container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.RepresentationContainer">
            <summary>Error code 113115: "Representation container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.SpecialContainer">
            <summary>Error code 113116: "Special container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ScalarTypeContainer">
            <summary>Error code 113117: "ScalarType container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ColumnContainer">
            <summary>Error code 113118: "Column container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.OrderColumnContainer">
            <summary>Error code 113119: "Order columns list may only contain order columns."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateOrderColumnDefinition">
            <summary>Error code 113120: "Duplicate order column definition "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.Empty">
            <summary>Error code 113121: "EmptyOrder."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.OrderContainer">
            <summary>Error code 113122: "Order list may only contain orders."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.KeyColumnContainer">
            <summary>Error code 113123: "Key columns list may only contain references to table columns."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateColumnName">
            <summary>Error code 113124: "Duplicate key column name "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.KeyContainer">
            <summary>Error code 113125: "Key list may only contain keys."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NoKeysAvailable">
            <summary>Error code 113126: "Table "{0}" does not have any keys from which to select a minimum."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NoSubsetKeyAvailable">
            <summary>Error code 113127: "No key is a subset of the given columns."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ReferenceContainer">
            <summary>Error code 113128: "Reference container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.OperandContainer">
            <summary>Error code 113129: "Operand container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.SortedList">
            <summary>Error code 113130: "Cannot insert into a sorted list."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.SignatureNotFound">
            <summary>Error code 113131: "Signature "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.OperatorSignatureContainer">
            <summary>Error code 113132: "OperatorSignature container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateOperatorSignature">
            <summary>Error code 113133: "Duplicate operator signature "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.AmbiguousInheritedCall">
            <summary>Error code 113134: "Ambiguous inherited invocation in operator "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.OperatorMapContainer">
            <summary>Error code 113135: "Operator map container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.SignatureGroupNotFound">
            <summary>Error code 113137: "Signature group not found for operator "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.OperatorMapNotFound">
            <summary>Error code 113138: "Operator map not found for operator "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DeviceScalarTypeNotFound">
            <summary>Error code 113139: "Device scalar type map not found for scalar type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DeviceOperatorNotFound">
            <summary>Error code 113140: "Device operator map not found for operator "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CapabilityNotSupported">
            <summary>Error code 113141: "{0} not supported by device "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DeviceNotRunning">
            <summary>Error code 113142: "Operation cannot be performed because device "{0}" is not running."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DeviceRunning">
            <summary>Error code 113143: "Operation cannot be performed because device "{0}" is running."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NoActiveTransaction">
            <summary>Error code 113144: "No active transaction."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.TableVarContainer">
            <summary>Error code 113146: "Heap may only contain table variables."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.UserNotFound">
            <summary>Error code 113147: "User "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.UserContainer">
            <summary>Error code 113148: "User container may only contain User objects."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DeviceUserNotFound">
            <summary>Error code 113149: "Device user "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DeviceUserContainer">
            <summary>Error code 113150: "DeviceUser container may only contain DeviceUser objects."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ServerLinkUserNotFound">
            <summary>Error code 113151: "ServerLinkUser "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ServerLinkUserContainer">
            <summary>Error code 113152: "ServerLinkUser container may only contain ServerLinkUser objects."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.TopLevelContainer">
            <summary>Error code 113153: "Catalog may only contain scalar types, operators, devices, tables, views, presentations, references, or catalog constraints."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ColumnReferencesUnknownScalarType">
            <summary>Error code 113154: "Catalog "{0}": Column "{1}" references unknown scalar type "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ReferenceReferencesUnknownTable">
            <summary>Error code 113155: "Catalog "{0}": Reference "{1}" references unknown table "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ConstraintReferencesUnknownObject">
            <summary>Error code 113156: "Catalog "{0}": Constraint "{1}" references unknown object "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DerivedTableVarReferencesUnknownObject">
            <summary>Error code 113157: "Catalog "{0}": DerivedTableVar "{1}" references unknown object "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CatalogInconsistent">
            <summary>Error code 113158: "Catalog "{0}" is inconsistent."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ObjectRegistered">
            <summary>Error code 113159: "Object "{0}" cannot be changed while registered in catalog "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateOperator">
            <summary>Error code 113160: "Duplicate operator "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.OperatorNotFound">
            <summary>Error code 113161: "Unable to resolve operator reference "{0}" with signature "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.TagNameRequired">
            <summary>Error code 113162: "Tag name required."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.TagContainer">
            <summary>Error code 113163: "Tag container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.TagNotFound">
            <summary>Error code 113164: "Tag "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateTagName">
            <summary>Error code 113165: "Duplicate tag name: "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.AmbiguousTagReference">
            <summary>Error code 113166: "Ambiguous tag name: "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.UnimplementedMethod">
            <summary>Error code 113167: "Unimplemented: {0}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.EventHandlerContainer">
            <summary>Error code 113168: "Event handler container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateEventHandler">
            <summary>Error code 113169: "Operator "{0}" is already attached to event type "{1}" for this object."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.EncryptedDataTooLong">
            <summary>Error code 113170: "Encrypted data exceeds maximum length (255)."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.IndexOutOfRange">
            <summary>Error code 113171: "Index ({0}) out of range."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.InvalidConnectionString">
            <summary>Error code 113172: "Invalid Connection String."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NoGeneratorTable">
            <summary>Error code 113173: "No generator table defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CreatingAmbiguousObjectName">
            <summary>Error code 113174: "Object name "{0}" cannot be used because it would hide the name "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.AmbiguousObjectName">
            <summary>Error code 113175: "Object name "{0}" cannot be used because it would be hidden by the name "{1}".</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.InvalidContainer">
            <summary>Error code 113176: "{0} container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CatalogObjectExpected">
            <summary>Error code 113177: "Catalog object expected."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.RightNotFound">
            <summary>Error code 113178: "Right "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.RightAssignmentNotFound">
            <summary>Error code 113179: "Right assignment for right "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.GroupNotFound">
            <summary>Error code 113180: "Group "{1}" not found." </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.GroupDeviceUserNotFound">
            <summary>Error code 113181: "Group device user not found for Group "{0}", device "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.GroupDeviceUserContainer">
            <summary>Error code 113182: "GroupDeviceUser container may only contain GroupDeviceUser objects."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ColumnNotFound">
            <summary>Error code 113183: "Column "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.RoleNotFound">
            <summary>Error code 113184: "Role "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ConstraintIsNotTransitionConstraint">
            <summary>Error code 113185: "Constraint "{0}" is not a transition constraint."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ConstraintIsTransitionConstraint">
            <summary>Error code 113186: "Constraint "{0}" is a transition constraint."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.LibraryAlreadyRegistered">
            <summary>Error code 113187: "Library "{0}" is already registered."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.LibraryIsRequired">
            <summary>Error code 113188: "Library "{0}" cannot be unregistered because there are registered libraries that require it."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.InvalidLoadLibraryCall">
            <summary>Error code 113189: "Load library can only be called while loading catalog."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.LibraryAlreadyLoaded">
            <summary>Error code 113190: "Library "{0}" is already loaded."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.RequiredLibraryNotLoaded">
            <summary>Error code 113191: "Library "{0}" cannot be loaded because required library "{1}" is not loaded."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DropStatementCannotBeEmitted">
            <summary>Error code 113192: "Drop statement cannot be emitted for schema object of type "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NestedLibraryCreation">
            <summary>Error code 113193: "Library "{0}" cannot be registered because it would nested within library "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NonLibraryDependency">
            <summary>Error code 113194: "Object "{0}" in library "{1}" cannot reference object "{2}" because it is not contained within a library."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NonRequiredLibraryDependency">
            <summary>Error code 113195: "Object "{0}" in library "{1}" cannot reference object "{2}" in library "{3}" because the referenced library is not required by the referencing library."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CannotDropRegisteredLibrary">
            <summary>Error code 113196: "Library "{0}" is registered and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CannotRenameRegisteredLibrary">
            <summary>Error code 113197: "Library "{0}" is registered and cannot be renamed."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CannotRemoveRequisitesFromRegisteredLibrary">
            <summary>Error code 113198: "Library "{0}" is registered and cannot have requisites removed."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CircularLibraryReference">
            <summary>Error code 113199: "Library "{0}" cannot require library "{1}" because it is a circular reference."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CannotModifySystemLibrary">
            <summary>Error code 113200: "System library cannot be modified."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CannotModifyGeneralLibrary">
            <summary>Error code 113201: "General library cannot be modified."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CannotUnregisterSystemLibrary">
            <summary>Error code 113202: "System library cannot be unregistered."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CannotUnregisterGeneralLibrary">
            <summary>Error code 113203: "General library cannot be unregistered."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NoCurrentLibrary">
            <summary>Error code 113204: "Current session has no current library defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.SessionObjectDependency">
            <summary>Error code 113205: "Object "{0}" cannot reference object "{1}" because it is a session-specific temporary object."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CannotChangeRegisteredLibraryVersion">
            <summary>Error code 113206: "Library "{0}" is registered and cannot have its version changed."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.LibraryVersionMismatch">
            <summary>Error code 113207: "Library "{0}" is required to be version "{1}", but is available as version "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.AmbiguousDefaultDeviceName">
            <summary>Error code 113208: "A default device name could not be determined for library "{0}" because it has no default device name specified and more than one required library has a default device name specified."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.RegisteredClassNotFound">
            <summary>Error code 113209: "Registered class "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NonRequiredClassDependency">
            <summary>Error code 113210: "Registered class "{0}" cannot be referenced because the current library "{1}" does not require the library in which the class is registered "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ApplicationTransactionObjectDependency">
            <summary>Error code 113211: "Object "{0}" cannot reference object "{1}" because it is an application transaction-specific temporary object."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.InsertTransitionExists">
            <summary>Error code 113212: "Transition constraint "{0}" already has a definition for the insert transition."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NoInsertTransition">
            <summary>Error code 113213: "Transition constraint "{0}" does not have a definition for the insert transition."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.UpdateTransitionExists">
            <summary>Error code 113214: "Transition constraint "{0}" already has a definition for the update transition."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NoUpdateTransition">
            <summary>Error code 113215: "Transition constraint "{0}" does not have a definition for the update transition."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DeleteTransitionExists">
            <summary>Error code 113216: "Transition constraint "{0}" already has a definition for the delete transition."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NoDeleteTransition">
            <summary>Error code 113217: "Transition constraint "{0}" does not have a definition for the delete transition."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.UnableToLocateConversionRepresentation">
            <summary>Error code 113218: "Unable to locate a representation of scalar type "{0}" for use as the native accessor "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.InvalidConversionRepresentation">
            <summary>Error code 113219: "Representation "{0}" of scalar type "{1}" cannot be used as a conversion representation because it has multiple properties."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.UnsupportedScalarType">
            <summary>Error code 113220: "Table "{0}" cannot be stored in device "{1}" because the device does not have a type map for the type "{2}" of column "{3}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.UnsupportedKeyType">
            <summary>Error code 113221: "Table "{0}" cannot be stored in device "{1}" because the device does not support comparison for the type "{2}" of key column "{3}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.UnsupportedOrderType">
            <summary>Error code 113222: "Table "{0}" cannot be stored in device "{1}" because the device does not support comparison for the type "{2}" of order column "{3}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateOperatorMatch">
            <summary>Error code 113223: "Duplicate operator match for operator "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.InvalidAlterTableVarCreateColumnStatement">
            <summary>Error code 113224: "Column "{0}" in table "{1}" cannot be created not nil because the column does not have a default definition."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.RegisteredLibraryHasDependents">
            <summary>Error code 113225: "Version number of registered library "{0}" cannot be changed because it would invalidate the reference from library "{1}", version number "{2}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.InvalidLibraryReference">
            <summary>Error code 113226: "The version number of library reference "{0}" in library "{1}" cannot be changed to "{2}" because the target library version is "{3}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.InvalidUpgradeVersionNumber">
            <summary>Error code 113227: "Upgrade version number "{0}" must have Major, Minor and Revision specified, and must not have Build specified."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.InvalidUpgradeLibraryVersionNumber">
            <summary>Error code 113228: "Upgrades cannot be tracked for library "{0}" because the version number "{1}" does not have Revision specified."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.KeyRequired">
            <summary>Error code 113229: "Unable to determine a clustering order for table variable "{0}" because it has no non-sparse keys defined."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.AmbiguousLibrarySetting">
            <summary>Error code 113230: "Setting "{0}" is defined in at least the following libraries: {1}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CannotDetachRegisteredLibrary">
            <summary>Error code 113231: "Library "{0}" is registered and cannot be detached."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CouldNotResolveObjectHeader">
            <summary>Error code 113232: "Could not resolve object for ID ({0}) and name "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ObjectHeaderNotFound">
            <summary>Error code 113233: "Object header not found for ID ({0})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateObject">
            <summary>Error code 113234: "Duplicate object ID ({0})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.MaxObjectNameLengthExceeded">
            <summary>Error code 113235: "Name '{0}' exceeds the maximum allowable length for object names in the catalog ({1} characters)."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateRightName">
            <summary>Error code 113236: "A right with the name '{0}' already exists."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateUserID">
            <summary>Error code 113237: "A user with the id '{0}' already exists."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.DuplicateDeviceUser">
            <summary>Error code 113238: "A user mapping for user id '{0}' for device '{1}' already exists."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CatalogObjectHeaderNotFound">
            <summary>Error code 113239: "Catalog object header for object id ({0}) does not exist in the catalog store."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CatalogObjectLoadFailed">
            <summary>Error code 113240: "Catalog object header for object id ({0}) was found and the object was successfully deserialized, but the object is not present in the catalog cache."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.CatalogDeserializationError">
            <summary>Error code 113241: "Errors occurred while attempting to deserialize catalog object id ({0})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.LibraryNotRegistered">
            <summary>Error code 113242: "Library '{0}' is not registered."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ObjectAlreadyLoading">
            <summary>Error code 113243: "Object id ({0}) cannot be loaded because there is already an object being loaded on this process."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ObjectNotCached">
            <summary>Error code 113244: "Object id ({0}) was not found in the catalog cache."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.InvalidLoadingContext">
            <summary>Error code 113245: "Cannot enter a nonloading context because the current loading context is not an internal context."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NoNonSparseKeysAvailable">
            <summary>Error code 113246: "Table "{0}" does not have any non-sparse keys from which to select a minimum."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.NoNonNilableKeysAvailable">
            <summary>Error code 113247: "Table "{0}" does not have any non-nilable keys from which to select a minimum."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.SchemaException.Codes.ErrorApplyingDeviceSetting">
            <summary>Error code 113248: "Errors occurred while attempting to apply device settings for device "{0}", setting "{1}", value "{2}"."</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Right.IsOwner(System.String)">
            <summary>Returns true if AUser is the owner of this right, or is a member of a parent Group of the owner of this right, recursively.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.ServerLink.GetUser(System.String)">
            <summary>
            Returns a ServerLinkUser for the given UserID.
            </summary>
            <remarks>
            If there is no configured server link user for the given UserID, 
            the default server link user for the server link is returned.
            If there is no default server link user for the server link,
            a default ServerLinkUser is returned with credentials of
            Admin and a blank password.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.TableVarColumn">
            <remarks> Provides the representation for a column header (Name:DataType) </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.TableVarColumnsBase">
            <remarks> Provides a container for TableVarColumn objects </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.OrderColumns.Item(System.String)">
            <summary>Returns the first column in the order referencing the given name, without name resolution</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.OrderColumns.IndexOf(System.String)">
            <summary>Returns the index of the first reference in the order to the given column name, without name resolution</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.OrderColumns.Contains(System.String)">
            <summary>Returns true if the order contains any reference to the given column name, without name resolution</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.OrderColumns.IndexOf(System.String,Alphora.Dataphor.DAE.Schema.Sort)">
            <summary>Returns the index of the first reference in the order to the given column name, without name resolution, and using a sort equivalent to the given sort.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.OrderColumns.Contains(System.String,Alphora.Dataphor.DAE.Schema.Sort)">
            <summary>Returns true if the order contains any reference to the given column name, without name resolution, and using a sort equivalent to the given sort.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.OrderColumns.Version">
            <summary>Returns the version of the order columns list. Beginning at zero, this number is incremented each time a column is added or removed from the order columns.</summary>
            <remarks>This number is used to coordinate changes to the column list with properties of the order that are dependent on the set of columns in the order, such as Name.</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Order.GetFullName">
            <summary>Returns the full name of the order, a guaranteed parsable D4 order definition.</summary>
            <remarks>The Name property, in contrast, returns the full name limited to the max object name length of 200 characters.</remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Order.IsAscending">
            <summary>Returns true if all the columns in this order are in ascending order, false if any are descending.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Order.IsDescending">
            <summary>Returns true if all the columns in this order are in descending order, false if any are ascending.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Order.Equivalent(Alphora.Dataphor.DAE.Schema.Order)">
            <summary>Returns true if AOrder can be used to satisfy an ordering by this order.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.Key.Equivalent(Alphora.Dataphor.DAE.Schema.Key)">
            <summary>Returns true if this key has the same columns as the given key.</summary>
            <remarks>
            This is different than equality in that equality also considers sparseness of the key.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Key.IsSparse">
            <summary>Indicates whether or not the key will consider rows with nils for the purpose of duplicate detection</summary>
            <remarks>
            Sparse keys do not consider rows with nils, allowing multiple rows with nils for the columns of the key.
            Set by the DAE.IsSparse tag
            Sparse keys cannot be used as clustering keys.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.Key.Enforced">
            <summary>Indicates whether or not the constraint is enforced.</summary>
            <remarks>Set by the DAE.Enforced tag when the constraint is created.</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Schema.TableVar">
            <summary> Base class for data table definitions </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.TableVar.IndexOfKey(Alphora.Dataphor.DAE.Schema.Key)">
            <summary>Returns the index of the key with the same columns as the given key.</summary>
            <remarks>
            This is not the same as using Keys.IndexOf, because that method is based on key equality,
            which includes the sparseness of the key. This method is used to find a key by columns only,
            and will return the first key with the same columns.
            </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Schema.TableVar.Scope">
            <summary>Indicates whether this table variable is instanced at the database, session, or process level</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.TableVar.SourceTableName">
            <summary>The name of the application transaction table variable.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.TableVar.IsDeletedTable">
            <summary>Indicates whether or not this is the deleted tracking table for a translated table variable.</summary>
            <remarks>This property will only be set if SourceTableName is not null.</remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Schema.TableVar.ShouldTranslate">
            <summary>Indicates whether or not this table variable should be included in an application transaction.</summary>
            <remarks>
            By default, all table variables are included in an application transaction.  To disable application 
            transaction inclusion of a table variable, use the DAE.ShouldTranslate tag.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.TableVar.HasDeferredConstraints">
            <summary>Indicates whether this table variable has any enforced deferred constraints defined.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Schema.TableVar.HasDeferredConstraints(System.Collections.BitArray,Alphora.Dataphor.DAE.Schema.Transition)">
            <summary>Indicates whether this table variable has any enforced deferred constraints defined that would need validation based on the given value flags</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Server.IServerDTCTransaction">
            <summary>
            Defines the interface expected for a distributed-transaction coordinator transaction handler
            </summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.CachedPlanHeader.IsInvalidPlan">
            <summary>This flag will be set to true if the plan results in an error on open, indicating that it is invalid, and should not be returned to the plan cache.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.PlanCache.Get(Alphora.Dataphor.DAE.Server.ServerProcess,System.String,System.Int32)">
            <summary>Gets a cached plan for the given statement, if available.</summary>
            <remarks>
            If a plan is found, it is referenced for the LRU, and disowned by the cache.
            The client must call Release to return the plan to the cache.
            If no plan is found, null is returned and the cache is unaffected.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.PlanCache.Add(Alphora.Dataphor.DAE.Server.ServerProcess,System.String,System.Int32,Alphora.Dataphor.DAE.Server.ServerPlan)">
            <summary>Adds the given plan to the plan cache.</summary>		
            <remarks>
            The plan is not contained within the cache after this call, it is assumed in use by the client.
            This call simply reserves storage and marks the plan as referenced for the LRU.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.PlanCache.Release(Alphora.Dataphor.DAE.Server.ServerProcess,Alphora.Dataphor.DAE.Server.ServerPlan)">
            <summary>Releases the given plan and returns whether or not it was returned to the cache.</summary>
            <remarks>
            If the plan is returned to the cache, the client is no longer responsible for the plan, it is owned by the cache.
            If the plan is not returned to the cache, the cache client is responsible for disposing the plan.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.PlanCache.Clear(Alphora.Dataphor.DAE.Server.ServerProcess)">
            <summary>Clears the plan cache, disposing any plans it contains.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.PlanCache.Resize(Alphora.Dataphor.DAE.Server.ServerProcess,System.Int32)">
            <summary>Resizes the cache to the specified size.</summary>
            <remarks>
            Resizing the cache has the effect of clearing the entire cache.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Server.Engine">
            <summary> Dataphor DAE Server class. </summary>
            <remarks>
            	Provides an instance of a Dataphor DAE Server.  This object is usually accessed
            	through the IServerXXX common interfaces which make up the DAE CLI.  Instances
            	are usually created and obtained through the <see cref="!:ServerFactory"/> class.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.Engine.GetDebuggers">
            <summary>
            Returns a list of currently running debuggers in the DAE.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Server.Engine.LoggingEnabled">
            <summary>Determines whether the DAE instance will create and manage a log for writing events and errors.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Server.Engine.LogErrors">
            <summary>Determines whether the server will use the Dataphor event log to report errors that are returned to clients.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.Engine.RunScript(System.String,System.String)">
            <summary> Runs the given script as the specified library. </summary>
            <remarks> LibraryName may be the empty string. </remarks>
        </member>
        <member name="E:Alphora.Dataphor.DAE.Server.Engine.OnLibraryLoading">
            <summary>Event that is fired whenever a library begins loading.</summary>		
        </member>
        <member name="E:Alphora.Dataphor.DAE.Server.Engine.OnLibraryLoaded">
            <summary>Event that is fired whenever a library is done being loaded.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.Engine.ScriptCatalog(Alphora.Dataphor.DAE.Device.Catalog.CatalogDeviceSession)">
            <summary> Emits the creation script for the catalog and returns it as a string. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.ServerCursor.DisposeBookmark(System.Guid)">
            <summary> Disposes a bookmark. </summary>
            <remarks> Does nothing if the bookmark does not exist, or has already been disposed. </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.ServerCursor.DisposeBookmarks(System.Guid[])">
            <summary> Disposes a list of bookmarks. </summary>
            <remarks> Does nothing if the bookmark does not exist, or has already been disposed. </remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.Unsupported">
            <summary>Error code 106100: "Unsupported interface."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.InvalidServerContext">
            <summary>Error code 106101: "Internal Error: "Invalid server context."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.InvalidServerState">
            <summary>Error code 106102: "Server must be "{0}" to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerError">
            <summary>Error code 106103: "{0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerFactory">
            <summary>Error code 106104: "Unable to add server to server factory."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerInstanceMustBeNamed">
            <summary>Error code 106105: "Server instance name required."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.SessionInformationRequired">
            <summary>Error code 106106: "Session information required."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CannotLoginAsSystemUser">
            <summary>Error code 106107: "Cannot login as system user."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CannotDropSystemUsers">
            <summary>Error code 106108: "Cannot drop the system or admin users."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UserHasOpenSessions">
            <summary>Error code 106109: "User "{0}" has open sessions and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.InvalidPassword">
            <summary>Error code 106110: "Invalid password."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.DeviceStartupError">
            <summary>Error code 106111: "An exception occurred during startup of device "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.DeviceShutdownError">
            <summary>Error code 106112: "An exception occurred during shutdown of device "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.StartupReconciliationError">
            <summary>Error code 106113: "An exception occurred during startup reconciliation of device "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.PlanError">
            <summary>Error code 106114: "Server Plan Exception."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.SessionError">
            <summary>Error code 106115: "Server Session Exception."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.TransactionActive">
            <summary>Error code 106116: "Transaction already in progress for this process."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.NoTransactionActive">
            <summary>Error code 106117: "No transaction in progress for this process."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.DeviceSessionsActive">
            <summary>Error code 106118: "Transaction cannot be started with active device sessions on this process."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.DTCNotSupported">
            <summary>Error code 106119: "Microsoft Distributed Transaction Coordinator support is only available on Windows 2000 or later."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.NoRemoteSessionForServerLink">
            <summary>Error code 106120: "No remote session open for server link "{0}"."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CursorInactive">
            <summary>Error code 106121: "Cursor "{0}" must be open to perform this operation."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CursorActive">
            <summary>Error code 106122: "Cursor "{0}" must be closed to perform this operation."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CapabilityNotSupported">
            <summary>Error code 106123: ""{0}" not supported by this cursor."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CursorError">
            <summary>Error code 106124: "Server Cursor Exception."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerIsStarted">
            <summary>Error code 106125: "Cannot perform this operation while the DAE server service is started."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.GenericString">
            <summary>Error code 106126: "{0}"</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ObjectContainer">
            <summary>Error code 106129: "Server child object container."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ObjectNotFound">
            <summary>Error code 106130: "Object "{0}" not found."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerSessionContainer">
            <summary>Error code 106131: "Server session container."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerPlanContainer">
            <summary>Error code 106132: "Server plan container."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerProcessContainer">
            <summary>Error code 106133: "Server process container."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerScriptContainer">
            <summary>Error code 106134: "Server script container."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerBatchContainer">
            <summary>Error code 106135: "Server batch container."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerCursorContainer">
            <summary>Error code 106136: "Server cursor container."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.AsyncProcessMessageNotSupported">
            <summary>Error code 106140: "Asynchronous message processing not supported by the CLI at this time."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.InvalidLocalServerContext">
            <summary>Error code 106141: "Internal Error: "Invalid local server context."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.PlanExecuting">
            <summary>Error code 106142: "Process is already executing plan "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.PlanNotExecuting">
            <summary>Error code 106143: "Plan "{0}" is not executing on this process."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ProcessError">
            <summary>Error code 106144: "Server Process Exception."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CursorSyncError">
            <summary>Error code 106145: "Underlying row could not be located."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.RollbackError">
            <summary>Error code 106146: "Exceptions occurred during rollback: {0}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CommitError">
            <summary>Error code 106147: "Exceptions occurred during commit."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.InvalidBookmark">
            <summary>Error code 106148: "Bookmark "{0}" is invalid."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.RegisterClassNameNotFound">
            <summary>Error code 106149: "Register class name not found in assembly "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ClassAliasNotFound">
            <summary>Error code 106150: "Class alias "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.PropertyNotFound">
            <summary>Error code 106151: "Class "{0}" does not contain a property named "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.RegisteredAssembliesFileNotFound">
            <summary>Error code 106152: "File "{0}" containing registered assemblies does not exist."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.NoExecutingPlan">
            <summary>Error code 106153: "Process is not currently executing a plan. Compile-time state is not available."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ClassLoadError">
            <summary>Error code 106154: "Exceptions occurred while attempting to load class "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UnauthorizedUser">
            <summary>Error code 106155: "User "{0}" is not authorized to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UnauthorizedGroup">
            <summary>Error code 106156: "Group "{0}" is not authorized to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UnauthorizedRight">
            <summary>Error code 106157: "User "{0}" does not have access to right "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CannotDropSystemGroup">
            <summary>Error code 106158: "System Group cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CannotDropAdminGroup">
            <summary>Error code 106159: "Admin Group cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CannotDropUserGroup">
            <summary>Error code 106160: "User Group cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.GroupHasChildGroups">
            <summary>Error code 106161: "Group "{0}" has child Groups and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.GroupHasUsers">
            <summary>Error code 106162: "Group "{0}" has users and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CannotDropGeneratedRight">
            <summary>Error code 106163: "Right "{0}" is a generated right and cannot be altered or dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UserOwnsRights">
            <summary>Error code 106164: "User "{0}" has owned rights and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UserOwnsObjects">
            <summary>Error code 106165: "User "{0}" has owned objects and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CircularGroupAssignment">
            <summary>Error code 106166: "Circular Group assignment between Group "{0}" and Group "{1}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ProcessWaitTimeout">
            <summary>Error code 106167: "Process request timed out because the server is too busy."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ProcessNotResponding">
            <summary>Error code 106168: "Process did not respond to the terminate request within the termination timeout."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.RoleHasUsers">
            <summary>Error code 106169: "Role "{0}" has users assigned and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.RoleHasGroups">
            <summary>Error code 106170: "Role "{0}" has groups assigned and cannot be dropped."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UnimplementedValueType">
            <summary>Error code 106171: "Returning a value of type "{0}" through the CLI is unimplemented."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.BetaExpired">
            <summary>Error code 106172: "This beta version of Dataphor has expired."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UnableToConnectToServer">
            <summary>Error code 106173: "Unable to establish a connection with server "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UncompiledPlan">
            <summary>Error code 106174: "Unable to execute the plan because it was not successfully compiled.\r\n{0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UnparsedScript">
            <summary>Error code 106175: "Unable to compile the script because it was not successfully parsed.\r\n{0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ProcessNotFound">
            <summary>Error code 106176: "Process ({0}) not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ExecutionTimeout">
            <summary>Error code 106177: "Execution did not complete with the specified timeout."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.PlanCursorActive">
            <summary>Error code 106178: "A cursor is already open on this plan."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.SessionNotFound">
            <summary>Error code 106179: "Session ({0}) not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.InvalidServerInstanceID">
            <summary>Error code 106180: "Remote server has been unexpectedly terminated."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerConnectionContainer">
            <summary>Error code 106181: "Server connection container."</summary> 
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CacheLockTimeout">
            <summary>Error code 106182: "Timed out waiting for the client-side catalog cache lock."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CacheSerializationError">
            <summary>Error code 106183: "Internal cache serialization error: Expected client cache time stamp ({0}), Actual: ({1})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CacheSerializationTimeout">
            <summary>Error code 106184: "Cache serialization timeout."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CacheDeserializationError">
            <summary>Error code 106185: "Errors occurred while deserializing client cache time stamp ({0})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ProcessAborted">
            <summary>Error code 106186: "Process aborted."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CouldNotCreateCheckTable">
            <summary>Error code 106187: "Check table for table "{0}" could not be created."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.InstanceConfigurationNotLoaded">
            <summary>Error code 106188: "Instance configuration has not been loaded."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.InstanceNotFound">
            <summary>Error code 106189: "Instance "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UnableToConnectToListener">
            <summary>Error code 106190: "Unable to connect to listener on "{0}"."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.TypedObjectContainer">
            <summary>Error code 106191: "Only objects of type "{0}" may be added to this container."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.DebuggerRunning">
            <summary>Error code 106192: "The debugger must be paused in order to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.DebuggerNotStarted">
            <summary>Error code 106193: "There is no debugger associated with session ({0})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.DebuggerAlreadyStarted">
            <summary>Error code 106194: "There is already a debugger started for session ({0})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.DebuggerAlreadyAttached">
            <summary>Error code 106195: "There is already a debugger attached to process ({0})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.DebuggerAlreadyAttachedToSession">
            <summary>Error code 106196: "There is already a debugger attached to session ({0})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CannotAttachToDebuggerSession">
            <summary>Error code 106197: "The debugger cannot be attached to the debugger session ({0})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CouldNotDetermineProcessLocation">
            <summary>Error code 106198: "Could not determine the current location for process ({0})."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.NoExecutingProgram">
            <summary>Error code 106199: "Process is not currently executing a program. Run-time state is not available."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ProgramNotExecuting">
            <summary>Error code 106200: "Program "{0}" is not executing on this process."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CouldNotDetermineProgramLocation">
            <summary>Error code 106201: "Could not determine the current location for program {0}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.InvalidDebugLocator">
            <summary>Error code 106202: "Invalid debug locator: "{0}". Only program and operator locators may be used to obtain program context."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ProgramNotFound">
            <summary>Error code 106203: "Program {0} not found. Only running programs in processes currently attached to the debugger are reachable."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CannotAttachToAnInProcessSession">
            <summary>Error code 106204: "The debugger cannot be attached to an in-process session."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.UnknownObjectHandle">
            <summary>Error code 106205: "Unknown object handle."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.PlanNotFound">
            <summary>Error code 106206: "Plan "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerActive">
            <summary>Error code 106207: "Server connection must be inactive to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServerInactive">
            <summary>Error code 106208: "Server connection must be active to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServiceActive">
            <summary>Error code 106209: "Service must be inactive to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.ServiceInactive">
            <summary>Error code 106210: "Service must be active to perform this operation."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerException.Codes.CommunicationFailure">
            <summary>Error code 106211: "An error occurred attempting to communicate with the service."</summary>
        </member>
        <member name="E:Alphora.Dataphor.DAE.Server.ServerPlan.Released">
            <summary>
            Used to indicate that the plan has been released back to the cache and should be considered disposed for anything looking at the plan external to the server.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Server.ServerProcess.DefaultIsolationLevel">
            <summary>Determines the default isolation level for transactions on this process.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.ServerProcess.CurrentIsolationLevel">
            <summary>Returns the isolation level of the current transaction, if one is active. Otherwise, returns the default isolation level.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Server.ServerProcess.SuppressWarnings">
            <summary>Indicates whether or not warnings encountered during compilation of plans on this process will be reported.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Server.ServerProcess.IsInsert">
            <summary>Indicates whether this process is an insert participant in an application transaction.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Server.ServerProcess.IsOpeningInsertCursor">
            <summary>Indicates whether this process is currently opening an insert cursor.</summary>
            <remarks>
            This flag is used to implement an optimization to the insert process to prevent the actual
            opening of cursors unnecessarily. This flag is used by the devices involved in an expression
            to determine whether or not to issue the cursor open, or simply return an empty cursor.
            The optimization is valid because the insert cursor expression always has a contradictory
            restriction appended. In theory, the optimizers for the target systems should recognize the
            contradiction and the insert cursor open should not take any time, but in reality, it
            does take time with some complex cursors, and there is also the unnecessary network or RPC hit
            for extra-process devices.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Server.ServerProcess.InAddingTableVar">
            <summary>Indicates whether the current process is adding an A/T table map.</summary>
            <remarks>This is used to prevent the resolution process from attempting to add a table map for the table variable being created before the table map is done.</remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Server.ServerProcess.InHandler">
            <summary>Indicates whether the process has entered an event handler.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Server.ServerProcess.ShouldAffectTimeStamp">
            <summary>Indicates whether time stamps should be affected by alter and drop table variable and operator statements.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.ServerProcess.IsLoading">
            <summary>Returns true if the Server-level loading flag is set, or this process is in a loading context</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.ServerProcess.InLoadingContext">
            <summary>Returns true if this process is in a loading context.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Server.ServerSession._currentLibrary">
            <summary> 
            Specifies a library which is being registered or loaded on this session. 
            All objects created on this session will be part of this library. 
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.ServerSession.SetDebugger(Alphora.Dataphor.DAE.Debug.Debugger)">
            <summary>
            Sets the debugger that is started on this session.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.ServerSession.SetDebuggedByID(System.Int32)">
            <summary>
            Sets the ID of the debugger to which this session is attached.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Server.ServerSession.StopProcess(System.Int32)">
            <summary>
            Initiates a termination request for a process.
            </summary>
            <param name="processID">The ID of the process to be stopped.</param>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Server.LibraryNotifyEvent">
            <summary> Library notify event for the Library notification events in the Dataphor Server </summary>	
            <remarks> Note that these events are only surfaced in process, and cannot be used through the remoting boundary. </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Server.DeviceNotifyEvent">
            <summary> Device notify event for the Device notification events in the Dataphor Server </summary>
            <remarks> Note that these events are only surfaced in process, and cannot be used through the remoting boundary. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Server.LoadingContext.IsInternalContext">
            <summary>Indicates whether this is a true loading context, or an internal context entered to prevent logging of DDL.</summary>
            <remarks>
            Because loading contexts are non-logging, they are also used by the server to build internal management structures such
            as constraint check tables. However, these contexts may result in the creation of objects that should be logged, such
            as sorts for types involved in the constraints. This flag indicates that this context is an internal context and that
            a logging context may be pushed on top of it.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Server.LoadingContext.IsLoadingContext">
            <summary>Indicates whether the context is a loading context, or a context pushed to enable logging within a loading context.</summary>
            <remarks>
            Pushing a non-loading context is only allowed if the current loading context is an internal context, because it should be an error
            to create any logged objects as a result of the creation of a deserializing object.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.StackWindowList.GetCallStack">
            <summary>
            Returns the current call stack.
            </summary>
            <remarks>
            This method is not thread safe, synchronization is the responsibility of the caller.
            This method returns the actual stack windows. The method is expected to be used read
            only, but a copy is not taken for performance reasons. Modifications to these structures
            will corrupt the stack of the running process.
            </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.QueryLanguage">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.SessionInfo">
            <summary> Contains settings relevant to a server session. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.UserID">
            <summary>The user ID used to login to the Dataphor Server.</summary>
            <remarks>The Dataphor Server user ID of the session.  The default login for the Dataphor Server is Admin with a blank password.</remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.Password">
            <summary>The password used to login to the Dataphor Server.</summary>
            <remarks>The password for the Dataphor Server user of the session.  The default login for the Dataphor Server is Admin with a blank password.</remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.DefaultLibraryName">
            <summary>Determines the default library for the session. If specified, the current library for the session is initially set to this value.</summary>
            <remarks>The current library is used when resolving or creating catalog objects. The default value is blank. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.DefaultUseDTC">
            <summary> Determines the default UseDTC setting for processes started on this session. Defaults to false.</summary>
            <remarks> Defaults to false. </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.DefaultUseImplicitTransactions">
            <summary>Determines the default UseImplicitTransactions setting for processes started on this session. Defaults to true.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.Language">
            <summary> Determines which query language will be used to interpret statements and expressions prepared on the session. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.FetchCount">
            <summary>Determines the number of rows which will be buffered by the CLI.  A FetchCount of 1 effectively disables row buffering.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.FetchAtOpen">
            <summary>Determines whether or not the CLI will fetch as part of the open call.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.DefaultIsolationLevel">
            <summary>Determines the default isolation level setting for processes started on this session.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.DefaultMaxStackDepth">
            <summary>Determines the default maximum stack depth for processes on this session.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.DefaultMaxCallDepth">
            <summary>Determines the default maximum call depth for processes on this session.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.UsePlanCache">
            <summary>Detetrmines whether or not to use the server plan cache on this session.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.ShouldEmitIL">
            <summary>Detetrmines whether or not the compiler will emit IL instructions for the nodes that support IL compilation.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.SessionInfo.ShouldElaborate">
            <summary>Determines whether or not the compiler will include elaboration information by default in prepared plans.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.ProcessInfo.UseImplicitTransactions">
            <summary>Determines whether a transaction will be implicitly started when a call is made on this process.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.ProcessInfo.UseDTC">
            <summary> Determines whether the Microsoft Distributed Transaction Coordinator will be used to control distributed transactions for this process. </summary>
            <remarks>
            The Microsoft Distributed Transaction Coordinator (DTC) may only be used when the Dataphor Server is running on Microsoft Windows 2000 or higher.  
            This value may not be set while there are active transactions on the process (an exception will be thrown).  Refer to the Dataphor Developer's Guide 
            for a complete discussion of distributed transaction support in the Dataphor Server.  The default value for this setting is false.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.ProcessInfo.DefaultIsolationLevel">
            <summary>Determines the default isolation level for transactions on this process.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.ProcessInfo.Language">
            <summary> Determines which query language will be used to interpret statements and expressions prepared on the process. </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.ProcessInfo.FetchCount">
            <summary>Determines the number of rows which will be buffered by the CLI.  A FetchCount of 1 effectively disables row buffering.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.ProcessInfo.FetchAtOpen">
            <summary>Determines whether or not the CLI will fetch as part of the open call.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.ProcessInfo.SuppressWarnings">
            <summary>Determines whether or not the compiler will report warnings encountered when compiling statements on this process.</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.PasswordConverter">
            <nodoc/>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Store.SQLStore.ProcessBatches(System.String)">
            <summary> Returns the set of batches in the given script, delimited by the default 'go' batch terminator. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Store.SQLStore.ProcessBatches(System.String,System.String)">
            <summary>Returns the set of batches in the given script, delimited by the given terminator.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Store.SQLStore.DefaultMaxConnections">
            <summary>Default maximum number of connections to an SSCE server.</summary>
            <remarks>
            According to Microsoft, the ceiling for connections to an SSCE device is around 70:
            <para>
            In SSCE technically we support 256 connections. But do not scale that well when you cross 70 connections.  
            To get good performance with 70 concurrent connections, you need to increase the lock time out period in connection string.  
            Data Source = �./local.sdf�;Max Buffer Size = 10240;Default Lock Timeout = 5000;Flush Interval = 20; AutoShrink Threshold = 10
            
            You need to make sure that the connections, sessions are properly disposed in your application.  
            Dispose it explicitly and don�t depend on GC to Dispose it, since it may take longer time to dispose. 
            </para>
            Based on this, it may be worthwhile to investigate some of these other settings as well, however,
            with the connection pooling and name resolution cache we are implementing in the catalog device,
            we should never get even close to this kind of concurrent access.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Store.SQLStore.MaxConnections">
            <summary>Maximum number of connections to allow to this store.</summary>
            <remarks>
            Set this value to 0 to allow unlimited connections.
            </remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Store.SQLStore.Connect">
            <summary>Establishes a connection to the store.</summary>		
        </member>
        <member name="P:Alphora.Dataphor.DAE.Store.SQLStoreConnection.Store">
            <summary>The store for this connection.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Store.SQLStoreConnection.Connection">
            <summary>This is the internal connection to the server housing the catalog store.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Store.SQLStoreConnection.HasTable(System.String)">
            <summary>Returns whether or not the store has a table of the given name.</summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Store.SQLStoreConnection.ExecuteCommand">
            <summary>This is the internal command used to execute statements on this connection.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Store.SQLStoreConnection.GetReaderCommand">
            <summary>Returns a new command that can be used to open readers on this connection.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Store.SQLStoreCursor.IsLessThan(System.Object,System.Object)">
            <summary>Returns true if ALeftValue is less than ARightValue, false otherwise.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Store.SQLStoreCursor.CompareKeys(System.Object[],System.Object[])">
            <summary>Returns -1 if ALeftKey is less than ARightKey, 1 if ALeftKey is greater than ARightKey, and 0 if ALeftKey is equal to ARightKey.</summary>
            <remarks>The values of ALeftKey and ARightKey are expected to be native, not store, values.</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Store.SQLStoreCursor.CompareKeys(System.Object[])">
            <summary>Returns -1 if the key values for the current row are less than ACompareKey, 1 if the key values for the current row are greater than ACompareKey, and 0 is the key values for the current row are equal to ACompareKey.</summary>
            <remarks>The values of ACompareKey are expected to be native, not store, values.</remarks>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Store.SQLStoreCursor.CompareRows(System.Object[],System.Object[])">
            <summary>
            Returns -1 if the key values of the left row are less than the key values of the right row, 1 if they are greater, and 0 if they are equal.
            </summary>
            <remarks>The values of ALeftRow and ARightRow are expected to be native, not store, values.</remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Store.StoreException.Codes.MaximumConnectionsExceeded">
            <summary>Error code 130100: "Maximum number of connections to the catalog store exceeded."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Store.StoreException.Codes.CursorHasNoCurrentRow">
            <summary>Error code 130101: "Store cursor has no current row."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Store.StoreException.Codes.StoreInitialized">
            <summary>Error code 130102: "Store settings cannot be changed once the store has been initialized."</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Streams.Conveyor">
            <remarks>    
            A Conveyor provides host language access to the physical representation of Dataphor values stored in streams
            All Conveyors must descend from this base and provide a single constructor which takes a Stream as its only parameter
            All reading and writing of Dataphor values in the host language should be done through these Conveyors, 
            although it is not strictly necessary to do so (physical access could occur in instruction implementations, but is not recommended)
            The intent of the Conveyor is to provide a single access point for host language access to Dataphor values.
            </remarks>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Streams.Conveyor.IsStreaming">
            <summary>Indicates whether this conveyor uses the streaming read/write methods, or the byte[] read/write and GetSize methods.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Streams.Conveyor.GetSize(System.Object)">
            <summary>Returns the size in bytes required to store the given value.</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Streams.Conveyor.Read(System.Byte[],System.Int32)">
            <summary>Returns the native representation of the value stored in the buffer given by ABuffer, beginning at the offset given by offset.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Streams.Conveyor.Write(System.Object,System.Byte[],System.Int32)">
            <summary>Writes the physical representation of AValue into the buffer given by ABuffer beginning at the offset given by offset</summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Streams.Conveyor.Read(System.IO.Stream)">
            <summary>Returns the native representation of the value stored in the stream given by AStream.</summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Streams.Conveyor.Write(System.Object,System.IO.Stream)">
            <summary>Writes the physical representation of the value given by AValue into the stream given by AStream.</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.ConveyorException.Codes.UninitializedScalar">
            <summary>Error code 111100: "Attempt to access data in an uninitialized scalar."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.ConveyorException.Codes.UninitializedStream">
            <summary>Error code 111101: "Attempt to access data in an uninitialized stream."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.ConveyorException.Codes.InvalidStringArgument">
            <summary>Error code 111102: "Input string was not in correct format:  {0}"</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.ConveyorException.Codes.InvalidNanosecondArgument">
            <summary>Error code 111103: "Nanoseconds must be in multiples of 100:  {0}"</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Streams.CoverStream">
            <remarks> Provides a stream class which exposes a subset of another stream </remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Streams.IConveyor">
            <summary>
            The IConveyor interface provides serialization functionality for the physical representation of Dataphor values.
            </summary>
        </member>
        <member name="P:Alphora.Dataphor.DAE.Streams.IConveyor.IsStreaming">
            <summary>
            Indicates whether this conveyor uses the streaming read/write methods, or the byte[] read/write and GetSize methods.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Streams.IConveyor.GetSize(System.Object)">
            <summary>
            Returns the size in bytes required to store the given value.
            </summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Streams.IConveyor.Read(System.Byte[],System.Int32)">
            <summary>
            Returns the physical representation of the value stored in the buffer given by buffer, beginning at the given offset.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Streams.IConveyor.Write(System.Object,System.Byte[],System.Int32)">
            <summary>
            Writes the physical representation of tempValue into the buffer given by buffer beginning at the given offset.
            </summary>		
        </member>
        <member name="M:Alphora.Dataphor.DAE.Streams.IConveyor.Read(System.IO.Stream)">
            <summary>
            Returns the physical representation of the value stored in the given stream.
            </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.Streams.IConveyor.Write(System.Object,System.IO.Stream)">
            <summary>
            Writes the physical representation of the value given by tempValue into the given stream.
            </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Streams.IRemoteStream">
            <summary> Like Stream but with one way read/write transport attributes to avoid extra read/write data marshalling. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Streams.RemoteStreamWrapper">
            <summary> Pass-through wrapper for IRemoteStream. </summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Streams.StreamID">
            <remarks>Value type for a stream identifier.</remarks>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Streams.StreamManager">
            <remarks>Provides the central management object for storage level streams.</remarks>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.InvalidComparison">
            <summary>Error code 112100: "Cannot compare values of type StreamID to values of type {0}."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.StreamInUse">
            <summary>Error code 112101: "Stream is in use and cannot be deallocated."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.StreamIDNotFound">
            <summary>Error code 112102: "StreamID ({0}) not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.CopyOnWriteOverflow">
            <summary>Error code 112103: "Copy on write overflow."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.OffsetMustBeNonNegative">
            <summary>Error code 112104: "Offset for a cover stream must be non-negative."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.InvalidRowStream">
            <summary>Error code 112106: "Invalid row stream."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.CannotSetStreamConveyorAsString">
            <summary>Error code 112106: "Display accessors cannot be used to set the AValue of a stream conveyor."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.CannotSetBOPObjectConveyorAsString">
            <summary>Error code 112107: "Display accessors cannot be used to set the AValue of a BOP object conveyor."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.CannotSetObjectConveyorAsString">
            <summary>Error code 112108: "Display accessors cannot be used to set the AValue of an object conveyor."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.CursorNotFound">
            <summary>Error code 112109: "Cursor "{0}" not found."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.DataTypeSet">
            <summary>Error code 112110: "Data type of a value cannot be changed."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.DataTypeRequired">
            <summary>Error code 112111: "Data type required."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.InvalidRowDataFormat">
            <summary>Error code 112113: "Invalid row data format."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.ScalarOverflow">
            <summary>Error code 112114: "Scalar AValue size exceeds maximum byte array size."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.RowValueOverflow">
            <summary>Error code 112115: "Row value size exceeds maximum byte array size."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.MinimumStaticByteSizeRequired">
            <summary>Error code 112116: "Minimum static byte size is required to support value overflow."</summary>
        </member>
        <member name="F:Alphora.Dataphor.DAE.Streams.StreamsException.Codes.CoverStreamSourceNull">
            <summary>Error code 112117: "Cover stream source may not be null."</summary>
        </member>
        <member name="T:Alphora.Dataphor.DAE.Strings">
            <nodoc/>
        </member>
        <member name="T:Alphora.Dataphor.DAE.DAEUtility">
            <nodoc/>
            <summary> Various DAE static utilitary functions. </summary>
        </member>
        <member name="M:Alphora.Dataphor.DAE.DAEUtility.ExecuteScript(System.String,Alphora.Dataphor.DAE.IServer,Alphora.Dataphor.DAE.SessionInfo)">
            <summary> Executes a D4 script. </summary>
        </member>
    </members>
</doc>
