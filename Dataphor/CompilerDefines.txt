#define ALLOWPROCESSCONTEXT in Alphora.Dataphor.DAE // ??
#define AUTOUPGRADELIBRARIES in Alphora.Dataphor.DAE to have the Dataphor server automatically apply any pending upgrades on startup
#define DATAVIEWBOOKMARKS in Alphora.Dataphor.DAE.Client to enable the bookmark capabilities of the DataView
//#define DISALLOWMANYTOMANYOUTERJOINS in Alphora.Dataphor.DAE // Disables support for many to many outer joins
#define INVERTEXCEPTIONDESCRIPTIONS in Alphora.Dataphor.Base to display error messages beginning with the innermost exception
#define LOADFROMLIBRARIES in Alphora.Dataphor.DAE // Enables in-place library loading, instead of copying assemblies in to the bin directory
#define LOGDDLINSTRUCTIONS in Alphora.Dataphor.DAE to have the catalog log DDL as part of the transaction (should not be turned off)
#define LOGFILECACHEEVENTS in Alphora.Dataphor.DAE // ??
#define NILPROPOGATION in Alphora.Dataphor.DAE // Enables nil propagation (1 + nil = nil i/o an error)
#define ORDERREFERENCESBYPRIORITYONLY in Frontend // Orders references by priority in derived documents
#define RELYONCURSORFLAGSAFTERUPDATE in Alphora.Dataphor.DAE.Client "This define forces the server cursor to recognize the BOF and EOF flags by actually navigating"
#define REMOVESUPERKEYS in Alphora.Dataphor.DAE // Enables superkey removal in the key inference algorithms in the compiler
#define REPORTNARROWINGCONVERSIONWARNINGS in Alphora.Dataphor.DAE to have the compiler report warnings when implicit narrowing conversions are used
#define REQUIRECASEMATCHONRESOLVE in Alphora.Dataphor.DAE // Use this to require a case match when resolving identifiers (see IBAS Proposal #26889)
#define REQUIRESAMEDATATYPESFORREFERENCECOLUMNS	in Alphora.Dataphor.DAE to disallow implicit conversions in compiler-generated reference constraint expressions
#define RESPECTREADONLY in Alphora.Dataphor.DAE and Frontend.Server to have the library and document sub systems respect read only flag on files
#define SKIPBETACHECK in Alphora.Dataphor.DAE to skip the beta time bomb check
//#define SQLSTORETIMING in Alphora.Dataphor.DAE, store assemblies (currently disabled) // Enables timing tracking on the SQL Stores (accessible via the GetStoreCounters() system operator)
//#define TRACEEVENTS in Alphora.Dataphor.DAE (currently disabled) // Enable this to turn on tracing
//#define USEADOCONNECTION in MSSQLDevice (currently disabled) // Uses the ADOConnection as the default connectivity implementation for the MSSQL device
#define USEASYNCSTOPPROCESS in Alphora.Dataphor.DAE.Client to issue the stop process call asynchronously
#define USECONNECTIONPOOLING in MSSQLDevice // Enables connection pooling
#define USECONVERSIONPATHCACHE in Alphora.Dataphor.DAE // Enables the conversion path cache
//#define UseFileStreamProvider in Alphora.Dataphor.DAE // ??
#define USEINCLUDENILSWITHBROWSE in Alphora.Dataphor.DAE // Enables the include nil clause in the order by statement
#define USEINTERNALID in Alphora.Dataphor.DAE // This allows the internal index to store duplicates of logical values for non-unique indexes
#define USENATIVECONCURRENCYCOMPARE // ?? Enables native object comparison when performing concurrency checks
//#define USEOLEDBCONNECTION in MSSQLDevice (currently disabled) // Uses the OLEDBConnection as the default connectivity implementation for the MSSQL device
#define USEOPERATORRESOLUTIONCACHE // Enables the operator resolution cache
//#define UseReaderWriterLock in Alphora.Dataphor.DAE (currently disabled) // Uses the .NET reader/writer lock rather than the Dataphor semaphore
#define UseReferenceDerivation in Alphora.Dataphor.DAE // Enables reference inference in the compiler
#define USEROOTEDIDENTIFIERSINKEYEXPRESSIONS // Enables rooted identifiers in key expressions
#define USESPINLOCK in Alphora.Dataphor.DAE // ??
#define USESQLCONNECTION in Alphora.Dataphor.DAE, store assemblies // Use an SQLConnection descendent for connectivity in the SQLStore
#define USESQLOLEDB in MSSQLDevice // Uses the SQLOLEDB provider when using the ADO connection for MSSQL device connectivity
//#define USETAGNAMECACHE in Alphora.Dataphor.DAE (currently disabled)
// This define uses a tag name cache for the names of all tags.
// The idea is to try to reduce the amount of memory used for tags by using
// the same string reference for each tag of a given name.
// However, early indications are that the amount of memory saved is not significant,
// even when dealing with large catalogs such as IBAS.
#define USEUNIFIEDJOINKEYINFERENCE in Alphora.Dataphor.DAE // Unified join key inference uses the same algorithm for all joins. See InferJoinKeys for more information.
#define USEUPDATEVALUEFLAGS in Alphora.Dataphor.DAE // ??
#define WRAPRUNTIMEEXCEPTIONS in Alphora.Dataphor.DAE // Determines whether or not non-Dataphor descended runtime exceptions are wrapped with a Dataphor Exception

