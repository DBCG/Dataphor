/*
Types.Generated - Generated using the following statement:
select GenerateTypes()
*/



create type Resource from class "Hl7.Fhir.Model.Resource" is { Base };
create type Id from class "Hl7.Fhir.Model.Id" is { Element };
alter type Id
{
	create representation Id
	{
		Value : String
	}
};
create type Meta from class "Hl7.Fhir.Model.Meta" is { Element };
create type Instant from class "Hl7.Fhir.Model.Instant" is { Element };
alter type Instant
{
	create representation Instant
	{
		Value : DateTime
	}
};
create type FHIRUri from class "Hl7.Fhir.Model.FhirUri" is { Element };
alter type FHIRUri
{
	create representation FHIRUri
	{
		Value : String
	}
};
create type Coding from class "Hl7.Fhir.Model.Coding" is { Element };
create type FHIRString from class "Hl7.Fhir.Model.FhirString" is { Element };
alter type FHIRString
{
	create representation FHIRString
	{
		Value : String
	}
};
create type Code from class "Hl7.Fhir.Model.Code" is { Element };
alter type Code
{
	create representation Code
	{
		Value : String
	}
};
create type FHIRBoolean from class "Hl7.Fhir.Model.FhirBoolean" is { Element };
alter type FHIRBoolean
{
	create representation FHIRBoolean
	{
		Value : Boolean
	}
};
alter type Coding
{
	create representation Coding
	{
		SystemElement : FHIRUri, 
		System : String, 
		VersionElement : FHIRString, 
		Version : String, 
		CodeElement : Code, 
		Code : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		UserSelectedElement : FHIRBoolean, 
		UserSelected : Boolean
	}
};
alter type Meta
{
	create representation Meta
	{
		VersionIdElement : Id, 
		VersionId : String, 
		LastUpdatedElement : Instant, 
		LastUpdated : DateTime, 
		ProfileElement : list(FHIRUri), 
		Profile : list(String), 
		Security : list(Coding), 
		Tag : list(Coding)
	}
};
alter type Resource
{
	create representation Resource
	{
		IdElement : Id, 
		Id : String, 
		Meta : Meta, 
		ImplicitRulesElement : FHIRUri, 
		ImplicitRules : String, 
		LanguageElement : Code, 
		Language : String, 
		ResourceBase : String, 
		VersionId : String
	}
};
create type DomainResource from class "Hl7.Fhir.Model.DomainResource" is { Resource };
create type Narrative from class "Hl7.Fhir.Model.Narrative" is { Element };
alter type Narrative
{
	create representation Narrative
	{
		StatusElement : Code, 
		Status : String, 
		Div : String
	}
};
alter type DomainResource
{
	create representation DomainResource
	{
		Text : Narrative, 
		Contained : list(Resource), 
		Extension : list(Extension), 
		ModifierExtension : list(Extension)
	}
};
create type StructureDefinition from class "Hl7.Fhir.Model.StructureDefinition" is { DomainResource };
create type Identifier from class "Hl7.Fhir.Model.Identifier" is { Element };
create type CodeableConcept from class "Hl7.Fhir.Model.CodeableConcept" is { Element };
alter type CodeableConcept
{
	create representation CodeableConcept
	{
		Coding : list(Coding), 
		TextElement : FHIRString, 
		Text : String
	}
};
create type Period from class "Hl7.Fhir.Model.Period" is { Element };
create type FHIRDateTime from class "Hl7.Fhir.Model.FhirDateTime" is { Element };
alter type FHIRDateTime
{
	create representation FHIRDateTime
	{
		Value : String
	}
};
alter type Period
{
	create representation Period
	{
		StartElement : FHIRDateTime, 
		Start : String, 
		EndElement : FHIRDateTime, 
		End : String
	}
};
create type ResourceReference from class "Hl7.Fhir.Model.ResourceReference" is { Element };
alter type ResourceReference
{
	create representation ResourceReference
	{
		ReferenceElement : FHIRString, 
		Reference : String, 
		Identifier : Identifier, 
		DisplayElement : FHIRString, 
		Display : String, 
		Url : String
	}
};
alter type Identifier
{
	create representation Identifier
	{
		UseElement : Code, 
		Use : String, 
		Type : CodeableConcept, 
		SystemElement : FHIRUri, 
		System : String, 
		ValueElement : FHIRString, 
		Value : String, 
		Period : Period, 
		Assigner : ResourceReference
	}
};
create type ContactDetail from class "Hl7.Fhir.Model.ContactDetail" is { Element };
create type ContactPoint from class "Hl7.Fhir.Model.ContactPoint" is { Element };
create type PositiveInt from class "Hl7.Fhir.Model.PositiveInt" is { Element };
alter type PositiveInt
{
	create representation PositiveInt
	{
		Value : Integer
	}
};
alter type ContactPoint
{
	create representation ContactPoint
	{
		SystemElement : Code, 
		System : String, 
		ValueElement : FHIRString, 
		Value : String, 
		UseElement : Code, 
		Use : String, 
		RankElement : PositiveInt, 
		Rank : Integer, 
		Period : Period
	}
};
alter type ContactDetail
{
	create representation ContactDetail
	{
		NameElement : FHIRString, 
		Name : String, 
		Telecom : list(ContactPoint)
	}
};
create type Markdown from class "Hl7.Fhir.Model.Markdown" is { Element };
alter type Markdown
{
	create representation Markdown
	{
		Value : String
	}
};
create type UsageContext from class "Hl7.Fhir.Model.UsageContext" is { Element };
alter type UsageContext
{
	create representation UsageContext
	{
		Code : Coding, 
		Value : Element
	}
};
create type BackboneElement from class "Hl7.Fhir.Model.BackboneElement" is { Element };
alter type BackboneElement
{
	create representation BackboneElement
	{
		ModifierExtension : list(Extension)
	}
};
create type StructureDefinition.MappingComponent from class "Hl7.Fhir.Model.StructureDefinition+MappingComponent" is { BackboneElement };
alter type StructureDefinition.MappingComponent
{
	create representation StructureDefinition.MappingComponent
	{
		IdentityElement : Id, 
		Identity : String, 
		UriElement : FHIRUri, 
		Uri : String, 
		NameElement : FHIRString, 
		Name : String, 
		CommentElement : FHIRString, 
		Comment : String
	}
};
create type StructureDefinition.SnapshotComponent from class "Hl7.Fhir.Model.StructureDefinition+SnapshotComponent" is { BackboneElement };
create type ElementDefinition from class "Hl7.Fhir.Model.ElementDefinition" is { Element };
create type ElementDefinition.SlicingComponent from class "Hl7.Fhir.Model.ElementDefinition+SlicingComponent" is { Element };
create type ElementDefinition.DiscriminatorComponent from class "Hl7.Fhir.Model.ElementDefinition+DiscriminatorComponent" is { Element };
alter type ElementDefinition.DiscriminatorComponent
{
	create representation ElementDefinition.DiscriminatorComponent
	{
		TypeElement : Code, 
		Type : String, 
		PathElement : FHIRString, 
		Path : String
	}
};
alter type ElementDefinition.SlicingComponent
{
	create representation ElementDefinition.SlicingComponent
	{
		Discriminator : list(ElementDefinition.DiscriminatorComponent), 
		DescriptionElement : FHIRString, 
		Description : String, 
		OrderedElement : FHIRBoolean, 
		Ordered : Boolean, 
		RulesElement : Code, 
		Rules : String
	}
};
create type UnsignedInt from class "Hl7.Fhir.Model.UnsignedInt" is { Element };
alter type UnsignedInt
{
	create representation UnsignedInt
	{
		Value : Integer
	}
};
create type ElementDefinition.BaseComponent from class "Hl7.Fhir.Model.ElementDefinition+BaseComponent" is { Element };
alter type ElementDefinition.BaseComponent
{
	create representation ElementDefinition.BaseComponent
	{
		PathElement : FHIRString, 
		Path : String, 
		MinElement : UnsignedInt, 
		Min : Integer, 
		MaxElement : FHIRString, 
		Max : String
	}
};
create type ElementDefinition.TypeRefComponent from class "Hl7.Fhir.Model.ElementDefinition+TypeRefComponent" is { Element };
alter type ElementDefinition.TypeRefComponent
{
	create representation ElementDefinition.TypeRefComponent
	{
		CodeElement : FHIRUri, 
		Code : String, 
		ProfileElement : FHIRUri, 
		Profile : String, 
		TargetProfileElement : FHIRUri, 
		TargetProfile : String, 
		AggregationElement : list(Code), 
		Aggregation : list(String), 
		VersioningElement : Code, 
		Versioning : String
	}
};
create type ElementDefinition.ExampleComponent from class "Hl7.Fhir.Model.ElementDefinition+ExampleComponent" is { Element };
alter type ElementDefinition.ExampleComponent
{
	create representation ElementDefinition.ExampleComponent
	{
		LabelElement : FHIRString, 
		Label : String, 
		Value : Element
	}
};
create type FHIRInteger from class "Hl7.Fhir.Model.Integer" is { Element };
alter type FHIRInteger
{
	create representation FHIRInteger
	{
		Value : Integer
	}
};
create type ElementDefinition.ConstraintComponent from class "Hl7.Fhir.Model.ElementDefinition+ConstraintComponent" is { Element };
alter type ElementDefinition.ConstraintComponent
{
	create representation ElementDefinition.ConstraintComponent
	{
		KeyElement : Id, 
		Key : String, 
		RequirementsElement : FHIRString, 
		Requirements : String, 
		SeverityElement : Code, 
		Severity : String, 
		HumanElement : FHIRString, 
		Human : String, 
		ExpressionElement : FHIRString, 
		Expression : String, 
		XpathElement : FHIRString, 
		Xpath : String, 
		SourceElement : FHIRUri, 
		Source : String
	}
};
create type ElementDefinition.ElementDefinitionBindingComponent from class "Hl7.Fhir.Model.ElementDefinition+ElementDefinitionBindingComponent" is { Element };
alter type ElementDefinition.ElementDefinitionBindingComponent
{
	create representation ElementDefinition.ElementDefinitionBindingComponent
	{
		StrengthElement : Code, 
		Strength : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		ValueSet : Element
	}
};
create type ElementDefinition.MappingComponent from class "Hl7.Fhir.Model.ElementDefinition+MappingComponent" is { Element };
alter type ElementDefinition.MappingComponent
{
	create representation ElementDefinition.MappingComponent
	{
		IdentityElement : Id, 
		Identity : String, 
		LanguageElement : Code, 
		Language : String, 
		MapElement : FHIRString, 
		Map : String, 
		CommentElement : FHIRString, 
		Comment : String
	}
};
alter type ElementDefinition
{
	create representation ElementDefinition
	{
		NameReference : String, 
		Name : String, 
		PathElement : FHIRString, 
		Path : String, 
		RepresentationElement : list(Code), 
		Representation : list(String), 
		SliceNameElement : FHIRString, 
		SliceName : String, 
		LabelElement : FHIRString, 
		Label : String, 
		Code : list(Coding), 
		Slicing : ElementDefinition.SlicingComponent, 
		ShortElement : FHIRString, 
		Short : String, 
		DefinitionElement : Markdown, 
		Definition : String, 
		CommentElement : Markdown, 
		Comment : String, 
		RequirementsElement : Markdown, 
		Requirements : String, 
		AliasElement : list(FHIRString), 
		Alias : list(String), 
		MinElement : UnsignedInt, 
		Min : Integer, 
		MaxElement : FHIRString, 
		Max : String, 
		Base : ElementDefinition.BaseComponent, 
		ContentReferenceElement : FHIRUri, 
		ContentReference : String, 
		Type : list(ElementDefinition.TypeRefComponent), 
		DefaultValue : Element, 
		MeaningWhenMissingElement : Markdown, 
		MeaningWhenMissing : String, 
		OrderMeaningElement : FHIRString, 
		OrderMeaning : String, 
		Fixed : Element, 
		Pattern : Element, 
		Example : list(ElementDefinition.ExampleComponent), 
		MinValue : Element, 
		MaxValue : Element, 
		MaxLengthElement : FHIRInteger, 
		MaxLength : Integer, 
		ConditionElement : list(Id), 
		Condition : list(String), 
		Constraint : list(ElementDefinition.ConstraintComponent), 
		MustSupportElement : FHIRBoolean, 
		MustSupport : Boolean, 
		IsModifierElement : FHIRBoolean, 
		IsModifier : Boolean, 
		IsSummaryElement : FHIRBoolean, 
		IsSummary : Boolean, 
		Binding : ElementDefinition.ElementDefinitionBindingComponent, 
		Mapping : list(ElementDefinition.MappingComponent)
	}
};
alter type StructureDefinition.SnapshotComponent
{
	create representation StructureDefinition.SnapshotComponent
	{
		Element : list(ElementDefinition)
	}
};
create type StructureDefinition.DifferentialComponent from class "Hl7.Fhir.Model.StructureDefinition+DifferentialComponent" is { BackboneElement };
alter type StructureDefinition.DifferentialComponent
{
	create representation StructureDefinition.DifferentialComponent
	{
		Element : list(ElementDefinition)
	}
};
alter type StructureDefinition
{
	create representation StructureDefinition
	{
		ConstrainedType : String, 
		Base : String, 
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Purpose : Markdown, 
		Copyright : Markdown, 
		Keyword : list(Coding), 
		FhirVersionElement : Id, 
		FhirVersion : String, 
		Mapping : list(StructureDefinition.MappingComponent), 
		KindElement : Code, 
		Kind : String, 
		AbstractElement : FHIRBoolean, 
		Abstract : Boolean, 
		ContextTypeElement : Code, 
		ContextType : String, 
		ContextElement : list(FHIRString), 
		Context : list(String), 
		ContextInvariantElement : list(FHIRString), 
		ContextInvariant : list(String), 
		TypeElement : Code, 
		Type : String, 
		BaseDefinitionElement : FHIRUri, 
		BaseDefinition : String, 
		DerivationElement : Code, 
		Derivation : String, 
		Snapshot : StructureDefinition.SnapshotComponent, 
		Differential : StructureDefinition.DifferentialComponent
	}
};
create type Parameters from class "Hl7.Fhir.Model.Parameters" is { Resource };
create type Parameters.ParameterComponent from class "Hl7.Fhir.Model.Parameters+ParameterComponent" is { BackboneElement };
alter type Parameters.ParameterComponent
{
	create representation Parameters.ParameterComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Value : Element, 
		Resource : Resource, 
		Part : list(Parameters.ParameterComponent)
	}
};
alter type Parameters
{
	create representation Parameters
	{
		Parameter : list(Parameters.ParameterComponent)
	}
};
create type Query from class "Hl7.Fhir.Model.Query" is { Parameters };
create type Bundle.EntryComponent from class "Hl7.Fhir.Model.Bundle+EntryComponent" is { BackboneElement };
create type Bundle.LinkComponent from class "Hl7.Fhir.Model.Bundle+LinkComponent" is { BackboneElement };
alter type Bundle.LinkComponent
{
	create representation Bundle.LinkComponent
	{
		RelationElement : FHIRString, 
		Relation : String, 
		UrlElement : FHIRUri, 
		Url : String
	}
};
create type Bundle.SearchComponent from class "Hl7.Fhir.Model.Bundle+SearchComponent" is { BackboneElement };
create type FHIRDecimal from class "Hl7.Fhir.Model.FhirDecimal" is { Element };
alter type FHIRDecimal
{
	create representation FHIRDecimal
	{
		Value : Decimal
	}
};
alter type Bundle.SearchComponent
{
	create representation Bundle.SearchComponent
	{
		ModeElement : Code, 
		Mode : String, 
		ScoreElement : FHIRDecimal, 
		Score : Decimal
	}
};
create type Bundle.RequestComponent from class "Hl7.Fhir.Model.Bundle+RequestComponent" is { BackboneElement };
alter type Bundle.RequestComponent
{
	create representation Bundle.RequestComponent
	{
		MethodElement : Code, 
		Method : String, 
		UrlElement : FHIRUri, 
		Url : String, 
		IfNoneMatchElement : FHIRString, 
		IfNoneMatch : String, 
		IfModifiedSinceElement : Instant, 
		IfModifiedSince : DateTime, 
		IfMatchElement : FHIRString, 
		IfMatch : String, 
		IfNoneExistElement : FHIRString, 
		IfNoneExist : String
	}
};
create type Bundle.ResponseComponent from class "Hl7.Fhir.Model.Bundle+ResponseComponent" is { BackboneElement };
alter type Bundle.ResponseComponent
{
	create representation Bundle.ResponseComponent
	{
		StatusElement : FHIRString, 
		Status : String, 
		LocationElement : FHIRUri, 
		Location : String, 
		EtagElement : FHIRString, 
		Etag : String, 
		LastModifiedElement : Instant, 
		LastModified : DateTime, 
		Outcome : Resource
	}
};
alter type Bundle.EntryComponent
{
	create representation Bundle.EntryComponent
	{
		Base : String, 
		Link : list(Bundle.LinkComponent), 
		FullUrlElement : FHIRUri, 
		FullUrl : String, 
		Resource : Resource, 
		Search : Bundle.SearchComponent, 
		Request : Bundle.RequestComponent, 
		Response : Bundle.ResponseComponent
	}
};
create type ResourceEntry from class "Hl7.Fhir.Model.ResourceEntry" is { Bundle.EntryComponent };
create type Flag from class "Hl7.Fhir.Model.Flag" is { DomainResource };
alter type Flag
{
	create representation Flag
	{
		Note : CodeableConcept, 
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Category : CodeableConcept, 
		Code : CodeableConcept, 
		Subject : ResourceReference, 
		Period : Period, 
		Encounter : ResourceReference, 
		Author : ResourceReference
	}
};
create type Alert from class "Hl7.Fhir.Model.Alert" is { Flag };
create type Observation from class "Hl7.Fhir.Model.Observation" is { DomainResource };
create type Observation.ReferenceRangeComponent from class "Hl7.Fhir.Model.Observation+ReferenceRangeComponent" is { BackboneElement };
create type Quantity from class "Hl7.Fhir.Model.Quantity" is { Element };
alter type Quantity
{
	create representation Quantity
	{
		ValueElement : FHIRDecimal, 
		Value : Decimal, 
		ComparatorElement : Code, 
		Comparator : String, 
		UnitElement : FHIRString, 
		Unit : String, 
		SystemElement : FHIRUri, 
		System : String, 
		CodeElement : Code, 
		Code : String
	}
};
create type SimpleQuantity from class "Hl7.Fhir.Model.SimpleQuantity" is { Quantity };
create type Range from class "Hl7.Fhir.Model.Range" is { Element };
alter type Range
{
	create representation Range
	{
		Low : Quantity, 
		High : Quantity
	}
};
alter type Observation.ReferenceRangeComponent
{
	create representation Observation.ReferenceRangeComponent
	{
		Low : SimpleQuantity, 
		High : SimpleQuantity, 
		Type : CodeableConcept, 
		AppliesTo : list(CodeableConcept), 
		Age : Range, 
		TextElement : FHIRString, 
		Text : String
	}
};
create type Observation.RelatedComponent from class "Hl7.Fhir.Model.Observation+RelatedComponent" is { BackboneElement };
alter type Observation.RelatedComponent
{
	create representation Observation.RelatedComponent
	{
		TypeElement : Code, 
		Type : String, 
		Target : ResourceReference
	}
};
create type Observation.ComponentComponent from class "Hl7.Fhir.Model.Observation+ComponentComponent" is { BackboneElement };
alter type Observation.ComponentComponent
{
	create representation Observation.ComponentComponent
	{
		Code : CodeableConcept, 
		Value : Element, 
		DataAbsentReason : CodeableConcept, 
		Interpretation : CodeableConcept, 
		ReferenceRange : list(Observation.ReferenceRangeComponent)
	}
};
alter type Observation
{
	create representation Observation
	{
		Name : CodeableConcept, 
		Applies : FHIRDateTime, 
		Identifier : list(Identifier), 
		BasedOn : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		Category : list(CodeableConcept), 
		Code : CodeableConcept, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Effective : Element, 
		IssuedElement : Instant, 
		Issued : DateTime, 
		Performer : list(ResourceReference), 
		Value : Element, 
		DataAbsentReason : CodeableConcept, 
		Interpretation : CodeableConcept, 
		CommentElement : FHIRString, 
		Comment : String, 
		BodySite : CodeableConcept, 
		Method : CodeableConcept, 
		Specimen : ResourceReference, 
		Device : ResourceReference, 
		ReferenceRange : list(Observation.ReferenceRangeComponent), 
		Related : list(Observation.RelatedComponent), 
		Component : list(Observation.ComponentComponent)
	}
};
create type Base64Binary from class "Hl7.Fhir.Model.Base64Binary" is { Element };
alter type Base64Binary
{
	create representation Base64Binary
	{
		Value : Binary
	}
};
create type Binary from class "Hl7.Fhir.Model.Binary" is { Resource };
alter type Binary
{
	create representation Binary
	{
		ContentTypeElement : Code, 
		ContentType : String, 
		SecurityContext : ResourceReference, 
		ContentElement : Base64Binary, 
		Content : Binary
	}
};
create type Bundle from class "Hl7.Fhir.Model.Bundle" is { Resource };
create type Signature from class "Hl7.Fhir.Model.Signature" is { Element };
alter type Signature
{
	create representation Signature
	{
		Type : list(Coding), 
		WhenElement : Instant, 
		When : DateTime, 
		Who : Element, 
		OnBehalfOf : Element, 
		ContentTypeElement : Code, 
		ContentType : String, 
		BlobElement : Base64Binary, 
		Blob : Binary
	}
};
alter type Bundle
{
	create representation Bundle
	{
		Base : String, 
		SelfLink : String, 
		FirstLink : String, 
		PreviousLink : String, 
		NextLink : String, 
		LastLink : String, 
		SearchLink : String, 
		PredecessorVersionLink : String, 
		Alternate : String, 
		Identifier : Identifier, 
		TypeElement : Code, 
		Type : String, 
		TotalElement : UnsignedInt, 
		Total : Integer, 
		Link : list(Bundle.LinkComponent), 
		Entry : list(Bundle.EntryComponent), 
		Signature : Signature
	}
};
create type CodeSystem from class "Hl7.Fhir.Model.CodeSystem" is { DomainResource };
create type CodeSystem.FilterComponent from class "Hl7.Fhir.Model.CodeSystem+FilterComponent" is { BackboneElement };
alter type CodeSystem.FilterComponent
{
	create representation CodeSystem.FilterComponent
	{
		CodeElement : Code, 
		Code : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		OperatorElement : list(Code), 
		Operator : list(String), 
		ValueElement : FHIRString, 
		Value : String
	}
};
create type CodeSystem.PropertyComponent from class "Hl7.Fhir.Model.CodeSystem+PropertyComponent" is { BackboneElement };
alter type CodeSystem.PropertyComponent
{
	create representation CodeSystem.PropertyComponent
	{
		CodeElement : Code, 
		Code : String, 
		UriElement : FHIRUri, 
		Uri : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		TypeElement : Code, 
		Type : String
	}
};
create type CodeSystem.ConceptDefinitionComponent from class "Hl7.Fhir.Model.CodeSystem+ConceptDefinitionComponent" is { BackboneElement };
create type CodeSystem.DesignationComponent from class "Hl7.Fhir.Model.CodeSystem+DesignationComponent" is { BackboneElement };
alter type CodeSystem.DesignationComponent
{
	create representation CodeSystem.DesignationComponent
	{
		LanguageElement : Code, 
		Language : String, 
		Use : Coding, 
		ValueElement : FHIRString, 
		Value : String
	}
};
create type CodeSystem.ConceptPropertyComponent from class "Hl7.Fhir.Model.CodeSystem+ConceptPropertyComponent" is { BackboneElement };
alter type CodeSystem.ConceptPropertyComponent
{
	create representation CodeSystem.ConceptPropertyComponent
	{
		CodeElement : Code, 
		Code : String, 
		Value : Element
	}
};
alter type CodeSystem.ConceptDefinitionComponent
{
	create representation CodeSystem.ConceptDefinitionComponent
	{
		CodeElement : Code, 
		Code : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		DefinitionElement : FHIRString, 
		Definition : String, 
		Designation : list(CodeSystem.DesignationComponent), 
		Property : list(CodeSystem.ConceptPropertyComponent), 
		Concept : list(CodeSystem.ConceptDefinitionComponent)
	}
};
alter type CodeSystem
{
	create representation CodeSystem
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : Identifier, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Purpose : Markdown, 
		Copyright : Markdown, 
		CaseSensitiveElement : FHIRBoolean, 
		CaseSensitive : Boolean, 
		ValueSetElement : FHIRUri, 
		ValueSet : String, 
		HierarchyMeaningElement : Code, 
		HierarchyMeaning : String, 
		CompositionalElement : FHIRBoolean, 
		Compositional : Boolean, 
		VersionNeededElement : FHIRBoolean, 
		VersionNeeded : Boolean, 
		ContentElement : Code, 
		Content : String, 
		CountElement : UnsignedInt, 
		Count : Integer, 
		Filter : list(CodeSystem.FilterComponent), 
		Property : list(CodeSystem.PropertyComponent), 
		Concept : list(CodeSystem.ConceptDefinitionComponent)
	}
};
create type ConceptMap from class "Hl7.Fhir.Model.ConceptMap" is { DomainResource };
create type ConceptMap.GroupComponent from class "Hl7.Fhir.Model.ConceptMap+GroupComponent" is { BackboneElement };
create type ConceptMap.SourceElementComponent from class "Hl7.Fhir.Model.ConceptMap+SourceElementComponent" is { BackboneElement };
create type ConceptMap.TargetElementComponent from class "Hl7.Fhir.Model.ConceptMap+TargetElementComponent" is { BackboneElement };
create type ConceptMap.OtherElementComponent from class "Hl7.Fhir.Model.ConceptMap+OtherElementComponent" is { BackboneElement };
alter type ConceptMap.OtherElementComponent
{
	create representation ConceptMap.OtherElementComponent
	{
		PropertyElement : FHIRUri, 
		Property : String, 
		SystemElement : FHIRUri, 
		System : String, 
		CodeElement : FHIRString, 
		Code : String, 
		DisplayElement : FHIRString, 
		Display : String
	}
};
alter type ConceptMap.TargetElementComponent
{
	create representation ConceptMap.TargetElementComponent
	{
		CodeElement : Code, 
		Code : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		EquivalenceElement : Code, 
		Equivalence : String, 
		CommentElement : FHIRString, 
		Comment : String, 
		DependsOn : list(ConceptMap.OtherElementComponent), 
		Product : list(ConceptMap.OtherElementComponent)
	}
};
alter type ConceptMap.SourceElementComponent
{
	create representation ConceptMap.SourceElementComponent
	{
		CodeElement : Code, 
		Code : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		Target : list(ConceptMap.TargetElementComponent)
	}
};
create type ConceptMap.UnmappedComponent from class "Hl7.Fhir.Model.ConceptMap+UnmappedComponent" is { BackboneElement };
alter type ConceptMap.UnmappedComponent
{
	create representation ConceptMap.UnmappedComponent
	{
		ModeElement : Code, 
		Mode : String, 
		CodeElement : Code, 
		Code : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		UrlElement : FHIRUri, 
		Url : String
	}
};
alter type ConceptMap.GroupComponent
{
	create representation ConceptMap.GroupComponent
	{
		SourceElement : FHIRUri, 
		Source : String, 
		SourceVersionElement : FHIRString, 
		SourceVersion : String, 
		TargetElement : FHIRUri, 
		Target : String, 
		TargetVersionElement : FHIRString, 
		TargetVersion : String, 
		Element : list(ConceptMap.SourceElementComponent), 
		Unmapped : ConceptMap.UnmappedComponent
	}
};
alter type ConceptMap
{
	create representation ConceptMap
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : Identifier, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Purpose : Markdown, 
		Copyright : Markdown, 
		Source : Element, 
		Target : Element, 
		Group : list(ConceptMap.GroupComponent)
	}
};
create type FHIRDate from class "Hl7.Fhir.Model.Date" is { Element };
alter type FHIRDate
{
	create representation FHIRDate
	{
		Value : String
	}
};
create type Account from class "Hl7.Fhir.Model.Account" is { DomainResource };
create type Money from class "Hl7.Fhir.Model.Money" is { Quantity };
create type Account.CoverageComponent from class "Hl7.Fhir.Model.Account+CoverageComponent" is { BackboneElement };
alter type Account.CoverageComponent
{
	create representation Account.CoverageComponent
	{
		Coverage : ResourceReference, 
		PriorityElement : PositiveInt, 
		Priority : Integer
	}
};
create type Account.GuarantorComponent from class "Hl7.Fhir.Model.Account+GuarantorComponent" is { BackboneElement };
alter type Account.GuarantorComponent
{
	create representation Account.GuarantorComponent
	{
		Party : ResourceReference, 
		OnHoldElement : FHIRBoolean, 
		OnHold : Boolean, 
		Period : Period
	}
};
alter type Account
{
	create representation Account
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Type : CodeableConcept, 
		NameElement : FHIRString, 
		Name : String, 
		Subject : ResourceReference, 
		Period : Period, 
		Active : Period, 
		Balance : Money, 
		Coverage : list(Account.CoverageComponent), 
		Owner : ResourceReference, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Guarantor : list(Account.GuarantorComponent)
	}
};
create type ActivityDefinition from class "Hl7.Fhir.Model.ActivityDefinition" is { DomainResource };
create type Contributor from class "Hl7.Fhir.Model.Contributor" is { Element };
alter type Contributor
{
	create representation Contributor
	{
		TypeElement : Code, 
		Type : String, 
		NameElement : FHIRString, 
		Name : String, 
		Contact : list(ContactDetail)
	}
};
create type RelatedArtifact from class "Hl7.Fhir.Model.RelatedArtifact" is { Element };
create type Attachment from class "Hl7.Fhir.Model.Attachment" is { Element };
alter type Attachment
{
	create representation Attachment
	{
		ContentTypeElement : Code, 
		ContentType : String, 
		LanguageElement : Code, 
		Language : String, 
		DataElement : Base64Binary, 
		Data : Binary, 
		UrlElement : FHIRUri, 
		Url : String, 
		SizeElement : UnsignedInt, 
		Size : Integer, 
		HashElement : Base64Binary, 
		Hash : Binary, 
		TitleElement : FHIRString, 
		Title : String, 
		CreationElement : FHIRDateTime, 
		Creation : String
	}
};
alter type RelatedArtifact
{
	create representation RelatedArtifact
	{
		TypeElement : Code, 
		Type : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		CitationElement : FHIRString, 
		Citation : String, 
		UrlElement : FHIRUri, 
		Url : String, 
		Document : Attachment, 
		Resource : ResourceReference
	}
};
create type ActivityDefinition.ParticipantComponent from class "Hl7.Fhir.Model.ActivityDefinition+ParticipantComponent" is { BackboneElement };
alter type ActivityDefinition.ParticipantComponent
{
	create representation ActivityDefinition.ParticipantComponent
	{
		TypeElement : Code, 
		Type : String, 
		Role : CodeableConcept
	}
};
create type Dosage from class "Hl7.Fhir.Model.Dosage" is { Element };
create type Timing from class "Hl7.Fhir.Model.Timing" is { Element };
create type Timing.RepeatComponent from class "Hl7.Fhir.Model.Timing+RepeatComponent" is { Element };
create type FHIRTime from class "Hl7.Fhir.Model.Time" is { Element };
alter type FHIRTime
{
	create representation FHIRTime
	{
		Value : String
	}
};
alter type Timing.RepeatComponent
{
	create representation Timing.RepeatComponent
	{
		Bounds : Element, 
		CountElement : FHIRInteger, 
		Count : Integer, 
		CountMaxElement : FHIRInteger, 
		CountMax : Integer, 
		DurationElement : FHIRDecimal, 
		Duration : Decimal, 
		DurationMaxElement : FHIRDecimal, 
		DurationMax : Decimal, 
		DurationUnitElement : Code, 
		DurationUnit : String, 
		FrequencyElement : FHIRInteger, 
		Frequency : Integer, 
		FrequencyMaxElement : FHIRInteger, 
		FrequencyMax : Integer, 
		PeriodElement : FHIRDecimal, 
		Period : Decimal, 
		PeriodMaxElement : FHIRDecimal, 
		PeriodMax : Decimal, 
		PeriodUnitElement : Code, 
		PeriodUnit : String, 
		DayOfWeekElement : list(Code), 
		DayOfWeek : list(String), 
		TimeOfDayElement : list(FHIRTime), 
		TimeOfDay : list(String), 
		WhenElement : list(Code), 
		When : list(String), 
		OffsetElement : UnsignedInt, 
		Offset : Integer
	}
};
alter type Timing
{
	create representation Timing
	{
		EventElement : list(FHIRDateTime), 
		Event : list(String), 
		Repeat : Timing.RepeatComponent, 
		Code : CodeableConcept
	}
};
create type Ratio from class "Hl7.Fhir.Model.Ratio" is { Element };
alter type Ratio
{
	create representation Ratio
	{
		Numerator : Quantity, 
		Denominator : Quantity
	}
};
alter type Dosage
{
	create representation Dosage
	{
		SequenceElement : FHIRInteger, 
		Sequence : Integer, 
		TextElement : FHIRString, 
		Text : String, 
		AdditionalInstruction : list(CodeableConcept), 
		PatientInstructionElement : FHIRString, 
		PatientInstruction : String, 
		Timing : Timing, 
		AsNeeded : Element, 
		Site : CodeableConcept, 
		Route : CodeableConcept, 
		Method : CodeableConcept, 
		Dose : Element, 
		MaxDosePerPeriod : Ratio, 
		MaxDosePerAdministration : Quantity, 
		MaxDosePerLifetime : Quantity, 
		Rate : Element
	}
};
create type ActivityDefinition.DynamicValueComponent from class "Hl7.Fhir.Model.ActivityDefinition+DynamicValueComponent" is { BackboneElement };
alter type ActivityDefinition.DynamicValueComponent
{
	create representation ActivityDefinition.DynamicValueComponent
	{
		DescriptionElement : FHIRString, 
		Description : String, 
		PathElement : FHIRString, 
		Path : String, 
		LanguageElement : FHIRString, 
		Language : String, 
		ExpressionElement : FHIRString, 
		Expression : String
	}
};
alter type ActivityDefinition
{
	create representation ActivityDefinition
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Description : Markdown, 
		Purpose : Markdown, 
		UsageElement : FHIRString, 
		Usage : String, 
		ApprovalDateElement : FHIRDate, 
		ApprovalDate : String, 
		LastReviewDateElement : FHIRDate, 
		LastReviewDate : String, 
		EffectivePeriod : Period, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Topic : list(CodeableConcept), 
		Contributor : list(Contributor), 
		Contact : list(ContactDetail), 
		Copyright : Markdown, 
		RelatedArtifact : list(RelatedArtifact), 
		Library : list(ResourceReference), 
		KindElement : Code, 
		Kind : String, 
		Code : CodeableConcept, 
		Timing : Element, 
		Location : ResourceReference, 
		Participant : list(ActivityDefinition.ParticipantComponent), 
		Product : Element, 
		Quantity : SimpleQuantity, 
		Dosage : list(Dosage), 
		BodySite : list(CodeableConcept), 
		Transform : ResourceReference, 
		DynamicValue : list(ActivityDefinition.DynamicValueComponent)
	}
};
create type Address from class "Hl7.Fhir.Model.Address" is { Element };
alter type Address
{
	create representation Address
	{
		UseElement : Code, 
		Use : String, 
		TypeElement : Code, 
		Type : String, 
		TextElement : FHIRString, 
		Text : String, 
		LineElement : list(FHIRString), 
		Line : list(String), 
		CityElement : FHIRString, 
		City : String, 
		DistrictElement : FHIRString, 
		District : String, 
		StateElement : FHIRString, 
		State : String, 
		PostalCodeElement : FHIRString, 
		PostalCode : String, 
		CountryElement : FHIRString, 
		Country : String, 
		Period : Period
	}
};
create type AdverseEvent from class "Hl7.Fhir.Model.AdverseEvent" is { DomainResource };
create type AdverseEvent.SuspectEntityComponent from class "Hl7.Fhir.Model.AdverseEvent+SuspectEntityComponent" is { BackboneElement };
alter type AdverseEvent.SuspectEntityComponent
{
	create representation AdverseEvent.SuspectEntityComponent
	{
		Instance : ResourceReference, 
		CausalityElement : Code, 
		Causality : String, 
		CausalityAssessment : CodeableConcept, 
		CausalityProductRelatednessElement : FHIRString, 
		CausalityProductRelatedness : String, 
		CausalityMethod : CodeableConcept, 
		CausalityAuthor : ResourceReference, 
		CausalityResult : CodeableConcept
	}
};
alter type AdverseEvent
{
	create representation AdverseEvent
	{
		Identifier : Identifier, 
		CategoryElement : Code, 
		Category : String, 
		Type : CodeableConcept, 
		Subject : ResourceReference, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Reaction : list(ResourceReference), 
		Location : ResourceReference, 
		Seriousness : CodeableConcept, 
		Outcome : CodeableConcept, 
		Recorder : ResourceReference, 
		EventParticipant : ResourceReference, 
		DescriptionElement : FHIRString, 
		Description : String, 
		SuspectEntity : list(AdverseEvent.SuspectEntityComponent), 
		SubjectMedicalHistory : list(ResourceReference), 
		ReferenceDocument : list(ResourceReference), 
		Study : list(ResourceReference)
	}
};
create type Age from class "Hl7.Fhir.Model.Age" is { Quantity };
create type AllergyIntolerance from class "Hl7.Fhir.Model.AllergyIntolerance" is { DomainResource };
create type Annotation from class "Hl7.Fhir.Model.Annotation" is { Element };
alter type Annotation
{
	create representation Annotation
	{
		Author : Element, 
		TimeElement : FHIRDateTime, 
		Time : String, 
		TextElement : FHIRString, 
		Text : String
	}
};
create type AllergyIntolerance.ReactionComponent from class "Hl7.Fhir.Model.AllergyIntolerance+ReactionComponent" is { BackboneElement };
alter type AllergyIntolerance.ReactionComponent
{
	create representation AllergyIntolerance.ReactionComponent
	{
		Substance : CodeableConcept, 
		Manifestation : list(CodeableConcept), 
		DescriptionElement : FHIRString, 
		Description : String, 
		OnsetElement : FHIRDateTime, 
		Onset : String, 
		SeverityElement : Code, 
		Severity : String, 
		ExposureRoute : CodeableConcept, 
		Note : list(Annotation)
	}
};
alter type AllergyIntolerance
{
	create representation AllergyIntolerance
	{
		Identifier : list(Identifier), 
		ClinicalStatusElement : Code, 
		ClinicalStatus : String, 
		VerificationStatusElement : Code, 
		VerificationStatus : String, 
		TypeElement : Code, 
		Type : String, 
		CategoryElement : list(Code), 
		Category : list(String), 
		CriticalityElement : Code, 
		Criticality : String, 
		Code : CodeableConcept, 
		Patient : ResourceReference, 
		Onset : Element, 
		AssertedDateElement : FHIRDateTime, 
		AssertedDate : String, 
		Recorder : ResourceReference, 
		Asserter : ResourceReference, 
		LastOccurrenceElement : FHIRDateTime, 
		LastOccurrence : String, 
		Note : list(Annotation), 
		Reaction : list(AllergyIntolerance.ReactionComponent)
	}
};
create type Appointment from class "Hl7.Fhir.Model.Appointment" is { DomainResource };
create type Appointment.ParticipantComponent from class "Hl7.Fhir.Model.Appointment+ParticipantComponent" is { BackboneElement };
alter type Appointment.ParticipantComponent
{
	create representation Appointment.ParticipantComponent
	{
		Type : list(CodeableConcept), 
		Actor : ResourceReference, 
		RequiredElement : Code, 
		Required : String, 
		StatusElement : Code, 
		Status : String
	}
};
alter type Appointment
{
	create representation Appointment
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		ServiceCategory : CodeableConcept, 
		ServiceType : list(CodeableConcept), 
		Specialty : list(CodeableConcept), 
		AppointmentType : CodeableConcept, 
		Reason : list(CodeableConcept), 
		Indication : list(ResourceReference), 
		PriorityElement : UnsignedInt, 
		Priority : Integer, 
		DescriptionElement : FHIRString, 
		Description : String, 
		SupportingInformation : list(ResourceReference), 
		StartElement : Instant, 
		Start : DateTime, 
		EndElement : Instant, 
		End : DateTime, 
		MinutesDurationElement : PositiveInt, 
		MinutesDuration : Integer, 
		Slot : list(ResourceReference), 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		CommentElement : FHIRString, 
		Comment : String, 
		IncomingReferral : list(ResourceReference), 
		Participant : list(Appointment.ParticipantComponent), 
		RequestedPeriod : list(Period)
	}
};
create type AppointmentResponse from class "Hl7.Fhir.Model.AppointmentResponse" is { DomainResource };
alter type AppointmentResponse
{
	create representation AppointmentResponse
	{
		Identifier : list(Identifier), 
		Appointment : ResourceReference, 
		StartElement : Instant, 
		Start : DateTime, 
		EndElement : Instant, 
		End : DateTime, 
		ParticipantType : list(CodeableConcept), 
		Actor : ResourceReference, 
		ParticipantStatusElement : Code, 
		ParticipantStatus : String, 
		CommentElement : FHIRString, 
		Comment : String
	}
};
create type AuditEvent from class "Hl7.Fhir.Model.AuditEvent" is { DomainResource };
create type AuditEvent.AgentComponent from class "Hl7.Fhir.Model.AuditEvent+AgentComponent" is { BackboneElement };
create type AuditEvent.NetworkComponent from class "Hl7.Fhir.Model.AuditEvent+NetworkComponent" is { BackboneElement };
alter type AuditEvent.NetworkComponent
{
	create representation AuditEvent.NetworkComponent
	{
		AddressElement : FHIRString, 
		Address : String, 
		TypeElement : Code, 
		Type : String
	}
};
alter type AuditEvent.AgentComponent
{
	create representation AuditEvent.AgentComponent
	{
		Role : list(CodeableConcept), 
		Reference : ResourceReference, 
		UserId : Identifier, 
		AltIdElement : FHIRString, 
		AltId : String, 
		NameElement : FHIRString, 
		Name : String, 
		RequestorElement : FHIRBoolean, 
		Requestor : Boolean, 
		Location : ResourceReference, 
		PolicyElement : list(FHIRUri), 
		Policy : list(String), 
		Media : Coding, 
		Network : AuditEvent.NetworkComponent, 
		PurposeOfUse : list(CodeableConcept)
	}
};
create type AuditEvent.SourceComponent from class "Hl7.Fhir.Model.AuditEvent+SourceComponent" is { BackboneElement };
alter type AuditEvent.SourceComponent
{
	create representation AuditEvent.SourceComponent
	{
		SiteElement : FHIRString, 
		Site : String, 
		Identifier : Identifier, 
		Type : list(Coding)
	}
};
create type AuditEvent.EntityComponent from class "Hl7.Fhir.Model.AuditEvent+EntityComponent" is { BackboneElement };
create type AuditEvent.DetailComponent from class "Hl7.Fhir.Model.AuditEvent+DetailComponent" is { BackboneElement };
alter type AuditEvent.DetailComponent
{
	create representation AuditEvent.DetailComponent
	{
		TypeElement : FHIRString, 
		Type : String, 
		ValueElement : Base64Binary, 
		Value : Binary
	}
};
alter type AuditEvent.EntityComponent
{
	create representation AuditEvent.EntityComponent
	{
		Identifier : Identifier, 
		Reference : ResourceReference, 
		Type : Coding, 
		Role : Coding, 
		Lifecycle : Coding, 
		SecurityLabel : list(Coding), 
		NameElement : FHIRString, 
		Name : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		QueryElement : Base64Binary, 
		Query : Binary, 
		Detail : list(AuditEvent.DetailComponent)
	}
};
alter type AuditEvent
{
	create representation AuditEvent
	{
		Type : Coding, 
		Subtype : list(Coding), 
		ActionElement : Code, 
		Action : String, 
		RecordedElement : Instant, 
		Recorded : DateTime, 
		OutcomeElement : Code, 
		Outcome : String, 
		OutcomeDescElement : FHIRString, 
		OutcomeDesc : String, 
		PurposeOfEvent : list(CodeableConcept), 
		Agent : list(AuditEvent.AgentComponent), 
		Source : AuditEvent.SourceComponent, 
		Entity : list(AuditEvent.EntityComponent)
	}
};
create type Basic from class "Hl7.Fhir.Model.Basic" is { DomainResource };
alter type Basic
{
	create representation Basic
	{
		Identifier : list(Identifier), 
		Code : CodeableConcept, 
		Subject : ResourceReference, 
		CreatedElement : FHIRDate, 
		Created : String, 
		Author : ResourceReference
	}
};
create type BodySite from class "Hl7.Fhir.Model.BodySite" is { DomainResource };
alter type BodySite
{
	create representation BodySite
	{
		Identifier : list(Identifier), 
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		Code : CodeableConcept, 
		Qualifier : list(CodeableConcept), 
		DescriptionElement : FHIRString, 
		Description : String, 
		Image : list(Attachment), 
		Patient : ResourceReference
	}
};
create type CapabilityStatement from class "Hl7.Fhir.Model.CapabilityStatement" is { DomainResource };
create type CapabilityStatement.SoftwareComponent from class "Hl7.Fhir.Model.CapabilityStatement+SoftwareComponent" is { BackboneElement };
alter type CapabilityStatement.SoftwareComponent
{
	create representation CapabilityStatement.SoftwareComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		VersionElement : FHIRString, 
		Version : String, 
		ReleaseDateElement : FHIRDateTime, 
		ReleaseDate : String
	}
};
create type CapabilityStatement.ImplementationComponent from class "Hl7.Fhir.Model.CapabilityStatement+ImplementationComponent" is { BackboneElement };
alter type CapabilityStatement.ImplementationComponent
{
	create representation CapabilityStatement.ImplementationComponent
	{
		DescriptionElement : FHIRString, 
		Description : String, 
		UrlElement : FHIRUri, 
		Url : String
	}
};
create type CapabilityStatement.RestComponent from class "Hl7.Fhir.Model.CapabilityStatement+RestComponent" is { BackboneElement };
create type CapabilityStatement.SecurityComponent from class "Hl7.Fhir.Model.CapabilityStatement+SecurityComponent" is { BackboneElement };
create type CapabilityStatement.CertificateComponent from class "Hl7.Fhir.Model.CapabilityStatement+CertificateComponent" is { BackboneElement };
alter type CapabilityStatement.CertificateComponent
{
	create representation CapabilityStatement.CertificateComponent
	{
		TypeElement : Code, 
		Type : String, 
		BlobElement : Base64Binary, 
		Blob : Binary
	}
};
alter type CapabilityStatement.SecurityComponent
{
	create representation CapabilityStatement.SecurityComponent
	{
		CorsElement : FHIRBoolean, 
		Cors : Boolean, 
		Service : list(CodeableConcept), 
		DescriptionElement : FHIRString, 
		Description : String, 
		Certificate : list(CapabilityStatement.CertificateComponent)
	}
};
create type CapabilityStatement.ResourceComponent from class "Hl7.Fhir.Model.CapabilityStatement+ResourceComponent" is { BackboneElement };
create type CapabilityStatement.ResourceInteractionComponent from class "Hl7.Fhir.Model.CapabilityStatement+ResourceInteractionComponent" is { BackboneElement };
alter type CapabilityStatement.ResourceInteractionComponent
{
	create representation CapabilityStatement.ResourceInteractionComponent
	{
		CodeElement : Code, 
		Code : String, 
		DocumentationElement : FHIRString, 
		Documentation : String
	}
};
create type CapabilityStatement.SearchParamComponent from class "Hl7.Fhir.Model.CapabilityStatement+SearchParamComponent" is { BackboneElement };
alter type CapabilityStatement.SearchParamComponent
{
	create representation CapabilityStatement.SearchParamComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		DefinitionElement : FHIRUri, 
		Definition : String, 
		TypeElement : Code, 
		Type : String, 
		DocumentationElement : FHIRString, 
		Documentation : String
	}
};
alter type CapabilityStatement.ResourceComponent
{
	create representation CapabilityStatement.ResourceComponent
	{
		TypeElement : Code, 
		Type : String, 
		Profile : ResourceReference, 
		Documentation : Markdown, 
		Interaction : list(CapabilityStatement.ResourceInteractionComponent), 
		VersioningElement : Code, 
		Versioning : String, 
		ReadHistoryElement : FHIRBoolean, 
		ReadHistory : Boolean, 
		UpdateCreateElement : FHIRBoolean, 
		UpdateCreate : Boolean, 
		ConditionalCreateElement : FHIRBoolean, 
		ConditionalCreate : Boolean, 
		ConditionalReadElement : Code, 
		ConditionalRead : String, 
		ConditionalUpdateElement : FHIRBoolean, 
		ConditionalUpdate : Boolean, 
		ConditionalDeleteElement : Code, 
		ConditionalDelete : String, 
		ReferencePolicyElement : list(Code), 
		ReferencePolicy : list(String), 
		SearchIncludeElement : list(FHIRString), 
		SearchInclude : list(String), 
		SearchRevIncludeElement : list(FHIRString), 
		SearchRevInclude : list(String), 
		SearchParam : list(CapabilityStatement.SearchParamComponent)
	}
};
create type CapabilityStatement.SystemInteractionComponent from class "Hl7.Fhir.Model.CapabilityStatement+SystemInteractionComponent" is { BackboneElement };
alter type CapabilityStatement.SystemInteractionComponent
{
	create representation CapabilityStatement.SystemInteractionComponent
	{
		CodeElement : Code, 
		Code : String, 
		DocumentationElement : FHIRString, 
		Documentation : String
	}
};
create type CapabilityStatement.OperationComponent from class "Hl7.Fhir.Model.CapabilityStatement+OperationComponent" is { BackboneElement };
alter type CapabilityStatement.OperationComponent
{
	create representation CapabilityStatement.OperationComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Definition : ResourceReference
	}
};
alter type CapabilityStatement.RestComponent
{
	create representation CapabilityStatement.RestComponent
	{
		ModeElement : Code, 
		Mode : String, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		Security : CapabilityStatement.SecurityComponent, 
		Resource : list(CapabilityStatement.ResourceComponent), 
		Interaction : list(CapabilityStatement.SystemInteractionComponent), 
		SearchParam : list(CapabilityStatement.SearchParamComponent), 
		Operation : list(CapabilityStatement.OperationComponent), 
		CompartmentElement : list(FHIRUri), 
		Compartment : list(String)
	}
};
create type CapabilityStatement.MessagingComponent from class "Hl7.Fhir.Model.CapabilityStatement+MessagingComponent" is { BackboneElement };
create type CapabilityStatement.EndpointComponent from class "Hl7.Fhir.Model.CapabilityStatement+EndpointComponent" is { BackboneElement };
alter type CapabilityStatement.EndpointComponent
{
	create representation CapabilityStatement.EndpointComponent
	{
		Protocol : Coding, 
		AddressElement : FHIRUri, 
		Address : String
	}
};
create type CapabilityStatement.SupportedMessageComponent from class "Hl7.Fhir.Model.CapabilityStatement+SupportedMessageComponent" is { BackboneElement };
alter type CapabilityStatement.SupportedMessageComponent
{
	create representation CapabilityStatement.SupportedMessageComponent
	{
		ModeElement : Code, 
		Mode : String, 
		Definition : ResourceReference
	}
};
create type CapabilityStatement.EventComponent from class "Hl7.Fhir.Model.CapabilityStatement+EventComponent" is { BackboneElement };
alter type CapabilityStatement.EventComponent
{
	create representation CapabilityStatement.EventComponent
	{
		Code : Coding, 
		CategoryElement : Code, 
		Category : String, 
		ModeElement : Code, 
		Mode : String, 
		FocusElement : Code, 
		Focus : String, 
		Request : ResourceReference, 
		Response : ResourceReference, 
		DocumentationElement : FHIRString, 
		Documentation : String
	}
};
alter type CapabilityStatement.MessagingComponent
{
	create representation CapabilityStatement.MessagingComponent
	{
		Endpoint : list(CapabilityStatement.EndpointComponent), 
		ReliableCacheElement : UnsignedInt, 
		ReliableCache : Integer, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		SupportedMessage : list(CapabilityStatement.SupportedMessageComponent), 
		Event : list(CapabilityStatement.EventComponent)
	}
};
create type CapabilityStatement.DocumentComponent from class "Hl7.Fhir.Model.CapabilityStatement+DocumentComponent" is { BackboneElement };
alter type CapabilityStatement.DocumentComponent
{
	create representation CapabilityStatement.DocumentComponent
	{
		ModeElement : Code, 
		Mode : String, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		Profile : ResourceReference
	}
};
alter type CapabilityStatement
{
	create representation CapabilityStatement
	{
		UrlElement : FHIRUri, 
		Url : String, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Purpose : Markdown, 
		Copyright : Markdown, 
		KindElement : Code, 
		Kind : String, 
		InstantiatesElement : list(FHIRUri), 
		Instantiates : list(String), 
		Software : CapabilityStatement.SoftwareComponent, 
		Implementation : CapabilityStatement.ImplementationComponent, 
		FhirVersionElement : Id, 
		FhirVersion : String, 
		AcceptUnknownElement : Code, 
		AcceptUnknown : String, 
		FormatElement : list(Code), 
		Format : list(String), 
		PatchFormatElement : list(Code), 
		PatchFormat : list(String), 
		ImplementationGuideElement : list(FHIRUri), 
		ImplementationGuide : list(String), 
		Profile : list(ResourceReference), 
		Rest : list(CapabilityStatement.RestComponent), 
		Messaging : list(CapabilityStatement.MessagingComponent), 
		Document : list(CapabilityStatement.DocumentComponent)
	}
};
create type CarePlan from class "Hl7.Fhir.Model.CarePlan" is { DomainResource };
create type CarePlan.ActivityComponent from class "Hl7.Fhir.Model.CarePlan+ActivityComponent" is { BackboneElement };
create type CarePlan.DetailComponent from class "Hl7.Fhir.Model.CarePlan+DetailComponent" is { BackboneElement };
alter type CarePlan.DetailComponent
{
	create representation CarePlan.DetailComponent
	{
		Category : CodeableConcept, 
		Definition : ResourceReference, 
		Code : CodeableConcept, 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		Goal : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		StatusReasonElement : FHIRString, 
		StatusReason : String, 
		ProhibitedElement : FHIRBoolean, 
		Prohibited : Boolean, 
		Scheduled : Element, 
		Location : ResourceReference, 
		Performer : list(ResourceReference), 
		Product : Element, 
		DailyAmount : SimpleQuantity, 
		Quantity : SimpleQuantity, 
		DescriptionElement : FHIRString, 
		Description : String
	}
};
alter type CarePlan.ActivityComponent
{
	create representation CarePlan.ActivityComponent
	{
		OutcomeCodeableConcept : list(CodeableConcept), 
		OutcomeReference : list(ResourceReference), 
		Progress : list(Annotation), 
		Reference : ResourceReference, 
		Detail : CarePlan.DetailComponent
	}
};
alter type CarePlan
{
	create representation CarePlan
	{
		Identifier : list(Identifier), 
		Definition : list(ResourceReference), 
		BasedOn : list(ResourceReference), 
		Replaces : list(ResourceReference), 
		PartOf : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		IntentElement : Code, 
		Intent : String, 
		Category : list(CodeableConcept), 
		TitleElement : FHIRString, 
		Title : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Period : Period, 
		Author : list(ResourceReference), 
		CareTeam : list(ResourceReference), 
		Addresses : list(ResourceReference), 
		SupportingInfo : list(ResourceReference), 
		Goal : list(ResourceReference), 
		Activity : list(CarePlan.ActivityComponent), 
		Note : list(Annotation)
	}
};
create type CareTeam from class "Hl7.Fhir.Model.CareTeam" is { DomainResource };
create type CareTeam.ParticipantComponent from class "Hl7.Fhir.Model.CareTeam+ParticipantComponent" is { BackboneElement };
alter type CareTeam.ParticipantComponent
{
	create representation CareTeam.ParticipantComponent
	{
		Role : CodeableConcept, 
		Member : ResourceReference, 
		OnBehalfOf : ResourceReference, 
		Period : Period
	}
};
alter type CareTeam
{
	create representation CareTeam
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Category : list(CodeableConcept), 
		NameElement : FHIRString, 
		Name : String, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Period : Period, 
		Participant : list(CareTeam.ParticipantComponent), 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		ManagingOrganization : list(ResourceReference), 
		Note : list(Annotation)
	}
};
create type ChargeItem from class "Hl7.Fhir.Model.ChargeItem" is { DomainResource };
create type ChargeItem.ParticipantComponent from class "Hl7.Fhir.Model.ChargeItem+ParticipantComponent" is { BackboneElement };
alter type ChargeItem.ParticipantComponent
{
	create representation ChargeItem.ParticipantComponent
	{
		Role : CodeableConcept, 
		Actor : ResourceReference
	}
};
alter type ChargeItem
{
	create representation ChargeItem
	{
		Identifier : Identifier, 
		DefinitionElement : list(FHIRUri), 
		Definition : list(String), 
		StatusElement : Code, 
		Status : String, 
		PartOf : list(ResourceReference), 
		Code : CodeableConcept, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Occurrence : Element, 
		Participant : list(ChargeItem.ParticipantComponent), 
		PerformingOrganization : ResourceReference, 
		RequestingOrganization : ResourceReference, 
		Quantity : Quantity, 
		Bodysite : list(CodeableConcept), 
		FactorOverrideElement : FHIRDecimal, 
		FactorOverride : Decimal, 
		PriceOverride : Money, 
		OverrideReasonElement : FHIRString, 
		OverrideReason : String, 
		Enterer : ResourceReference, 
		EnteredDateElement : FHIRDateTime, 
		EnteredDate : String, 
		Reason : list(CodeableConcept), 
		Service : list(ResourceReference), 
		Account : list(ResourceReference), 
		Note : list(Annotation), 
		SupportingInformation : list(ResourceReference)
	}
};
create type Claim from class "Hl7.Fhir.Model.Claim" is { DomainResource };
create type Claim.RelatedClaimComponent from class "Hl7.Fhir.Model.Claim+RelatedClaimComponent" is { BackboneElement };
alter type Claim.RelatedClaimComponent
{
	create representation Claim.RelatedClaimComponent
	{
		Claim : ResourceReference, 
		Relationship : CodeableConcept, 
		Reference : Identifier
	}
};
create type Claim.PayeeComponent from class "Hl7.Fhir.Model.Claim+PayeeComponent" is { BackboneElement };
alter type Claim.PayeeComponent
{
	create representation Claim.PayeeComponent
	{
		Type : CodeableConcept, 
		ResourceType : Coding, 
		Party : ResourceReference
	}
};
create type Claim.CareTeamComponent from class "Hl7.Fhir.Model.Claim+CareTeamComponent" is { BackboneElement };
alter type Claim.CareTeamComponent
{
	create representation Claim.CareTeamComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Provider : ResourceReference, 
		ResponsibleElement : FHIRBoolean, 
		Responsible : Boolean, 
		Role : CodeableConcept, 
		Qualification : CodeableConcept
	}
};
create type Claim.SpecialConditionComponent from class "Hl7.Fhir.Model.Claim+SpecialConditionComponent" is { BackboneElement };
alter type Claim.SpecialConditionComponent
{
	create representation Claim.SpecialConditionComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Category : CodeableConcept, 
		Code : CodeableConcept, 
		Timing : Element, 
		Value : Element, 
		Reason : CodeableConcept
	}
};
create type Claim.DiagnosisComponent from class "Hl7.Fhir.Model.Claim+DiagnosisComponent" is { BackboneElement };
alter type Claim.DiagnosisComponent
{
	create representation Claim.DiagnosisComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Diagnosis : Element, 
		Type : list(CodeableConcept), 
		PackageCode : CodeableConcept
	}
};
create type Claim.ProcedureComponent from class "Hl7.Fhir.Model.Claim+ProcedureComponent" is { BackboneElement };
alter type Claim.ProcedureComponent
{
	create representation Claim.ProcedureComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Procedure : Element
	}
};
create type Claim.InsuranceComponent from class "Hl7.Fhir.Model.Claim+InsuranceComponent" is { BackboneElement };
alter type Claim.InsuranceComponent
{
	create representation Claim.InsuranceComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		FocalElement : FHIRBoolean, 
		Focal : Boolean, 
		Coverage : ResourceReference, 
		BusinessArrangementElement : FHIRString, 
		BusinessArrangement : String, 
		PreAuthRefElement : list(FHIRString), 
		PreAuthRef : list(String), 
		ClaimResponse : ResourceReference
	}
};
create type Claim.AccidentComponent from class "Hl7.Fhir.Model.Claim+AccidentComponent" is { BackboneElement };
alter type Claim.AccidentComponent
{
	create representation Claim.AccidentComponent
	{
		DateElement : FHIRDate, 
		Date : String, 
		Type : CodeableConcept, 
		Location : Element
	}
};
create type Claim.ItemComponent from class "Hl7.Fhir.Model.Claim+ItemComponent" is { BackboneElement };
create type Claim.DetailComponent from class "Hl7.Fhir.Model.Claim+DetailComponent" is { BackboneElement };
create type Claim.SubDetailComponent from class "Hl7.Fhir.Model.Claim+SubDetailComponent" is { BackboneElement };
alter type Claim.SubDetailComponent
{
	create representation Claim.SubDetailComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Revenue : CodeableConcept, 
		Category : CodeableConcept, 
		Service : CodeableConcept, 
		Modifier : list(CodeableConcept), 
		ProgramCode : list(CodeableConcept), 
		Quantity : SimpleQuantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		Net : Money, 
		Udi : list(ResourceReference)
	}
};
alter type Claim.DetailComponent
{
	create representation Claim.DetailComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Revenue : CodeableConcept, 
		Category : CodeableConcept, 
		Service : CodeableConcept, 
		Modifier : list(CodeableConcept), 
		ProgramCode : list(CodeableConcept), 
		Quantity : SimpleQuantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		Net : Money, 
		Udi : list(ResourceReference), 
		SubDetail : list(Claim.SubDetailComponent)
	}
};
alter type Claim.ItemComponent
{
	create representation Claim.ItemComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		CareTeamLinkIdElement : list(PositiveInt), 
		CareTeamLinkId : list(Integer), 
		DiagnosisLinkIdElement : list(PositiveInt), 
		DiagnosisLinkId : list(Integer), 
		ProcedureLinkIdElement : list(PositiveInt), 
		ProcedureLinkId : list(Integer), 
		InformationLinkIdElement : list(PositiveInt), 
		InformationLinkId : list(Integer), 
		Revenue : CodeableConcept, 
		Category : CodeableConcept, 
		Service : CodeableConcept, 
		Modifier : list(CodeableConcept), 
		ProgramCode : list(CodeableConcept), 
		Serviced : Element, 
		Location : Element, 
		Quantity : SimpleQuantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		Net : Money, 
		Udi : list(ResourceReference), 
		BodySite : CodeableConcept, 
		SubSite : list(CodeableConcept), 
		Encounter : list(ResourceReference), 
		Detail : list(Claim.DetailComponent)
	}
};
alter type Claim
{
	create representation Claim
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Type : CodeableConcept, 
		SubType : list(CodeableConcept), 
		Use_Element : Code, 
		Use_ : String, 
		Patient : ResourceReference, 
		BillablePeriod : Period, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Enterer : ResourceReference, 
		Insurer : ResourceReference, 
		Provider : ResourceReference, 
		Organization : ResourceReference, 
		Priority : CodeableConcept, 
		FundsReserve : CodeableConcept, 
		Related : list(Claim.RelatedClaimComponent), 
		Prescription : ResourceReference, 
		OriginalPrescription : ResourceReference, 
		Payee : Claim.PayeeComponent, 
		Referral : ResourceReference, 
		Facility : ResourceReference, 
		CareTeam : list(Claim.CareTeamComponent), 
		Information : list(Claim.SpecialConditionComponent), 
		Diagnosis : list(Claim.DiagnosisComponent), 
		Procedure : list(Claim.ProcedureComponent), 
		Insurance : list(Claim.InsuranceComponent), 
		Accident : Claim.AccidentComponent, 
		EmploymentImpacted : Period, 
		Hospitalization : Period, 
		Item : list(Claim.ItemComponent), 
		Total : Money
	}
};
create type ClaimResponse from class "Hl7.Fhir.Model.ClaimResponse" is { DomainResource };
create type ClaimResponse.ItemComponent from class "Hl7.Fhir.Model.ClaimResponse+ItemComponent" is { BackboneElement };
create type ClaimResponse.AdjudicationComponent from class "Hl7.Fhir.Model.ClaimResponse+AdjudicationComponent" is { BackboneElement };
alter type ClaimResponse.AdjudicationComponent
{
	create representation ClaimResponse.AdjudicationComponent
	{
		Category : CodeableConcept, 
		Reason : CodeableConcept, 
		Amount : Money, 
		ValueElement : FHIRDecimal, 
		Value : Decimal
	}
};
create type ClaimResponse.ItemDetailComponent from class "Hl7.Fhir.Model.ClaimResponse+ItemDetailComponent" is { BackboneElement };
create type ClaimResponse.SubDetailComponent from class "Hl7.Fhir.Model.ClaimResponse+SubDetailComponent" is { BackboneElement };
alter type ClaimResponse.SubDetailComponent
{
	create representation ClaimResponse.SubDetailComponent
	{
		SequenceLinkIdElement : PositiveInt, 
		SequenceLinkId : Integer, 
		NoteNumberElement : list(PositiveInt), 
		NoteNumber : list(Integer), 
		Adjudication : list(ClaimResponse.AdjudicationComponent)
	}
};
alter type ClaimResponse.ItemDetailComponent
{
	create representation ClaimResponse.ItemDetailComponent
	{
		SequenceLinkIdElement : PositiveInt, 
		SequenceLinkId : Integer, 
		NoteNumberElement : list(PositiveInt), 
		NoteNumber : list(Integer), 
		Adjudication : list(ClaimResponse.AdjudicationComponent), 
		SubDetail : list(ClaimResponse.SubDetailComponent)
	}
};
alter type ClaimResponse.ItemComponent
{
	create representation ClaimResponse.ItemComponent
	{
		SequenceLinkIdElement : PositiveInt, 
		SequenceLinkId : Integer, 
		NoteNumberElement : list(PositiveInt), 
		NoteNumber : list(Integer), 
		Adjudication : list(ClaimResponse.AdjudicationComponent), 
		Detail : list(ClaimResponse.ItemDetailComponent)
	}
};
create type ClaimResponse.AddedItemComponent from class "Hl7.Fhir.Model.ClaimResponse+AddedItemComponent" is { BackboneElement };
create type ClaimResponse.AddedItemsDetailComponent from class "Hl7.Fhir.Model.ClaimResponse+AddedItemsDetailComponent" is { BackboneElement };
alter type ClaimResponse.AddedItemsDetailComponent
{
	create representation ClaimResponse.AddedItemsDetailComponent
	{
		Revenue : CodeableConcept, 
		Category : CodeableConcept, 
		Service : CodeableConcept, 
		Modifier : list(CodeableConcept), 
		Fee : Money, 
		NoteNumberElement : list(PositiveInt), 
		NoteNumber : list(Integer), 
		Adjudication : list(ClaimResponse.AdjudicationComponent)
	}
};
alter type ClaimResponse.AddedItemComponent
{
	create representation ClaimResponse.AddedItemComponent
	{
		SequenceLinkIdElement : list(PositiveInt), 
		SequenceLinkId : list(Integer), 
		Revenue : CodeableConcept, 
		Category : CodeableConcept, 
		Service : CodeableConcept, 
		Modifier : list(CodeableConcept), 
		Fee : Money, 
		NoteNumberElement : list(PositiveInt), 
		NoteNumber : list(Integer), 
		Adjudication : list(ClaimResponse.AdjudicationComponent), 
		Detail : list(ClaimResponse.AddedItemsDetailComponent)
	}
};
create type ClaimResponse.ErrorComponent from class "Hl7.Fhir.Model.ClaimResponse+ErrorComponent" is { BackboneElement };
alter type ClaimResponse.ErrorComponent
{
	create representation ClaimResponse.ErrorComponent
	{
		SequenceLinkIdElement : PositiveInt, 
		SequenceLinkId : Integer, 
		DetailSequenceLinkIdElement : PositiveInt, 
		DetailSequenceLinkId : Integer, 
		SubdetailSequenceLinkIdElement : PositiveInt, 
		SubdetailSequenceLinkId : Integer, 
		Code : CodeableConcept
	}
};
create type ClaimResponse.PaymentComponent from class "Hl7.Fhir.Model.ClaimResponse+PaymentComponent" is { BackboneElement };
alter type ClaimResponse.PaymentComponent
{
	create representation ClaimResponse.PaymentComponent
	{
		Type : CodeableConcept, 
		Adjustment : Money, 
		AdjustmentReason : CodeableConcept, 
		DateElement : FHIRDate, 
		Date : String, 
		Amount : Money, 
		Identifier : Identifier
	}
};
create type ClaimResponse.NoteComponent from class "Hl7.Fhir.Model.ClaimResponse+NoteComponent" is { BackboneElement };
alter type ClaimResponse.NoteComponent
{
	create representation ClaimResponse.NoteComponent
	{
		NumberElement : PositiveInt, 
		Number : Integer, 
		Type : CodeableConcept, 
		TextElement : FHIRString, 
		Text : String, 
		Language : CodeableConcept
	}
};
create type ClaimResponse.InsuranceComponent from class "Hl7.Fhir.Model.ClaimResponse+InsuranceComponent" is { BackboneElement };
alter type ClaimResponse.InsuranceComponent
{
	create representation ClaimResponse.InsuranceComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		FocalElement : FHIRBoolean, 
		Focal : Boolean, 
		Coverage : ResourceReference, 
		BusinessArrangementElement : FHIRString, 
		BusinessArrangement : String, 
		PreAuthRefElement : list(FHIRString), 
		PreAuthRef : list(String), 
		ClaimResponse : ResourceReference
	}
};
alter type ClaimResponse
{
	create representation ClaimResponse
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Patient : ResourceReference, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Insurer : ResourceReference, 
		RequestProvider : ResourceReference, 
		RequestOrganization : ResourceReference, 
		Request : ResourceReference, 
		Outcome : CodeableConcept, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		PayeeType : CodeableConcept, 
		Item : list(ClaimResponse.ItemComponent), 
		AddItem : list(ClaimResponse.AddedItemComponent), 
		Error : list(ClaimResponse.ErrorComponent), 
		TotalCost : Money, 
		UnallocDeductable : Money, 
		TotalBenefit : Money, 
		Payment : ClaimResponse.PaymentComponent, 
		Reserved : Coding, 
		Form : CodeableConcept, 
		ProcessNote : list(ClaimResponse.NoteComponent), 
		CommunicationRequest : list(ResourceReference), 
		Insurance : list(ClaimResponse.InsuranceComponent)
	}
};
create type ClinicalImpression from class "Hl7.Fhir.Model.ClinicalImpression" is { DomainResource };
create type ClinicalImpression.InvestigationComponent from class "Hl7.Fhir.Model.ClinicalImpression+InvestigationComponent" is { BackboneElement };
alter type ClinicalImpression.InvestigationComponent
{
	create representation ClinicalImpression.InvestigationComponent
	{
		Code : CodeableConcept, 
		Item : list(ResourceReference)
	}
};
create type ClinicalImpression.FindingComponent from class "Hl7.Fhir.Model.ClinicalImpression+FindingComponent" is { BackboneElement };
alter type ClinicalImpression.FindingComponent
{
	create representation ClinicalImpression.FindingComponent
	{
		Item : Element, 
		BasisElement : FHIRString, 
		Basis : String
	}
};
alter type ClinicalImpression
{
	create representation ClinicalImpression
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Code : CodeableConcept, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Effective : Element, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Assessor : ResourceReference, 
		Previous : ResourceReference, 
		Problem : list(ResourceReference), 
		Investigation : list(ClinicalImpression.InvestigationComponent), 
		ProtocolElement : list(FHIRUri), 
		Protocol : list(String), 
		SummaryElement : FHIRString, 
		Summary : String, 
		Finding : list(ClinicalImpression.FindingComponent), 
		PrognosisCodeableConcept : list(CodeableConcept), 
		PrognosisReference : list(ResourceReference), 
		Action : list(ResourceReference), 
		Note : list(Annotation)
	}
};
create type Communication from class "Hl7.Fhir.Model.Communication" is { DomainResource };
create type Communication.PayloadComponent from class "Hl7.Fhir.Model.Communication+PayloadComponent" is { BackboneElement };
alter type Communication.PayloadComponent
{
	create representation Communication.PayloadComponent
	{
		Content : Element
	}
};
alter type Communication
{
	create representation Communication
	{
		Identifier : list(Identifier), 
		Definition : list(ResourceReference), 
		BasedOn : list(ResourceReference), 
		PartOf : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		NotDoneElement : FHIRBoolean, 
		NotDone : Boolean, 
		NotDoneReason : CodeableConcept, 
		Category : list(CodeableConcept), 
		Medium : list(CodeableConcept), 
		Subject : ResourceReference, 
		Recipient : list(ResourceReference), 
		Topic : list(ResourceReference), 
		Context : ResourceReference, 
		SentElement : FHIRDateTime, 
		Sent : String, 
		ReceivedElement : FHIRDateTime, 
		Received : String, 
		Sender : ResourceReference, 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		Payload : list(Communication.PayloadComponent), 
		Note : list(Annotation)
	}
};
create type CommunicationRequest from class "Hl7.Fhir.Model.CommunicationRequest" is { DomainResource };
create type CommunicationRequest.PayloadComponent from class "Hl7.Fhir.Model.CommunicationRequest+PayloadComponent" is { BackboneElement };
alter type CommunicationRequest.PayloadComponent
{
	create representation CommunicationRequest.PayloadComponent
	{
		Content : Element
	}
};
create type CommunicationRequest.RequesterComponent from class "Hl7.Fhir.Model.CommunicationRequest+RequesterComponent" is { BackboneElement };
alter type CommunicationRequest.RequesterComponent
{
	create representation CommunicationRequest.RequesterComponent
	{
		Agent : ResourceReference, 
		OnBehalfOf : ResourceReference
	}
};
alter type CommunicationRequest
{
	create representation CommunicationRequest
	{
		Identifier : list(Identifier), 
		BasedOn : list(ResourceReference), 
		Replaces : list(ResourceReference), 
		GroupIdentifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		Category : list(CodeableConcept), 
		PriorityElement : Code, 
		Priority : String, 
		Medium : list(CodeableConcept), 
		Subject : ResourceReference, 
		Recipient : list(ResourceReference), 
		Topic : list(ResourceReference), 
		Context : ResourceReference, 
		Payload : list(CommunicationRequest.PayloadComponent), 
		Occurrence : Element, 
		AuthoredOnElement : FHIRDateTime, 
		AuthoredOn : String, 
		Sender : ResourceReference, 
		Requester : CommunicationRequest.RequesterComponent, 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		Note : list(Annotation)
	}
};
create type CompartmentDefinition from class "Hl7.Fhir.Model.CompartmentDefinition" is { DomainResource };
create type CompartmentDefinition.ResourceComponent from class "Hl7.Fhir.Model.CompartmentDefinition+ResourceComponent" is { BackboneElement };
alter type CompartmentDefinition.ResourceComponent
{
	create representation CompartmentDefinition.ResourceComponent
	{
		CodeElement : Code, 
		Code : String, 
		ParamElement : list(FHIRString), 
		Param : list(String), 
		DocumentationElement : FHIRString, 
		Documentation : String
	}
};
alter type CompartmentDefinition
{
	create representation CompartmentDefinition
	{
		UrlElement : FHIRUri, 
		Url : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		Purpose : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		CodeElement : Code, 
		Code : String, 
		SearchElement : FHIRBoolean, 
		Search : Boolean, 
		Resource : list(CompartmentDefinition.ResourceComponent)
	}
};
create type Composition from class "Hl7.Fhir.Model.Composition" is { DomainResource };
create type Composition.AttesterComponent from class "Hl7.Fhir.Model.Composition+AttesterComponent" is { BackboneElement };
alter type Composition.AttesterComponent
{
	create representation Composition.AttesterComponent
	{
		ModeElement : list(Code), 
		Mode : list(String), 
		TimeElement : FHIRDateTime, 
		Time : String, 
		Party : ResourceReference
	}
};
create type Composition.RelatesToComponent from class "Hl7.Fhir.Model.Composition+RelatesToComponent" is { BackboneElement };
alter type Composition.RelatesToComponent
{
	create representation Composition.RelatesToComponent
	{
		CodeElement : Code, 
		Code : String, 
		Target : Element
	}
};
create type Composition.EventComponent from class "Hl7.Fhir.Model.Composition+EventComponent" is { BackboneElement };
alter type Composition.EventComponent
{
	create representation Composition.EventComponent
	{
		Code : list(CodeableConcept), 
		Period : Period, 
		Detail : list(ResourceReference)
	}
};
create type Composition.SectionComponent from class "Hl7.Fhir.Model.Composition+SectionComponent" is { BackboneElement };
alter type Composition.SectionComponent
{
	create representation Composition.SectionComponent
	{
		TitleElement : FHIRString, 
		Title : String, 
		Code : CodeableConcept, 
		Text : Narrative, 
		ModeElement : Code, 
		Mode : String, 
		OrderedBy : CodeableConcept, 
		Entry : list(ResourceReference), 
		EmptyReason : CodeableConcept, 
		Section : list(Composition.SectionComponent)
	}
};
alter type Composition
{
	create representation Composition
	{
		Identifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		Type : CodeableConcept, 
		Class : CodeableConcept, 
		Subject : ResourceReference, 
		Encounter : ResourceReference, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Author : list(ResourceReference), 
		TitleElement : FHIRString, 
		Title : String, 
		ConfidentialityElement : Code, 
		Confidentiality : String, 
		Attester : list(Composition.AttesterComponent), 
		Custodian : ResourceReference, 
		RelatesTo : list(Composition.RelatesToComponent), 
		Event : list(Composition.EventComponent), 
		Section : list(Composition.SectionComponent)
	}
};
create type Condition from class "Hl7.Fhir.Model.Condition" is { DomainResource };
create type Condition.StageComponent from class "Hl7.Fhir.Model.Condition+StageComponent" is { BackboneElement };
alter type Condition.StageComponent
{
	create representation Condition.StageComponent
	{
		Summary : CodeableConcept, 
		Assessment : list(ResourceReference)
	}
};
create type Condition.EvidenceComponent from class "Hl7.Fhir.Model.Condition+EvidenceComponent" is { BackboneElement };
alter type Condition.EvidenceComponent
{
	create representation Condition.EvidenceComponent
	{
		Code : list(CodeableConcept), 
		Detail : list(ResourceReference)
	}
};
alter type Condition
{
	create representation Condition
	{
		Identifier : list(Identifier), 
		ClinicalStatusElement : Code, 
		ClinicalStatus : String, 
		VerificationStatusElement : Code, 
		VerificationStatus : String, 
		Category : list(CodeableConcept), 
		Severity : CodeableConcept, 
		Code : CodeableConcept, 
		BodySite : list(CodeableConcept), 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Onset : Element, 
		Abatement : Element, 
		AssertedDateElement : FHIRDateTime, 
		AssertedDate : String, 
		Asserter : ResourceReference, 
		Stage : Condition.StageComponent, 
		Evidence : list(Condition.EvidenceComponent), 
		Note : list(Annotation)
	}
};
create type Consent from class "Hl7.Fhir.Model.Consent" is { DomainResource };
create type Consent.ActorComponent from class "Hl7.Fhir.Model.Consent+ActorComponent" is { BackboneElement };
alter type Consent.ActorComponent
{
	create representation Consent.ActorComponent
	{
		Role : CodeableConcept, 
		Reference : ResourceReference
	}
};
create type Consent.PolicyComponent from class "Hl7.Fhir.Model.Consent+PolicyComponent" is { BackboneElement };
alter type Consent.PolicyComponent
{
	create representation Consent.PolicyComponent
	{
		AuthorityElement : FHIRUri, 
		Authority : String, 
		UriElement : FHIRUri, 
		Uri : String
	}
};
create type Consent.DataComponent from class "Hl7.Fhir.Model.Consent+DataComponent" is { BackboneElement };
alter type Consent.DataComponent
{
	create representation Consent.DataComponent
	{
		MeaningElement : Code, 
		Meaning : String, 
		Reference : ResourceReference
	}
};
create type Consent.ExceptComponent from class "Hl7.Fhir.Model.Consent+ExceptComponent" is { BackboneElement };
create type Consent.ExceptActorComponent from class "Hl7.Fhir.Model.Consent+ExceptActorComponent" is { BackboneElement };
alter type Consent.ExceptActorComponent
{
	create representation Consent.ExceptActorComponent
	{
		Role : CodeableConcept, 
		Reference : ResourceReference
	}
};
create type Consent.ExceptDataComponent from class "Hl7.Fhir.Model.Consent+ExceptDataComponent" is { BackboneElement };
alter type Consent.ExceptDataComponent
{
	create representation Consent.ExceptDataComponent
	{
		MeaningElement : Code, 
		Meaning : String, 
		Reference : ResourceReference
	}
};
alter type Consent.ExceptComponent
{
	create representation Consent.ExceptComponent
	{
		TypeElement : Code, 
		Type : String, 
		Period : Period, 
		Actor : list(Consent.ExceptActorComponent), 
		Action : list(CodeableConcept), 
		SecurityLabel : list(Coding), 
		Purpose : list(Coding), 
		Class : list(Coding), 
		Code : list(Coding), 
		DataPeriod : Period, 
		Data : list(Consent.ExceptDataComponent)
	}
};
alter type Consent
{
	create representation Consent
	{
		Identifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		Category : list(CodeableConcept), 
		Patient : ResourceReference, 
		Period : Period, 
		DateTimeElement : FHIRDateTime, 
		DateTime : String, 
		ConsentingParty : list(ResourceReference), 
		Actor : list(Consent.ActorComponent), 
		Action : list(CodeableConcept), 
		Organization : list(ResourceReference), 
		Source : Element, 
		Policy : list(Consent.PolicyComponent), 
		PolicyRuleElement : FHIRUri, 
		PolicyRule : String, 
		SecurityLabel : list(Coding), 
		Purpose : list(Coding), 
		DataPeriod : Period, 
		Data : list(Consent.DataComponent), 
		Except : list(Consent.ExceptComponent)
	}
};
create type Contract from class "Hl7.Fhir.Model.Contract" is { DomainResource };
create type Contract.AgentComponent from class "Hl7.Fhir.Model.Contract+AgentComponent" is { BackboneElement };
alter type Contract.AgentComponent
{
	create representation Contract.AgentComponent
	{
		Actor : ResourceReference, 
		Role : list(CodeableConcept)
	}
};
create type Contract.SignatoryComponent from class "Hl7.Fhir.Model.Contract+SignatoryComponent" is { BackboneElement };
alter type Contract.SignatoryComponent
{
	create representation Contract.SignatoryComponent
	{
		Type : Coding, 
		Party : ResourceReference, 
		Signature : list(Signature)
	}
};
create type Contract.ValuedItemComponent from class "Hl7.Fhir.Model.Contract+ValuedItemComponent" is { BackboneElement };
alter type Contract.ValuedItemComponent
{
	create representation Contract.ValuedItemComponent
	{
		Entity : Element, 
		Identifier : Identifier, 
		EffectiveTimeElement : FHIRDateTime, 
		EffectiveTime : String, 
		Quantity : SimpleQuantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		PointsElement : FHIRDecimal, 
		Points : Decimal, 
		Net : Money
	}
};
create type Contract.TermComponent from class "Hl7.Fhir.Model.Contract+TermComponent" is { BackboneElement };
create type Contract.TermAgentComponent from class "Hl7.Fhir.Model.Contract+TermAgentComponent" is { BackboneElement };
alter type Contract.TermAgentComponent
{
	create representation Contract.TermAgentComponent
	{
		Actor : ResourceReference, 
		Role : list(CodeableConcept)
	}
};
create type Contract.TermValuedItemComponent from class "Hl7.Fhir.Model.Contract+TermValuedItemComponent" is { BackboneElement };
alter type Contract.TermValuedItemComponent
{
	create representation Contract.TermValuedItemComponent
	{
		Entity : Element, 
		Identifier : Identifier, 
		EffectiveTimeElement : FHIRDateTime, 
		EffectiveTime : String, 
		Quantity : SimpleQuantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		PointsElement : FHIRDecimal, 
		Points : Decimal, 
		Net : Money
	}
};
alter type Contract.TermComponent
{
	create representation Contract.TermComponent
	{
		Identifier : Identifier, 
		IssuedElement : FHIRDateTime, 
		Issued : String, 
		Applies : Period, 
		Type : CodeableConcept, 
		SubType : CodeableConcept, 
		Topic : list(ResourceReference), 
		Action : list(CodeableConcept), 
		ActionReason : list(CodeableConcept), 
		SecurityLabel : list(Coding), 
		Agent : list(Contract.TermAgentComponent), 
		TextElement : FHIRString, 
		Text : String, 
		ValuedItem : list(Contract.TermValuedItemComponent), 
		Group : list(Contract.TermComponent)
	}
};
create type Contract.FriendlyLanguageComponent from class "Hl7.Fhir.Model.Contract+FriendlyLanguageComponent" is { BackboneElement };
alter type Contract.FriendlyLanguageComponent
{
	create representation Contract.FriendlyLanguageComponent
	{
		Content : Element
	}
};
create type Contract.LegalLanguageComponent from class "Hl7.Fhir.Model.Contract+LegalLanguageComponent" is { BackboneElement };
alter type Contract.LegalLanguageComponent
{
	create representation Contract.LegalLanguageComponent
	{
		Content : Element
	}
};
create type Contract.ComputableLanguageComponent from class "Hl7.Fhir.Model.Contract+ComputableLanguageComponent" is { BackboneElement };
alter type Contract.ComputableLanguageComponent
{
	create representation Contract.ComputableLanguageComponent
	{
		Content : Element
	}
};
alter type Contract
{
	create representation Contract
	{
		Identifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		IssuedElement : FHIRDateTime, 
		Issued : String, 
		Applies : Period, 
		Subject : list(ResourceReference), 
		Topic : list(ResourceReference), 
		Authority : list(ResourceReference), 
		Domain : list(ResourceReference), 
		Type : CodeableConcept, 
		SubType : list(CodeableConcept), 
		Action : list(CodeableConcept), 
		ActionReason : list(CodeableConcept), 
		DecisionType : CodeableConcept, 
		ContentDerivative : CodeableConcept, 
		SecurityLabel : list(Coding), 
		Agent : list(Contract.AgentComponent), 
		Signer : list(Contract.SignatoryComponent), 
		ValuedItem : list(Contract.ValuedItemComponent), 
		Term : list(Contract.TermComponent), 
		Binding : Element, 
		Friendly : list(Contract.FriendlyLanguageComponent), 
		Legal : list(Contract.LegalLanguageComponent), 
		Rule : list(Contract.ComputableLanguageComponent)
	}
};
create type Count from class "Hl7.Fhir.Model.Count" is { Quantity };
create type Coverage from class "Hl7.Fhir.Model.Coverage" is { DomainResource };
create type Coverage.GroupComponent from class "Hl7.Fhir.Model.Coverage+GroupComponent" is { BackboneElement };
alter type Coverage.GroupComponent
{
	create representation Coverage.GroupComponent
	{
		GroupElement : FHIRString, 
		Group : String, 
		GroupDisplayElement : FHIRString, 
		GroupDisplay : String, 
		SubGroupElement : FHIRString, 
		SubGroup : String, 
		SubGroupDisplayElement : FHIRString, 
		SubGroupDisplay : String, 
		PlanElement : FHIRString, 
		Plan : String, 
		PlanDisplayElement : FHIRString, 
		PlanDisplay : String, 
		SubPlanElement : FHIRString, 
		SubPlan : String, 
		SubPlanDisplayElement : FHIRString, 
		SubPlanDisplay : String, 
		ClassElement : FHIRString, 
		Class : String, 
		ClassDisplayElement : FHIRString, 
		ClassDisplay : String, 
		SubClassElement : FHIRString, 
		SubClass : String, 
		SubClassDisplayElement : FHIRString, 
		SubClassDisplay : String
	}
};
alter type Coverage
{
	create representation Coverage
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Type : CodeableConcept, 
		PolicyHolder : ResourceReference, 
		Subscriber : ResourceReference, 
		SubscriberIdElement : FHIRString, 
		SubscriberId : String, 
		Beneficiary : ResourceReference, 
		Relationship : CodeableConcept, 
		Period : Period, 
		Payor : list(ResourceReference), 
		Grouping : Coverage.GroupComponent, 
		DependentElement : FHIRString, 
		Dependent : String, 
		SequenceElement : FHIRString, 
		Sequence : String, 
		OrderElement : PositiveInt, 
		Order : Integer, 
		NetworkElement : FHIRString, 
		Network : String, 
		Contract : list(ResourceReference)
	}
};
create type DataElement from class "Hl7.Fhir.Model.DataElement" is { DomainResource };
create type DataElement.MappingComponent from class "Hl7.Fhir.Model.DataElement+MappingComponent" is { BackboneElement };
alter type DataElement.MappingComponent
{
	create representation DataElement.MappingComponent
	{
		IdentityElement : Id, 
		Identity : String, 
		UriElement : FHIRUri, 
		Uri : String, 
		NameElement : FHIRString, 
		Name : String, 
		CommentElement : FHIRString, 
		Comment : String
	}
};
alter type DataElement
{
	create representation DataElement
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		Contact : list(ContactDetail), 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Copyright : Markdown, 
		StringencyElement : Code, 
		Stringency : String, 
		Mapping : list(DataElement.MappingComponent), 
		Element : list(ElementDefinition), 
		Description : Markdown, 
		Purpose : Markdown
	}
};
create type DataRequirement from class "Hl7.Fhir.Model.DataRequirement" is { Element };
create type DataRequirement.CodeFilterComponent from class "Hl7.Fhir.Model.DataRequirement+CodeFilterComponent" is { Element };
alter type DataRequirement.CodeFilterComponent
{
	create representation DataRequirement.CodeFilterComponent
	{
		PathElement : FHIRString, 
		Path : String, 
		ValueSet : Element, 
		ValueCodeElement : list(Code), 
		ValueCode : list(String), 
		ValueCoding : list(Coding), 
		ValueCodeableConcept : list(CodeableConcept)
	}
};
create type DataRequirement.DateFilterComponent from class "Hl7.Fhir.Model.DataRequirement+DateFilterComponent" is { Element };
alter type DataRequirement.DateFilterComponent
{
	create representation DataRequirement.DateFilterComponent
	{
		PathElement : FHIRString, 
		Path : String, 
		Value : Element
	}
};
alter type DataRequirement
{
	create representation DataRequirement
	{
		TypeElement : Code, 
		Type : String, 
		ProfileElement : list(FHIRUri), 
		Profile : list(String), 
		MustSupportElement : list(FHIRString), 
		MustSupport : list(String), 
		CodeFilter : list(DataRequirement.CodeFilterComponent), 
		DateFilter : list(DataRequirement.DateFilterComponent)
	}
};
create type DetectedIssue from class "Hl7.Fhir.Model.DetectedIssue" is { DomainResource };
create type DetectedIssue.MitigationComponent from class "Hl7.Fhir.Model.DetectedIssue+MitigationComponent" is { BackboneElement };
alter type DetectedIssue.MitigationComponent
{
	create representation DetectedIssue.MitigationComponent
	{
		Action : CodeableConcept, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Author : ResourceReference
	}
};
alter type DetectedIssue
{
	create representation DetectedIssue
	{
		Identifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		Category : CodeableConcept, 
		SeverityElement : Code, 
		Severity : String, 
		Patient : ResourceReference, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Author : ResourceReference, 
		Implicated : list(ResourceReference), 
		DetailElement : FHIRString, 
		Detail : String, 
		ReferenceElement : FHIRUri, 
		Reference : String, 
		Mitigation : list(DetectedIssue.MitigationComponent)
	}
};
create type Device from class "Hl7.Fhir.Model.Device" is { DomainResource };
create type Device.UdiComponent from class "Hl7.Fhir.Model.Device+UdiComponent" is { BackboneElement };
alter type Device.UdiComponent
{
	create representation Device.UdiComponent
	{
		DeviceIdentifierElement : FHIRString, 
		DeviceIdentifier : String, 
		NameElement : FHIRString, 
		Name : String, 
		JurisdictionElement : FHIRUri, 
		Jurisdiction : String, 
		CarrierHRFElement : FHIRString, 
		CarrierHRF : String, 
		CarrierAIDCElement : Base64Binary, 
		CarrierAIDC : Binary, 
		IssuerElement : FHIRUri, 
		Issuer : String, 
		EntryTypeElement : Code, 
		EntryType : String
	}
};
alter type Device
{
	create representation Device
	{
		Identifier : list(Identifier), 
		Udi : Device.UdiComponent, 
		StatusElement : Code, 
		Status : String, 
		Type : CodeableConcept, 
		LotNumberElement : FHIRString, 
		LotNumber : String, 
		ManufacturerElement : FHIRString, 
		Manufacturer : String, 
		ManufactureDateElement : FHIRDateTime, 
		ManufactureDate : String, 
		ExpirationDateElement : FHIRDateTime, 
		ExpirationDate : String, 
		ModelElement : FHIRString, 
		Model : String, 
		VersionElement : FHIRString, 
		Version : String, 
		Patient : ResourceReference, 
		Owner : ResourceReference, 
		Contact : list(ContactPoint), 
		Location : ResourceReference, 
		UrlElement : FHIRUri, 
		Url : String, 
		Note : list(Annotation), 
		Safety : list(CodeableConcept)
	}
};
create type DeviceComponent from class "Hl7.Fhir.Model.DeviceComponent" is { DomainResource };
create type DeviceComponent.ProductionSpecificationComponent from class "Hl7.Fhir.Model.DeviceComponent+ProductionSpecificationComponent" is { BackboneElement };
alter type DeviceComponent.ProductionSpecificationComponent
{
	create representation DeviceComponent.ProductionSpecificationComponent
	{
		SpecType : CodeableConcept, 
		ComponentId : Identifier, 
		ProductionSpecElement : FHIRString, 
		ProductionSpec : String
	}
};
alter type DeviceComponent
{
	create representation DeviceComponent
	{
		Identifier : Identifier, 
		Type : CodeableConcept, 
		LastSystemChangeElement : Instant, 
		LastSystemChange : DateTime, 
		Source : ResourceReference, 
		Parent : ResourceReference, 
		OperationalStatus : list(CodeableConcept), 
		ParameterGroup : CodeableConcept, 
		MeasurementPrincipleElement : Code, 
		MeasurementPrinciple : String, 
		ProductionSpecification : list(DeviceComponent.ProductionSpecificationComponent), 
		LanguageCode : CodeableConcept
	}
};
create type DeviceMetric from class "Hl7.Fhir.Model.DeviceMetric" is { DomainResource };
create type DeviceMetric.CalibrationComponent from class "Hl7.Fhir.Model.DeviceMetric+CalibrationComponent" is { BackboneElement };
alter type DeviceMetric.CalibrationComponent
{
	create representation DeviceMetric.CalibrationComponent
	{
		TypeElement : Code, 
		Type : String, 
		StateElement : Code, 
		State : String, 
		TimeElement : Instant, 
		Time : DateTime
	}
};
alter type DeviceMetric
{
	create representation DeviceMetric
	{
		Identifier : Identifier, 
		Type : CodeableConcept, 
		Unit : CodeableConcept, 
		Source : ResourceReference, 
		Parent : ResourceReference, 
		OperationalStatusElement : Code, 
		OperationalStatus : String, 
		ColorElement : Code, 
		Color : String, 
		CategoryElement : Code, 
		Category : String, 
		MeasurementPeriod : Timing, 
		Calibration : list(DeviceMetric.CalibrationComponent)
	}
};
create type DeviceRequest from class "Hl7.Fhir.Model.DeviceRequest" is { DomainResource };
create type DeviceRequest.RequesterComponent from class "Hl7.Fhir.Model.DeviceRequest+RequesterComponent" is { BackboneElement };
alter type DeviceRequest.RequesterComponent
{
	create representation DeviceRequest.RequesterComponent
	{
		Agent : ResourceReference, 
		OnBehalfOf : ResourceReference
	}
};
alter type DeviceRequest
{
	create representation DeviceRequest
	{
		Identifier : list(Identifier), 
		Definition : list(ResourceReference), 
		BasedOn : list(ResourceReference), 
		PriorRequest : list(ResourceReference), 
		GroupIdentifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		Intent : CodeableConcept, 
		PriorityElement : Code, 
		Priority : String, 
		Code : Element, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Occurrence : Element, 
		AuthoredOnElement : FHIRDateTime, 
		AuthoredOn : String, 
		Requester : DeviceRequest.RequesterComponent, 
		PerformerType : CodeableConcept, 
		Performer : ResourceReference, 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		SupportingInfo : list(ResourceReference), 
		Note : list(Annotation), 
		RelevantHistory : list(ResourceReference)
	}
};
create type DeviceUseStatement from class "Hl7.Fhir.Model.DeviceUseStatement" is { DomainResource };
alter type DeviceUseStatement
{
	create representation DeviceUseStatement
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Subject : ResourceReference, 
		WhenUsed : Period, 
		Timing : Element, 
		RecordedOnElement : FHIRDateTime, 
		RecordedOn : String, 
		Source : ResourceReference, 
		Device : ResourceReference, 
		Indication : list(CodeableConcept), 
		BodySite : CodeableConcept, 
		Note : list(Annotation)
	}
};
create type DiagnosticReport from class "Hl7.Fhir.Model.DiagnosticReport" is { DomainResource };
create type DiagnosticReport.PerformerComponent from class "Hl7.Fhir.Model.DiagnosticReport+PerformerComponent" is { BackboneElement };
alter type DiagnosticReport.PerformerComponent
{
	create representation DiagnosticReport.PerformerComponent
	{
		Role : CodeableConcept, 
		Actor : ResourceReference
	}
};
create type DiagnosticReport.ImageComponent from class "Hl7.Fhir.Model.DiagnosticReport+ImageComponent" is { BackboneElement };
alter type DiagnosticReport.ImageComponent
{
	create representation DiagnosticReport.ImageComponent
	{
		CommentElement : FHIRString, 
		Comment : String, 
		Link : ResourceReference
	}
};
alter type DiagnosticReport
{
	create representation DiagnosticReport
	{
		Identifier : list(Identifier), 
		BasedOn : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		Category : CodeableConcept, 
		Code : CodeableConcept, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Effective : Element, 
		IssuedElement : Instant, 
		Issued : DateTime, 
		Performer : list(DiagnosticReport.PerformerComponent), 
		Specimen : list(ResourceReference), 
		Result : list(ResourceReference), 
		ImagingStudy : list(ResourceReference), 
		Image : list(DiagnosticReport.ImageComponent), 
		ConclusionElement : FHIRString, 
		Conclusion : String, 
		CodedDiagnosis : list(CodeableConcept), 
		PresentedForm : list(Attachment)
	}
};
create type Distance from class "Hl7.Fhir.Model.Distance" is { Quantity };
create type DocumentManifest from class "Hl7.Fhir.Model.DocumentManifest" is { DomainResource };
create type DocumentManifest.ContentComponent from class "Hl7.Fhir.Model.DocumentManifest+ContentComponent" is { BackboneElement };
alter type DocumentManifest.ContentComponent
{
	create representation DocumentManifest.ContentComponent
	{
		P : Element
	}
};
create type DocumentManifest.RelatedComponent from class "Hl7.Fhir.Model.DocumentManifest+RelatedComponent" is { BackboneElement };
alter type DocumentManifest.RelatedComponent
{
	create representation DocumentManifest.RelatedComponent
	{
		Identifier : Identifier, 
		Ref : ResourceReference
	}
};
alter type DocumentManifest
{
	create representation DocumentManifest
	{
		MasterIdentifier : Identifier, 
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Type : CodeableConcept, 
		Subject : ResourceReference, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Author : list(ResourceReference), 
		Recipient : list(ResourceReference), 
		SourceElement : FHIRUri, 
		Source : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Content : list(DocumentManifest.ContentComponent), 
		Related : list(DocumentManifest.RelatedComponent)
	}
};
create type DocumentReference from class "Hl7.Fhir.Model.DocumentReference" is { DomainResource };
create type DocumentReference.RelatesToComponent from class "Hl7.Fhir.Model.DocumentReference+RelatesToComponent" is { BackboneElement };
alter type DocumentReference.RelatesToComponent
{
	create representation DocumentReference.RelatesToComponent
	{
		CodeElement : Code, 
		Code : String, 
		Target : ResourceReference
	}
};
create type DocumentReference.ContentComponent from class "Hl7.Fhir.Model.DocumentReference+ContentComponent" is { BackboneElement };
alter type DocumentReference.ContentComponent
{
	create representation DocumentReference.ContentComponent
	{
		Attachment : Attachment, 
		Format : Coding
	}
};
create type DocumentReference.ContextComponent from class "Hl7.Fhir.Model.DocumentReference+ContextComponent" is { BackboneElement };
create type DocumentReference.RelatedComponent from class "Hl7.Fhir.Model.DocumentReference+RelatedComponent" is { BackboneElement };
alter type DocumentReference.RelatedComponent
{
	create representation DocumentReference.RelatedComponent
	{
		Identifier : Identifier, 
		Ref : ResourceReference
	}
};
alter type DocumentReference.ContextComponent
{
	create representation DocumentReference.ContextComponent
	{
		Encounter : ResourceReference, 
		Event : list(CodeableConcept), 
		Period : Period, 
		FacilityType : CodeableConcept, 
		PracticeSetting : CodeableConcept, 
		SourcePatientInfo : ResourceReference, 
		Related : list(DocumentReference.RelatedComponent)
	}
};
alter type DocumentReference
{
	create representation DocumentReference
	{
		MasterIdentifier : Identifier, 
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		DocStatusElement : Code, 
		DocStatus : String, 
		Type : CodeableConcept, 
		Class : CodeableConcept, 
		Subject : ResourceReference, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		IndexedElement : Instant, 
		Indexed : DateTime, 
		Author : list(ResourceReference), 
		Authenticator : ResourceReference, 
		Custodian : ResourceReference, 
		RelatesTo : list(DocumentReference.RelatesToComponent), 
		DescriptionElement : FHIRString, 
		Description : String, 
		SecurityLabel : list(CodeableConcept), 
		Content : list(DocumentReference.ContentComponent), 
		Context : DocumentReference.ContextComponent
	}
};
create type Duration from class "Hl7.Fhir.Model.Duration" is { Quantity };
create type EligibilityRequest from class "Hl7.Fhir.Model.EligibilityRequest" is { DomainResource };
alter type EligibilityRequest
{
	create representation EligibilityRequest
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Priority : CodeableConcept, 
		Patient : ResourceReference, 
		Serviced : Element, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Enterer : ResourceReference, 
		Provider : ResourceReference, 
		Organization : ResourceReference, 
		Insurer : ResourceReference, 
		Facility : ResourceReference, 
		Coverage : ResourceReference, 
		BusinessArrangementElement : FHIRString, 
		BusinessArrangement : String, 
		BenefitCategory : CodeableConcept, 
		BenefitSubCategory : CodeableConcept
	}
};
create type EligibilityResponse from class "Hl7.Fhir.Model.EligibilityResponse" is { DomainResource };
create type EligibilityResponse.InsuranceComponent from class "Hl7.Fhir.Model.EligibilityResponse+InsuranceComponent" is { BackboneElement };
create type EligibilityResponse.BenefitsComponent from class "Hl7.Fhir.Model.EligibilityResponse+BenefitsComponent" is { BackboneElement };
create type EligibilityResponse.BenefitComponent from class "Hl7.Fhir.Model.EligibilityResponse+BenefitComponent" is { BackboneElement };
alter type EligibilityResponse.BenefitComponent
{
	create representation EligibilityResponse.BenefitComponent
	{
		Type : CodeableConcept, 
		Allowed : Element, 
		Used : Element
	}
};
alter type EligibilityResponse.BenefitsComponent
{
	create representation EligibilityResponse.BenefitsComponent
	{
		Category : CodeableConcept, 
		SubCategory : CodeableConcept, 
		ExcludedElement : FHIRBoolean, 
		Excluded : Boolean, 
		NameElement : FHIRString, 
		Name : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Network : CodeableConcept, 
		Unit : CodeableConcept, 
		Term : CodeableConcept, 
		Financial : list(EligibilityResponse.BenefitComponent)
	}
};
alter type EligibilityResponse.InsuranceComponent
{
	create representation EligibilityResponse.InsuranceComponent
	{
		Coverage : ResourceReference, 
		Contract : ResourceReference, 
		BenefitBalance : list(EligibilityResponse.BenefitsComponent)
	}
};
create type EligibilityResponse.ErrorsComponent from class "Hl7.Fhir.Model.EligibilityResponse+ErrorsComponent" is { BackboneElement };
alter type EligibilityResponse.ErrorsComponent
{
	create representation EligibilityResponse.ErrorsComponent
	{
		Code : CodeableConcept
	}
};
alter type EligibilityResponse
{
	create representation EligibilityResponse
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		RequestProvider : ResourceReference, 
		RequestOrganization : ResourceReference, 
		Request : ResourceReference, 
		Outcome : CodeableConcept, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		Insurer : ResourceReference, 
		InforceElement : FHIRBoolean, 
		Inforce : Boolean, 
		Insurance : list(EligibilityResponse.InsuranceComponent), 
		Form : CodeableConcept, 
		Error : list(EligibilityResponse.ErrorsComponent)
	}
};
create type Encounter from class "Hl7.Fhir.Model.Encounter" is { DomainResource };
create type Encounter.StatusHistoryComponent from class "Hl7.Fhir.Model.Encounter+StatusHistoryComponent" is { BackboneElement };
alter type Encounter.StatusHistoryComponent
{
	create representation Encounter.StatusHistoryComponent
	{
		StatusElement : Code, 
		Status : String, 
		Period : Period
	}
};
create type Encounter.ClassHistoryComponent from class "Hl7.Fhir.Model.Encounter+ClassHistoryComponent" is { BackboneElement };
alter type Encounter.ClassHistoryComponent
{
	create representation Encounter.ClassHistoryComponent
	{
		Class : Coding, 
		Period : Period
	}
};
create type Encounter.ParticipantComponent from class "Hl7.Fhir.Model.Encounter+ParticipantComponent" is { BackboneElement };
alter type Encounter.ParticipantComponent
{
	create representation Encounter.ParticipantComponent
	{
		Type : list(CodeableConcept), 
		Period : Period, 
		Individual : ResourceReference
	}
};
create type Encounter.DiagnosisComponent from class "Hl7.Fhir.Model.Encounter+DiagnosisComponent" is { BackboneElement };
alter type Encounter.DiagnosisComponent
{
	create representation Encounter.DiagnosisComponent
	{
		Condition : ResourceReference, 
		Role : CodeableConcept, 
		RankElement : PositiveInt, 
		Rank : Integer
	}
};
create type Encounter.HospitalizationComponent from class "Hl7.Fhir.Model.Encounter+HospitalizationComponent" is { BackboneElement };
alter type Encounter.HospitalizationComponent
{
	create representation Encounter.HospitalizationComponent
	{
		PreAdmissionIdentifier : Identifier, 
		Origin : ResourceReference, 
		AdmitSource : CodeableConcept, 
		ReAdmission : CodeableConcept, 
		DietPreference : list(CodeableConcept), 
		SpecialCourtesy : list(CodeableConcept), 
		SpecialArrangement : list(CodeableConcept), 
		Destination : ResourceReference, 
		DischargeDisposition : CodeableConcept
	}
};
create type Encounter.LocationComponent from class "Hl7.Fhir.Model.Encounter+LocationComponent" is { BackboneElement };
alter type Encounter.LocationComponent
{
	create representation Encounter.LocationComponent
	{
		Location : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		Period : Period
	}
};
alter type Encounter
{
	create representation Encounter
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		StatusHistory : list(Encounter.StatusHistoryComponent), 
		Class : Coding, 
		ClassHistory : list(Encounter.ClassHistoryComponent), 
		Type : list(CodeableConcept), 
		Priority : CodeableConcept, 
		Subject : ResourceReference, 
		EpisodeOfCare : list(ResourceReference), 
		IncomingReferral : list(ResourceReference), 
		Participant : list(Encounter.ParticipantComponent), 
		Appointment : ResourceReference, 
		Period : Period, 
		Length : Duration, 
		Reason : list(CodeableConcept), 
		Diagnosis : list(Encounter.DiagnosisComponent), 
		Account : list(ResourceReference), 
		Hospitalization : Encounter.HospitalizationComponent, 
		Location : list(Encounter.LocationComponent), 
		ServiceProvider : ResourceReference, 
		PartOf : ResourceReference
	}
};
create type Endpoint from class "Hl7.Fhir.Model.Endpoint" is { DomainResource };
alter type Endpoint
{
	create representation Endpoint
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		ConnectionType : Coding, 
		NameElement : FHIRString, 
		Name : String, 
		ManagingOrganization : ResourceReference, 
		Contact : list(ContactPoint), 
		Period : Period, 
		PayloadType : list(CodeableConcept), 
		PayloadMimeTypeElement : list(Code), 
		PayloadMimeType : list(String), 
		AddressElement : FHIRUri, 
		Address : String, 
		HeaderElement : list(FHIRString), 
		Header : list(String)
	}
};
create type EnrollmentRequest from class "Hl7.Fhir.Model.EnrollmentRequest" is { DomainResource };
alter type EnrollmentRequest
{
	create representation EnrollmentRequest
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Insurer : ResourceReference, 
		Provider : ResourceReference, 
		Organization : ResourceReference, 
		Subject : ResourceReference, 
		Coverage : ResourceReference
	}
};
create type EnrollmentResponse from class "Hl7.Fhir.Model.EnrollmentResponse" is { DomainResource };
alter type EnrollmentResponse
{
	create representation EnrollmentResponse
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Request : ResourceReference, 
		Outcome : CodeableConcept, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Organization : ResourceReference, 
		RequestProvider : ResourceReference, 
		RequestOrganization : ResourceReference
	}
};
create type EpisodeOfCare from class "Hl7.Fhir.Model.EpisodeOfCare" is { DomainResource };
create type EpisodeOfCare.StatusHistoryComponent from class "Hl7.Fhir.Model.EpisodeOfCare+StatusHistoryComponent" is { BackboneElement };
alter type EpisodeOfCare.StatusHistoryComponent
{
	create representation EpisodeOfCare.StatusHistoryComponent
	{
		StatusElement : Code, 
		Status : String, 
		Period : Period
	}
};
create type EpisodeOfCare.DiagnosisComponent from class "Hl7.Fhir.Model.EpisodeOfCare+DiagnosisComponent" is { BackboneElement };
alter type EpisodeOfCare.DiagnosisComponent
{
	create representation EpisodeOfCare.DiagnosisComponent
	{
		Condition : ResourceReference, 
		Role : CodeableConcept, 
		RankElement : PositiveInt, 
		Rank : Integer
	}
};
alter type EpisodeOfCare
{
	create representation EpisodeOfCare
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		StatusHistory : list(EpisodeOfCare.StatusHistoryComponent), 
		Type : list(CodeableConcept), 
		Diagnosis : list(EpisodeOfCare.DiagnosisComponent), 
		Patient : ResourceReference, 
		ManagingOrganization : ResourceReference, 
		Period : Period, 
		ReferralRequest : list(ResourceReference), 
		CareManager : ResourceReference, 
		Team : list(ResourceReference), 
		Account : list(ResourceReference)
	}
};
create type ExpansionProfile from class "Hl7.Fhir.Model.ExpansionProfile" is { DomainResource };
create type ExpansionProfile.FixedVersionComponent from class "Hl7.Fhir.Model.ExpansionProfile+FixedVersionComponent" is { BackboneElement };
alter type ExpansionProfile.FixedVersionComponent
{
	create representation ExpansionProfile.FixedVersionComponent
	{
		SystemElement : FHIRUri, 
		System : String, 
		VersionElement : FHIRString, 
		Version : String, 
		ModeElement : Code, 
		Mode : String
	}
};
create type ExpansionProfile.ExcludedSystemComponent from class "Hl7.Fhir.Model.ExpansionProfile+ExcludedSystemComponent" is { BackboneElement };
alter type ExpansionProfile.ExcludedSystemComponent
{
	create representation ExpansionProfile.ExcludedSystemComponent
	{
		SystemElement : FHIRUri, 
		System : String, 
		VersionElement : FHIRString, 
		Version : String
	}
};
create type ExpansionProfile.DesignationComponent from class "Hl7.Fhir.Model.ExpansionProfile+DesignationComponent" is { BackboneElement };
create type ExpansionProfile.DesignationIncludeComponent from class "Hl7.Fhir.Model.ExpansionProfile+DesignationIncludeComponent" is { BackboneElement };
create type ExpansionProfile.DesignationIncludeDesignationComponent from class "Hl7.Fhir.Model.ExpansionProfile+DesignationIncludeDesignationComponent" is { BackboneElement };
alter type ExpansionProfile.DesignationIncludeDesignationComponent
{
	create representation ExpansionProfile.DesignationIncludeDesignationComponent
	{
		LanguageElement : Code, 
		Language : String, 
		Use : Coding
	}
};
alter type ExpansionProfile.DesignationIncludeComponent
{
	create representation ExpansionProfile.DesignationIncludeComponent
	{
		Designation : list(ExpansionProfile.DesignationIncludeDesignationComponent)
	}
};
create type ExpansionProfile.DesignationExcludeComponent from class "Hl7.Fhir.Model.ExpansionProfile+DesignationExcludeComponent" is { BackboneElement };
create type ExpansionProfile.DesignationExcludeDesignationComponent from class "Hl7.Fhir.Model.ExpansionProfile+DesignationExcludeDesignationComponent" is { BackboneElement };
alter type ExpansionProfile.DesignationExcludeDesignationComponent
{
	create representation ExpansionProfile.DesignationExcludeDesignationComponent
	{
		LanguageElement : Code, 
		Language : String, 
		Use : Coding
	}
};
alter type ExpansionProfile.DesignationExcludeComponent
{
	create representation ExpansionProfile.DesignationExcludeComponent
	{
		Designation : list(ExpansionProfile.DesignationExcludeDesignationComponent)
	}
};
alter type ExpansionProfile.DesignationComponent
{
	create representation ExpansionProfile.DesignationComponent
	{
		Include : ExpansionProfile.DesignationIncludeComponent, 
		Exclude : ExpansionProfile.DesignationExcludeComponent
	}
};
alter type ExpansionProfile
{
	create representation ExpansionProfile
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : Identifier, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		FixedVersion : list(ExpansionProfile.FixedVersionComponent), 
		ExcludedSystem : ExpansionProfile.ExcludedSystemComponent, 
		IncludeDesignationsElement : FHIRBoolean, 
		IncludeDesignations : Boolean, 
		Designation : ExpansionProfile.DesignationComponent, 
		IncludeDefinitionElement : FHIRBoolean, 
		IncludeDefinition : Boolean, 
		ActiveOnlyElement : FHIRBoolean, 
		ActiveOnly : Boolean, 
		ExcludeNestedElement : FHIRBoolean, 
		ExcludeNested : Boolean, 
		ExcludeNotForUIElement : FHIRBoolean, 
		ExcludeNotForUI : Boolean, 
		ExcludePostCoordinatedElement : FHIRBoolean, 
		ExcludePostCoordinated : Boolean, 
		DisplayLanguageElement : Code, 
		DisplayLanguage : String, 
		LimitedExpansionElement : FHIRBoolean, 
		LimitedExpansion : Boolean, 
		Purpose : Markdown
	}
};
create type ExplanationOfBenefit from class "Hl7.Fhir.Model.ExplanationOfBenefit" is { DomainResource };
create type ExplanationOfBenefit.RelatedClaimComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+RelatedClaimComponent" is { BackboneElement };
alter type ExplanationOfBenefit.RelatedClaimComponent
{
	create representation ExplanationOfBenefit.RelatedClaimComponent
	{
		Claim : ResourceReference, 
		Relationship : CodeableConcept, 
		Reference : Identifier
	}
};
create type ExplanationOfBenefit.PayeeComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+PayeeComponent" is { BackboneElement };
alter type ExplanationOfBenefit.PayeeComponent
{
	create representation ExplanationOfBenefit.PayeeComponent
	{
		Type : CodeableConcept, 
		ResourceType : CodeableConcept, 
		Party : ResourceReference
	}
};
create type ExplanationOfBenefit.SupportingInformationComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+SupportingInformationComponent" is { BackboneElement };
alter type ExplanationOfBenefit.SupportingInformationComponent
{
	create representation ExplanationOfBenefit.SupportingInformationComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Category : CodeableConcept, 
		Code : CodeableConcept, 
		Timing : Element, 
		Value : Element, 
		Reason : Coding
	}
};
create type ExplanationOfBenefit.CareTeamComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+CareTeamComponent" is { BackboneElement };
alter type ExplanationOfBenefit.CareTeamComponent
{
	create representation ExplanationOfBenefit.CareTeamComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Provider : ResourceReference, 
		ResponsibleElement : FHIRBoolean, 
		Responsible : Boolean, 
		Role : CodeableConcept, 
		Qualification : CodeableConcept
	}
};
create type ExplanationOfBenefit.DiagnosisComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+DiagnosisComponent" is { BackboneElement };
alter type ExplanationOfBenefit.DiagnosisComponent
{
	create representation ExplanationOfBenefit.DiagnosisComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Diagnosis : Element, 
		Type : list(CodeableConcept), 
		PackageCode : CodeableConcept
	}
};
create type ExplanationOfBenefit.ProcedureComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+ProcedureComponent" is { BackboneElement };
alter type ExplanationOfBenefit.ProcedureComponent
{
	create representation ExplanationOfBenefit.ProcedureComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Procedure : Element
	}
};
create type ExplanationOfBenefit.InsuranceComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+InsuranceComponent" is { BackboneElement };
alter type ExplanationOfBenefit.InsuranceComponent
{
	create representation ExplanationOfBenefit.InsuranceComponent
	{
		Coverage : ResourceReference, 
		PreAuthRefElement : list(FHIRString), 
		PreAuthRef : list(String)
	}
};
create type ExplanationOfBenefit.AccidentComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+AccidentComponent" is { BackboneElement };
alter type ExplanationOfBenefit.AccidentComponent
{
	create representation ExplanationOfBenefit.AccidentComponent
	{
		DateElement : FHIRDate, 
		Date : String, 
		Type : CodeableConcept, 
		Location : Element
	}
};
create type ExplanationOfBenefit.ItemComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+ItemComponent" is { BackboneElement };
create type ExplanationOfBenefit.AdjudicationComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+AdjudicationComponent" is { BackboneElement };
alter type ExplanationOfBenefit.AdjudicationComponent
{
	create representation ExplanationOfBenefit.AdjudicationComponent
	{
		Category : CodeableConcept, 
		Reason : CodeableConcept, 
		Amount : Money, 
		ValueElement : FHIRDecimal, 
		Value : Decimal
	}
};
create type ExplanationOfBenefit.DetailComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+DetailComponent" is { BackboneElement };
create type ExplanationOfBenefit.SubDetailComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+SubDetailComponent" is { BackboneElement };
alter type ExplanationOfBenefit.SubDetailComponent
{
	create representation ExplanationOfBenefit.SubDetailComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Type : CodeableConcept, 
		Revenue : CodeableConcept, 
		Category : CodeableConcept, 
		Service : CodeableConcept, 
		Modifier : list(CodeableConcept), 
		ProgramCode : list(CodeableConcept), 
		Quantity : SimpleQuantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		Net : Money, 
		Udi : list(ResourceReference), 
		NoteNumberElement : list(PositiveInt), 
		NoteNumber : list(Integer), 
		Adjudication : list(ExplanationOfBenefit.AdjudicationComponent)
	}
};
alter type ExplanationOfBenefit.DetailComponent
{
	create representation ExplanationOfBenefit.DetailComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Type : CodeableConcept, 
		Revenue : CodeableConcept, 
		Category : CodeableConcept, 
		Service : CodeableConcept, 
		Modifier : list(CodeableConcept), 
		ProgramCode : list(CodeableConcept), 
		Quantity : SimpleQuantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		Net : Money, 
		Udi : list(ResourceReference), 
		NoteNumberElement : list(PositiveInt), 
		NoteNumber : list(Integer), 
		Adjudication : list(ExplanationOfBenefit.AdjudicationComponent), 
		SubDetail : list(ExplanationOfBenefit.SubDetailComponent)
	}
};
alter type ExplanationOfBenefit.ItemComponent
{
	create representation ExplanationOfBenefit.ItemComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		CareTeamLinkIdElement : list(PositiveInt), 
		CareTeamLinkId : list(Integer), 
		DiagnosisLinkIdElement : list(PositiveInt), 
		DiagnosisLinkId : list(Integer), 
		ProcedureLinkIdElement : list(PositiveInt), 
		ProcedureLinkId : list(Integer), 
		InformationLinkIdElement : list(PositiveInt), 
		InformationLinkId : list(Integer), 
		Revenue : CodeableConcept, 
		Category : CodeableConcept, 
		Service : CodeableConcept, 
		Modifier : list(CodeableConcept), 
		ProgramCode : list(CodeableConcept), 
		Serviced : Element, 
		Location : Element, 
		Quantity : SimpleQuantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		Net : Money, 
		Udi : list(ResourceReference), 
		BodySite : CodeableConcept, 
		SubSite : list(CodeableConcept), 
		Encounter : list(ResourceReference), 
		NoteNumberElement : list(PositiveInt), 
		NoteNumber : list(Integer), 
		Adjudication : list(ExplanationOfBenefit.AdjudicationComponent), 
		Detail : list(ExplanationOfBenefit.DetailComponent)
	}
};
create type ExplanationOfBenefit.AddedItemComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+AddedItemComponent" is { BackboneElement };
create type ExplanationOfBenefit.AddedItemsDetailComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+AddedItemsDetailComponent" is { BackboneElement };
alter type ExplanationOfBenefit.AddedItemsDetailComponent
{
	create representation ExplanationOfBenefit.AddedItemsDetailComponent
	{
		Revenue : CodeableConcept, 
		Category : CodeableConcept, 
		Service : CodeableConcept, 
		Modifier : list(CodeableConcept), 
		Fee : Money, 
		NoteNumberElement : list(PositiveInt), 
		NoteNumber : list(Integer), 
		Adjudication : list(ExplanationOfBenefit.AdjudicationComponent)
	}
};
alter type ExplanationOfBenefit.AddedItemComponent
{
	create representation ExplanationOfBenefit.AddedItemComponent
	{
		SequenceLinkIdElement : list(PositiveInt), 
		SequenceLinkId : list(Integer), 
		Revenue : CodeableConcept, 
		Category : CodeableConcept, 
		Service : CodeableConcept, 
		Modifier : list(CodeableConcept), 
		Fee : Money, 
		NoteNumberElement : list(PositiveInt), 
		NoteNumber : list(Integer), 
		Adjudication : list(ExplanationOfBenefit.AdjudicationComponent), 
		Detail : list(ExplanationOfBenefit.AddedItemsDetailComponent)
	}
};
create type ExplanationOfBenefit.PaymentComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+PaymentComponent" is { BackboneElement };
alter type ExplanationOfBenefit.PaymentComponent
{
	create representation ExplanationOfBenefit.PaymentComponent
	{
		Type : CodeableConcept, 
		Adjustment : Money, 
		AdjustmentReason : CodeableConcept, 
		DateElement : FHIRDate, 
		Date : String, 
		Amount : Money, 
		Identifier : Identifier
	}
};
create type ExplanationOfBenefit.NoteComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+NoteComponent" is { BackboneElement };
alter type ExplanationOfBenefit.NoteComponent
{
	create representation ExplanationOfBenefit.NoteComponent
	{
		NumberElement : PositiveInt, 
		Number : Integer, 
		Type : CodeableConcept, 
		TextElement : FHIRString, 
		Text : String, 
		Language : CodeableConcept
	}
};
create type ExplanationOfBenefit.BenefitBalanceComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+BenefitBalanceComponent" is { BackboneElement };
create type ExplanationOfBenefit.BenefitComponent from class "Hl7.Fhir.Model.ExplanationOfBenefit+BenefitComponent" is { BackboneElement };
alter type ExplanationOfBenefit.BenefitComponent
{
	create representation ExplanationOfBenefit.BenefitComponent
	{
		Type : CodeableConcept, 
		Allowed : Element, 
		Used : Element
	}
};
alter type ExplanationOfBenefit.BenefitBalanceComponent
{
	create representation ExplanationOfBenefit.BenefitBalanceComponent
	{
		Category : CodeableConcept, 
		SubCategory : CodeableConcept, 
		ExcludedElement : FHIRBoolean, 
		Excluded : Boolean, 
		NameElement : FHIRString, 
		Name : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Network : CodeableConcept, 
		Unit : CodeableConcept, 
		Term : CodeableConcept, 
		Financial : list(ExplanationOfBenefit.BenefitComponent)
	}
};
alter type ExplanationOfBenefit
{
	create representation ExplanationOfBenefit
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Type : CodeableConcept, 
		SubType : list(CodeableConcept), 
		Patient : ResourceReference, 
		BillablePeriod : Period, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Enterer : ResourceReference, 
		Insurer : ResourceReference, 
		Provider : ResourceReference, 
		Organization : ResourceReference, 
		Referral : ResourceReference, 
		Facility : ResourceReference, 
		Claim : ResourceReference, 
		ClaimResponse : ResourceReference, 
		Outcome : CodeableConcept, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		Related : list(ExplanationOfBenefit.RelatedClaimComponent), 
		Prescription : ResourceReference, 
		OriginalPrescription : ResourceReference, 
		Payee : ExplanationOfBenefit.PayeeComponent, 
		Information : list(ExplanationOfBenefit.SupportingInformationComponent), 
		CareTeam : list(ExplanationOfBenefit.CareTeamComponent), 
		Diagnosis : list(ExplanationOfBenefit.DiagnosisComponent), 
		Procedure : list(ExplanationOfBenefit.ProcedureComponent), 
		PrecedenceElement : PositiveInt, 
		Precedence : Integer, 
		Insurance : ExplanationOfBenefit.InsuranceComponent, 
		Accident : ExplanationOfBenefit.AccidentComponent, 
		EmploymentImpacted : Period, 
		Hospitalization : Period, 
		Item : list(ExplanationOfBenefit.ItemComponent), 
		AddItem : list(ExplanationOfBenefit.AddedItemComponent), 
		TotalCost : Money, 
		UnallocDeductable : Money, 
		TotalBenefit : Money, 
		Payment : ExplanationOfBenefit.PaymentComponent, 
		Form : CodeableConcept, 
		ProcessNote : list(ExplanationOfBenefit.NoteComponent), 
		BenefitBalance : list(ExplanationOfBenefit.BenefitBalanceComponent)
	}
};
create type FamilyMemberHistory from class "Hl7.Fhir.Model.FamilyMemberHistory" is { DomainResource };
create type FamilyMemberHistory.ConditionComponent from class "Hl7.Fhir.Model.FamilyMemberHistory+ConditionComponent" is { BackboneElement };
alter type FamilyMemberHistory.ConditionComponent
{
	create representation FamilyMemberHistory.ConditionComponent
	{
		Code : CodeableConcept, 
		Outcome : CodeableConcept, 
		Onset : Element, 
		Note : list(Annotation)
	}
};
alter type FamilyMemberHistory
{
	create representation FamilyMemberHistory
	{
		Identifier : list(Identifier), 
		Definition : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		NotDoneElement : FHIRBoolean, 
		NotDone : Boolean, 
		NotDoneReason : CodeableConcept, 
		Patient : ResourceReference, 
		DateElement : FHIRDateTime, 
		Date : String, 
		NameElement : FHIRString, 
		Name : String, 
		Relationship : CodeableConcept, 
		GenderElement : Code, 
		Gender : String, 
		Born : Element, 
		Age : Element, 
		EstimatedAgeElement : FHIRBoolean, 
		EstimatedAge : Boolean, 
		Deceased : Element, 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		Note : list(Annotation), 
		Condition : list(FamilyMemberHistory.ConditionComponent)
	}
};
create type Goal from class "Hl7.Fhir.Model.Goal" is { DomainResource };
create type Goal.TargetComponent from class "Hl7.Fhir.Model.Goal+TargetComponent" is { BackboneElement };
alter type Goal.TargetComponent
{
	create representation Goal.TargetComponent
	{
		Measure : CodeableConcept, 
		Detail : Element, 
		Due : Element
	}
};
alter type Goal
{
	create representation Goal
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Category : list(CodeableConcept), 
		Priority : CodeableConcept, 
		Description : CodeableConcept, 
		Subject : ResourceReference, 
		Start : Element, 
		Target : Goal.TargetComponent, 
		StatusDateElement : FHIRDate, 
		StatusDate : String, 
		StatusReasonElement : FHIRString, 
		StatusReason : String, 
		ExpressedBy : ResourceReference, 
		Addresses : list(ResourceReference), 
		Note : list(Annotation), 
		OutcomeCode : list(CodeableConcept), 
		OutcomeReference : list(ResourceReference)
	}
};
create type GraphDefinition from class "Hl7.Fhir.Model.GraphDefinition" is { DomainResource };
create type GraphDefinition.LinkComponent from class "Hl7.Fhir.Model.GraphDefinition+LinkComponent" is { BackboneElement };
create type GraphDefinition.TargetComponent from class "Hl7.Fhir.Model.GraphDefinition+TargetComponent" is { BackboneElement };
create type GraphDefinition.CompartmentComponent from class "Hl7.Fhir.Model.GraphDefinition+CompartmentComponent" is { BackboneElement };
alter type GraphDefinition.CompartmentComponent
{
	create representation GraphDefinition.CompartmentComponent
	{
		CodeElement : Code, 
		Code : String, 
		RuleElement : Code, 
		Rule : String, 
		ExpressionElement : FHIRString, 
		Expression : String, 
		DescriptionElement : FHIRString, 
		Description : String
	}
};
alter type GraphDefinition.TargetComponent
{
	create representation GraphDefinition.TargetComponent
	{
		TypeElement : Code, 
		Type : String, 
		ProfileElement : FHIRUri, 
		Profile : String, 
		Compartment : list(GraphDefinition.CompartmentComponent), 
		Link : list(GraphDefinition.LinkComponent)
	}
};
alter type GraphDefinition.LinkComponent
{
	create representation GraphDefinition.LinkComponent
	{
		PathElement : FHIRString, 
		Path : String, 
		SliceNameElement : FHIRString, 
		SliceName : String, 
		MinElement : FHIRInteger, 
		Min : Integer, 
		MaxElement : FHIRString, 
		Max : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Target : list(GraphDefinition.TargetComponent)
	}
};
alter type GraphDefinition
{
	create representation GraphDefinition
	{
		UrlElement : FHIRUri, 
		Url : String, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Purpose : Markdown, 
		StartElement : Code, 
		Start : String, 
		ProfileElement : FHIRUri, 
		Profile : String, 
		Link : list(GraphDefinition.LinkComponent)
	}
};
create type Group from class "Hl7.Fhir.Model.Group" is { DomainResource };
create type Group.CharacteristicComponent from class "Hl7.Fhir.Model.Group+CharacteristicComponent" is { BackboneElement };
alter type Group.CharacteristicComponent
{
	create representation Group.CharacteristicComponent
	{
		Code : CodeableConcept, 
		Value : Element, 
		ExcludeElement : FHIRBoolean, 
		Exclude : Boolean, 
		Period : Period
	}
};
create type Group.MemberComponent from class "Hl7.Fhir.Model.Group+MemberComponent" is { BackboneElement };
alter type Group.MemberComponent
{
	create representation Group.MemberComponent
	{
		Entity : ResourceReference, 
		Period : Period, 
		InactiveElement : FHIRBoolean, 
		Inactive : Boolean
	}
};
alter type Group
{
	create representation Group
	{
		Identifier : list(Identifier), 
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		TypeElement : Code, 
		Type : String, 
		ActualElement : FHIRBoolean, 
		Actual : Boolean, 
		Code : CodeableConcept, 
		NameElement : FHIRString, 
		Name : String, 
		QuantityElement : UnsignedInt, 
		Quantity : Integer, 
		Characteristic : list(Group.CharacteristicComponent), 
		Member : list(Group.MemberComponent)
	}
};
create type GuidanceResponse from class "Hl7.Fhir.Model.GuidanceResponse" is { DomainResource };
alter type GuidanceResponse
{
	create representation GuidanceResponse
	{
		RequestIdElement : Id, 
		RequestId : String, 
		Identifier : Identifier, 
		Module : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		OccurrenceDateTimeElement : FHIRDateTime, 
		OccurrenceDateTime : String, 
		Performer : ResourceReference, 
		Reason : Element, 
		Note : list(Annotation), 
		EvaluationMessage : list(ResourceReference), 
		OutputParameters : ResourceReference, 
		Result : ResourceReference, 
		DataRequirement : list(DataRequirement)
	}
};
create type HealthcareService from class "Hl7.Fhir.Model.HealthcareService" is { DomainResource };
create type HealthcareService.AvailableTimeComponent from class "Hl7.Fhir.Model.HealthcareService+AvailableTimeComponent" is { BackboneElement };
alter type HealthcareService.AvailableTimeComponent
{
	create representation HealthcareService.AvailableTimeComponent
	{
		DaysOfWeekElement : list(Code), 
		DaysOfWeek : list(String), 
		AllDayElement : FHIRBoolean, 
		AllDay : Boolean, 
		AvailableStartTimeElement : FHIRTime, 
		AvailableStartTime : String, 
		AvailableEndTimeElement : FHIRTime, 
		AvailableEndTime : String
	}
};
create type HealthcareService.NotAvailableComponent from class "Hl7.Fhir.Model.HealthcareService+NotAvailableComponent" is { BackboneElement };
alter type HealthcareService.NotAvailableComponent
{
	create representation HealthcareService.NotAvailableComponent
	{
		DescriptionElement : FHIRString, 
		Description : String, 
		During : Period
	}
};
alter type HealthcareService
{
	create representation HealthcareService
	{
		Identifier : list(Identifier), 
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		ProvidedBy : ResourceReference, 
		Category : CodeableConcept, 
		Type : list(CodeableConcept), 
		Specialty : list(CodeableConcept), 
		Location : list(ResourceReference), 
		NameElement : FHIRString, 
		Name : String, 
		CommentElement : FHIRString, 
		Comment : String, 
		ExtraDetailsElement : FHIRString, 
		ExtraDetails : String, 
		Photo : Attachment, 
		Telecom : list(ContactPoint), 
		CoverageArea : list(ResourceReference), 
		ServiceProvisionCode : list(CodeableConcept), 
		Eligibility : CodeableConcept, 
		EligibilityNoteElement : FHIRString, 
		EligibilityNote : String, 
		ProgramNameElement : list(FHIRString), 
		ProgramName : list(String), 
		Characteristic : list(CodeableConcept), 
		ReferralMethod : list(CodeableConcept), 
		AppointmentRequiredElement : FHIRBoolean, 
		AppointmentRequired : Boolean, 
		AvailableTime : list(HealthcareService.AvailableTimeComponent), 
		NotAvailable : list(HealthcareService.NotAvailableComponent), 
		AvailabilityExceptionsElement : FHIRString, 
		AvailabilityExceptions : String, 
		Endpoint : list(ResourceReference)
	}
};
create type HumanName from class "Hl7.Fhir.Model.HumanName" is { Element };
alter type HumanName
{
	create representation HumanName
	{
		UseElement : Code, 
		Use : String, 
		TextElement : FHIRString, 
		Text : String, 
		FamilyElement : FHIRString, 
		Family : String, 
		GivenElement : list(FHIRString), 
		Given : list(String), 
		PrefixElement : list(FHIRString), 
		Prefix : list(String), 
		SuffixElement : list(FHIRString), 
		Suffix : list(String), 
		Period : Period
	}
};
create type ImagingManifest from class "Hl7.Fhir.Model.ImagingManifest" is { DomainResource };
create type ImagingManifest.StudyComponent from class "Hl7.Fhir.Model.ImagingManifest+StudyComponent" is { BackboneElement };
create type Oid from class "Hl7.Fhir.Model.Oid" is { Element };
alter type Oid
{
	create representation Oid
	{
		Value : String
	}
};
create type ImagingManifest.SeriesComponent from class "Hl7.Fhir.Model.ImagingManifest+SeriesComponent" is { BackboneElement };
create type ImagingManifest.InstanceComponent from class "Hl7.Fhir.Model.ImagingManifest+InstanceComponent" is { BackboneElement };
alter type ImagingManifest.InstanceComponent
{
	create representation ImagingManifest.InstanceComponent
	{
		SopClassElement : Oid, 
		SopClass : String, 
		UidElement : Oid, 
		Uid : String
	}
};
alter type ImagingManifest.SeriesComponent
{
	create representation ImagingManifest.SeriesComponent
	{
		UidElement : Oid, 
		Uid : String, 
		Endpoint : list(ResourceReference), 
		Instance : list(ImagingManifest.InstanceComponent)
	}
};
alter type ImagingManifest.StudyComponent
{
	create representation ImagingManifest.StudyComponent
	{
		UidElement : Oid, 
		Uid : String, 
		ImagingStudy : ResourceReference, 
		Endpoint : list(ResourceReference), 
		Series : list(ImagingManifest.SeriesComponent)
	}
};
alter type ImagingManifest
{
	create representation ImagingManifest
	{
		Identifier : Identifier, 
		Patient : ResourceReference, 
		AuthoringTimeElement : FHIRDateTime, 
		AuthoringTime : String, 
		Author : ResourceReference, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Study : list(ImagingManifest.StudyComponent)
	}
};
create type ImagingStudy from class "Hl7.Fhir.Model.ImagingStudy" is { DomainResource };
create type ImagingStudy.SeriesComponent from class "Hl7.Fhir.Model.ImagingStudy+SeriesComponent" is { BackboneElement };
create type ImagingStudy.InstanceComponent from class "Hl7.Fhir.Model.ImagingStudy+InstanceComponent" is { BackboneElement };
alter type ImagingStudy.InstanceComponent
{
	create representation ImagingStudy.InstanceComponent
	{
		UidElement : Oid, 
		Uid : String, 
		NumberElement : UnsignedInt, 
		Number : Integer, 
		SopClassElement : Oid, 
		SopClass : String, 
		TitleElement : FHIRString, 
		Title : String
	}
};
alter type ImagingStudy.SeriesComponent
{
	create representation ImagingStudy.SeriesComponent
	{
		UidElement : Oid, 
		Uid : String, 
		NumberElement : UnsignedInt, 
		Number : Integer, 
		Modality : Coding, 
		DescriptionElement : FHIRString, 
		Description : String, 
		NumberOfInstancesElement : UnsignedInt, 
		NumberOfInstances : Integer, 
		AvailabilityElement : Code, 
		Availability : String, 
		Endpoint : list(ResourceReference), 
		BodySite : Coding, 
		Laterality : Coding, 
		StartedElement : FHIRDateTime, 
		Started : String, 
		Performer : list(ResourceReference), 
		Instance : list(ImagingStudy.InstanceComponent)
	}
};
alter type ImagingStudy
{
	create representation ImagingStudy
	{
		UidElement : Oid, 
		Uid : String, 
		Accession : Identifier, 
		Identifier : list(Identifier), 
		AvailabilityElement : Code, 
		Availability : String, 
		ModalityList : list(Coding), 
		Patient : ResourceReference, 
		Context : ResourceReference, 
		StartedElement : FHIRDateTime, 
		Started : String, 
		BasedOn : list(ResourceReference), 
		Referrer : ResourceReference, 
		Interpreter : list(ResourceReference), 
		Endpoint : list(ResourceReference), 
		NumberOfSeriesElement : UnsignedInt, 
		NumberOfSeries : Integer, 
		NumberOfInstancesElement : UnsignedInt, 
		NumberOfInstances : Integer, 
		ProcedureReference : list(ResourceReference), 
		ProcedureCode : list(CodeableConcept), 
		Reason : CodeableConcept, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Series : list(ImagingStudy.SeriesComponent)
	}
};
create type Immunization from class "Hl7.Fhir.Model.Immunization" is { DomainResource };
create type Immunization.PractitionerComponent from class "Hl7.Fhir.Model.Immunization+PractitionerComponent" is { BackboneElement };
alter type Immunization.PractitionerComponent
{
	create representation Immunization.PractitionerComponent
	{
		Role : CodeableConcept, 
		Actor : ResourceReference
	}
};
create type Immunization.ExplanationComponent from class "Hl7.Fhir.Model.Immunization+ExplanationComponent" is { BackboneElement };
alter type Immunization.ExplanationComponent
{
	create representation Immunization.ExplanationComponent
	{
		Reason : list(CodeableConcept), 
		ReasonNotGiven : list(CodeableConcept)
	}
};
create type Immunization.ReactionComponent from class "Hl7.Fhir.Model.Immunization+ReactionComponent" is { BackboneElement };
alter type Immunization.ReactionComponent
{
	create representation Immunization.ReactionComponent
	{
		DateElement : FHIRDateTime, 
		Date : String, 
		Detail : ResourceReference, 
		ReportedElement : FHIRBoolean, 
		Reported : Boolean
	}
};
create type Immunization.VaccinationProtocolComponent from class "Hl7.Fhir.Model.Immunization+VaccinationProtocolComponent" is { BackboneElement };
alter type Immunization.VaccinationProtocolComponent
{
	create representation Immunization.VaccinationProtocolComponent
	{
		DoseSequenceElement : PositiveInt, 
		DoseSequence : Integer, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Authority : ResourceReference, 
		SeriesElement : FHIRString, 
		Series : String, 
		SeriesDosesElement : PositiveInt, 
		SeriesDoses : Integer, 
		TargetDisease : list(CodeableConcept), 
		DoseStatus : CodeableConcept, 
		DoseStatusReason : CodeableConcept
	}
};
alter type Immunization
{
	create representation Immunization
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		NotGivenElement : FHIRBoolean, 
		NotGiven : Boolean, 
		VaccineCode : CodeableConcept, 
		Patient : ResourceReference, 
		Encounter : ResourceReference, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PrimarySourceElement : FHIRBoolean, 
		PrimarySource : Boolean, 
		ReportOrigin : CodeableConcept, 
		Location : ResourceReference, 
		Manufacturer : ResourceReference, 
		LotNumberElement : FHIRString, 
		LotNumber : String, 
		ExpirationDateElement : FHIRDate, 
		ExpirationDate : String, 
		Site : CodeableConcept, 
		Route : CodeableConcept, 
		DoseQuantity : SimpleQuantity, 
		Practitioner : list(Immunization.PractitionerComponent), 
		Note : list(Annotation), 
		Explanation : Immunization.ExplanationComponent, 
		Reaction : list(Immunization.ReactionComponent), 
		VaccinationProtocol : list(Immunization.VaccinationProtocolComponent)
	}
};
create type ImmunizationRecommendation from class "Hl7.Fhir.Model.ImmunizationRecommendation" is { DomainResource };
create type ImmunizationRecommendation.RecommendationComponent from class "Hl7.Fhir.Model.ImmunizationRecommendation+RecommendationComponent" is { BackboneElement };
create type ImmunizationRecommendation.DateCriterionComponent from class "Hl7.Fhir.Model.ImmunizationRecommendation+DateCriterionComponent" is { BackboneElement };
alter type ImmunizationRecommendation.DateCriterionComponent
{
	create representation ImmunizationRecommendation.DateCriterionComponent
	{
		Code : CodeableConcept, 
		ValueElement : FHIRDateTime, 
		Value : String
	}
};
create type ImmunizationRecommendation.ProtocolComponent from class "Hl7.Fhir.Model.ImmunizationRecommendation+ProtocolComponent" is { BackboneElement };
alter type ImmunizationRecommendation.ProtocolComponent
{
	create representation ImmunizationRecommendation.ProtocolComponent
	{
		DoseSequenceElement : PositiveInt, 
		DoseSequence : Integer, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Authority : ResourceReference, 
		SeriesElement : FHIRString, 
		Series : String
	}
};
alter type ImmunizationRecommendation.RecommendationComponent
{
	create representation ImmunizationRecommendation.RecommendationComponent
	{
		DateElement : FHIRDateTime, 
		Date : String, 
		VaccineCode : CodeableConcept, 
		TargetDisease : CodeableConcept, 
		DoseNumberElement : PositiveInt, 
		DoseNumber : Integer, 
		ForecastStatus : CodeableConcept, 
		DateCriterion : list(ImmunizationRecommendation.DateCriterionComponent), 
		Protocol : ImmunizationRecommendation.ProtocolComponent, 
		SupportingImmunization : list(ResourceReference), 
		SupportingPatientInformation : list(ResourceReference)
	}
};
alter type ImmunizationRecommendation
{
	create representation ImmunizationRecommendation
	{
		Identifier : list(Identifier), 
		Patient : ResourceReference, 
		Recommendation : list(ImmunizationRecommendation.RecommendationComponent)
	}
};
create type ImplementationGuide from class "Hl7.Fhir.Model.ImplementationGuide" is { DomainResource };
create type ImplementationGuide.DependencyComponent from class "Hl7.Fhir.Model.ImplementationGuide+DependencyComponent" is { BackboneElement };
alter type ImplementationGuide.DependencyComponent
{
	create representation ImplementationGuide.DependencyComponent
	{
		TypeElement : Code, 
		Type : String, 
		UriElement : FHIRUri, 
		Uri : String
	}
};
create type ImplementationGuide.PackageComponent from class "Hl7.Fhir.Model.ImplementationGuide+PackageComponent" is { BackboneElement };
create type ImplementationGuide.ResourceComponent from class "Hl7.Fhir.Model.ImplementationGuide+ResourceComponent" is { BackboneElement };
alter type ImplementationGuide.ResourceComponent
{
	create representation ImplementationGuide.ResourceComponent
	{
		ExampleElement : FHIRBoolean, 
		Example : Boolean, 
		NameElement : FHIRString, 
		Name : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		AcronymElement : FHIRString, 
		Acronym : String, 
		Source : Element, 
		ExampleFor : ResourceReference
	}
};
alter type ImplementationGuide.PackageComponent
{
	create representation ImplementationGuide.PackageComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Resource : list(ImplementationGuide.ResourceComponent)
	}
};
create type ImplementationGuide.GlobalComponent from class "Hl7.Fhir.Model.ImplementationGuide+GlobalComponent" is { BackboneElement };
alter type ImplementationGuide.GlobalComponent
{
	create representation ImplementationGuide.GlobalComponent
	{
		TypeElement : Code, 
		Type : String, 
		Profile : ResourceReference
	}
};
create type ImplementationGuide.PageComponent from class "Hl7.Fhir.Model.ImplementationGuide+PageComponent" is { BackboneElement };
alter type ImplementationGuide.PageComponent
{
	create representation ImplementationGuide.PageComponent
	{
		SourceElement : FHIRUri, 
		Source : String, 
		TitleElement : FHIRString, 
		Title : String, 
		KindElement : Code, 
		Kind : String, 
		TypeElement : list(Code), 
		Type : list(String), 
		PackageElement : list(FHIRString), 
		Package : list(String), 
		FormatElement : Code, 
		Format : String, 
		Page : list(ImplementationGuide.PageComponent)
	}
};
alter type ImplementationGuide
{
	create representation ImplementationGuide
	{
		UrlElement : FHIRUri, 
		Url : String, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Copyright : Markdown, 
		FhirVersionElement : Id, 
		FhirVersion : String, 
		Dependency : list(ImplementationGuide.DependencyComponent), 
		Package : list(ImplementationGuide.PackageComponent), 
		Global : list(ImplementationGuide.GlobalComponent), 
		BinaryElement : list(FHIRUri), 
		Binary : list(String), 
		Page : ImplementationGuide.PageComponent, 
		Purpose : Markdown
	}
};
create type Library from class "Hl7.Fhir.Model.Library" is { DomainResource };
create type ParameterDefinition from class "Hl7.Fhir.Model.ParameterDefinition" is { Element };
alter type ParameterDefinition
{
	create representation ParameterDefinition
	{
		NameElement : Code, 
		Name : String, 
		UseElement : Code, 
		Use : String, 
		MinElement : FHIRInteger, 
		Min : Integer, 
		MaxElement : FHIRString, 
		Max : String, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		TypeElement : Code, 
		Type : String, 
		Profile : ResourceReference
	}
};
alter type Library
{
	create representation Library
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		Type : CodeableConcept, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Description : Markdown, 
		Purpose : Markdown, 
		UsageElement : FHIRString, 
		Usage : String, 
		ApprovalDateElement : FHIRDate, 
		ApprovalDate : String, 
		LastReviewDateElement : FHIRDate, 
		LastReviewDate : String, 
		EffectivePeriod : Period, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Topic : list(CodeableConcept), 
		Contributor : list(Contributor), 
		Contact : list(ContactDetail), 
		Copyright : Markdown, 
		RelatedArtifact : list(RelatedArtifact), 
		Parameter : list(ParameterDefinition), 
		DataRequirement : list(DataRequirement), 
		Content : list(Attachment)
	}
};
create type Linkage from class "Hl7.Fhir.Model.Linkage" is { DomainResource };
create type Linkage.ItemComponent from class "Hl7.Fhir.Model.Linkage+ItemComponent" is { BackboneElement };
alter type Linkage.ItemComponent
{
	create representation Linkage.ItemComponent
	{
		TypeElement : Code, 
		Type : String, 
		Resource : ResourceReference
	}
};
alter type Linkage
{
	create representation Linkage
	{
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		Author : ResourceReference, 
		Item : list(Linkage.ItemComponent)
	}
};
create type List from class "Hl7.Fhir.Model.List" is { DomainResource };
create type List.EntryComponent from class "Hl7.Fhir.Model.List+EntryComponent" is { BackboneElement };
alter type List.EntryComponent
{
	create representation List.EntryComponent
	{
		Flag : CodeableConcept, 
		DeletedElement : FHIRBoolean, 
		Deleted : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Item : ResourceReference
	}
};
alter type List
{
	create representation List
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		ModeElement : Code, 
		Mode : String, 
		TitleElement : FHIRString, 
		Title : String, 
		Code : CodeableConcept, 
		Subject : ResourceReference, 
		Encounter : ResourceReference, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Source : ResourceReference, 
		OrderedBy : CodeableConcept, 
		Note : list(Annotation), 
		Entry : list(List.EntryComponent), 
		EmptyReason : CodeableConcept
	}
};
create type Location from class "Hl7.Fhir.Model.Location" is { DomainResource };
create type Location.PositionComponent from class "Hl7.Fhir.Model.Location+PositionComponent" is { BackboneElement };
alter type Location.PositionComponent
{
	create representation Location.PositionComponent
	{
		LongitudeElement : FHIRDecimal, 
		Longitude : Decimal, 
		LatitudeElement : FHIRDecimal, 
		Latitude : Decimal, 
		AltitudeElement : FHIRDecimal, 
		Altitude : Decimal
	}
};
alter type Location
{
	create representation Location
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		OperationalStatus : Coding, 
		NameElement : FHIRString, 
		Name : String, 
		AliasElement : list(FHIRString), 
		Alias : list(String), 
		DescriptionElement : FHIRString, 
		Description : String, 
		ModeElement : Code, 
		Mode : String, 
		Type : CodeableConcept, 
		Telecom : list(ContactPoint), 
		Address : Address, 
		PhysicalType : CodeableConcept, 
		Position : Location.PositionComponent, 
		ManagingOrganization : ResourceReference, 
		PartOf : ResourceReference, 
		Endpoint : list(ResourceReference)
	}
};
create type Measure from class "Hl7.Fhir.Model.Measure" is { DomainResource };
create type Measure.GroupComponent from class "Hl7.Fhir.Model.Measure+GroupComponent" is { BackboneElement };
create type Measure.PopulationComponent from class "Hl7.Fhir.Model.Measure+PopulationComponent" is { BackboneElement };
alter type Measure.PopulationComponent
{
	create representation Measure.PopulationComponent
	{
		Identifier : Identifier, 
		Code : CodeableConcept, 
		NameElement : FHIRString, 
		Name : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		CriteriaElement : FHIRString, 
		Criteria : String
	}
};
create type Measure.StratifierComponent from class "Hl7.Fhir.Model.Measure+StratifierComponent" is { BackboneElement };
alter type Measure.StratifierComponent
{
	create representation Measure.StratifierComponent
	{
		Identifier : Identifier, 
		CriteriaElement : FHIRString, 
		Criteria : String, 
		PathElement : FHIRString, 
		Path : String
	}
};
alter type Measure.GroupComponent
{
	create representation Measure.GroupComponent
	{
		Identifier : Identifier, 
		NameElement : FHIRString, 
		Name : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Population : list(Measure.PopulationComponent), 
		Stratifier : list(Measure.StratifierComponent)
	}
};
create type Measure.SupplementalDataComponent from class "Hl7.Fhir.Model.Measure+SupplementalDataComponent" is { BackboneElement };
alter type Measure.SupplementalDataComponent
{
	create representation Measure.SupplementalDataComponent
	{
		Identifier : Identifier, 
		Usage : list(CodeableConcept), 
		CriteriaElement : FHIRString, 
		Criteria : String, 
		PathElement : FHIRString, 
		Path : String
	}
};
alter type Measure
{
	create representation Measure
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Description : Markdown, 
		Purpose : Markdown, 
		UsageElement : FHIRString, 
		Usage : String, 
		ApprovalDateElement : FHIRDate, 
		ApprovalDate : String, 
		LastReviewDateElement : FHIRDate, 
		LastReviewDate : String, 
		EffectivePeriod : Period, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Topic : list(CodeableConcept), 
		Contributor : list(Contributor), 
		Contact : list(ContactDetail), 
		Copyright : Markdown, 
		RelatedArtifact : list(RelatedArtifact), 
		Library : list(ResourceReference), 
		Disclaimer : Markdown, 
		Scoring : CodeableConcept, 
		CompositeScoring : CodeableConcept, 
		Type : list(CodeableConcept), 
		RiskAdjustmentElement : FHIRString, 
		RiskAdjustment : String, 
		RateAggregationElement : FHIRString, 
		RateAggregation : String, 
		Rationale : Markdown, 
		ClinicalRecommendationStatement : Markdown, 
		ImprovementNotationElement : FHIRString, 
		ImprovementNotation : String, 
		Definition : list(Markdown), 
		Guidance : Markdown, 
		SetElement : FHIRString, 
		Set : String, 
		Group : list(Measure.GroupComponent), 
		SupplementalData : list(Measure.SupplementalDataComponent)
	}
};
create type MeasureReport from class "Hl7.Fhir.Model.MeasureReport" is { DomainResource };
create type MeasureReport.GroupComponent from class "Hl7.Fhir.Model.MeasureReport+GroupComponent" is { BackboneElement };
create type MeasureReport.PopulationComponent from class "Hl7.Fhir.Model.MeasureReport+PopulationComponent" is { BackboneElement };
alter type MeasureReport.PopulationComponent
{
	create representation MeasureReport.PopulationComponent
	{
		Identifier : Identifier, 
		Code : CodeableConcept, 
		CountElement : FHIRInteger, 
		Count : Integer, 
		Patients : ResourceReference
	}
};
create type MeasureReport.StratifierComponent from class "Hl7.Fhir.Model.MeasureReport+StratifierComponent" is { BackboneElement };
create type MeasureReport.StratifierGroupComponent from class "Hl7.Fhir.Model.MeasureReport+StratifierGroupComponent" is { BackboneElement };
create type MeasureReport.StratifierGroupPopulationComponent from class "Hl7.Fhir.Model.MeasureReport+StratifierGroupPopulationComponent" is { BackboneElement };
alter type MeasureReport.StratifierGroupPopulationComponent
{
	create representation MeasureReport.StratifierGroupPopulationComponent
	{
		Identifier : Identifier, 
		Code : CodeableConcept, 
		CountElement : FHIRInteger, 
		Count : Integer, 
		Patients : ResourceReference
	}
};
alter type MeasureReport.StratifierGroupComponent
{
	create representation MeasureReport.StratifierGroupComponent
	{
		ValueElement : FHIRString, 
		Value : String, 
		Population : list(MeasureReport.StratifierGroupPopulationComponent), 
		MeasureScoreElement : FHIRDecimal, 
		MeasureScore : Decimal
	}
};
alter type MeasureReport.StratifierComponent
{
	create representation MeasureReport.StratifierComponent
	{
		Identifier : Identifier, 
		Stratum : list(MeasureReport.StratifierGroupComponent)
	}
};
alter type MeasureReport.GroupComponent
{
	create representation MeasureReport.GroupComponent
	{
		Identifier : Identifier, 
		Population : list(MeasureReport.PopulationComponent), 
		MeasureScoreElement : FHIRDecimal, 
		MeasureScore : Decimal, 
		Stratifier : list(MeasureReport.StratifierComponent)
	}
};
alter type MeasureReport
{
	create representation MeasureReport
	{
		Identifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		TypeElement : Code, 
		Type : String, 
		Measure : ResourceReference, 
		Patient : ResourceReference, 
		DateElement : FHIRDateTime, 
		Date : String, 
		ReportingOrganization : ResourceReference, 
		Period : Period, 
		Group : list(MeasureReport.GroupComponent), 
		EvaluatedResources : ResourceReference
	}
};
create type Media from class "Hl7.Fhir.Model.Media" is { DomainResource };
alter type Media
{
	create representation Media
	{
		Identifier : list(Identifier), 
		BasedOn : list(ResourceReference), 
		TypeElement : Code, 
		Type : String, 
		Subtype : CodeableConcept, 
		View : CodeableConcept, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Occurrence : Element, 
		Operator : ResourceReference, 
		ReasonCode : list(CodeableConcept), 
		BodySite : CodeableConcept, 
		Device : ResourceReference, 
		HeightElement : PositiveInt, 
		Height : Integer, 
		WidthElement : PositiveInt, 
		Width : Integer, 
		FramesElement : PositiveInt, 
		Frames : Integer, 
		DurationElement : UnsignedInt, 
		Duration : Integer, 
		Content : Attachment, 
		Note : list(Annotation)
	}
};
create type Medication from class "Hl7.Fhir.Model.Medication" is { DomainResource };
create type Medication.IngredientComponent from class "Hl7.Fhir.Model.Medication+IngredientComponent" is { BackboneElement };
alter type Medication.IngredientComponent
{
	create representation Medication.IngredientComponent
	{
		Item : Element, 
		IsActiveElement : FHIRBoolean, 
		IsActive : Boolean, 
		Amount : Ratio
	}
};
create type Medication.PackageComponent from class "Hl7.Fhir.Model.Medication+PackageComponent" is { BackboneElement };
create type Medication.ContentComponent from class "Hl7.Fhir.Model.Medication+ContentComponent" is { BackboneElement };
alter type Medication.ContentComponent
{
	create representation Medication.ContentComponent
	{
		Item : Element, 
		Amount : SimpleQuantity
	}
};
create type Medication.BatchComponent from class "Hl7.Fhir.Model.Medication+BatchComponent" is { BackboneElement };
alter type Medication.BatchComponent
{
	create representation Medication.BatchComponent
	{
		LotNumberElement : FHIRString, 
		LotNumber : String, 
		ExpirationDateElement : FHIRDateTime, 
		ExpirationDate : String
	}
};
alter type Medication.PackageComponent
{
	create representation Medication.PackageComponent
	{
		Container : CodeableConcept, 
		Content : list(Medication.ContentComponent), 
		Batch : list(Medication.BatchComponent)
	}
};
alter type Medication
{
	create representation Medication
	{
		Code : CodeableConcept, 
		StatusElement : Code, 
		Status : String, 
		IsBrandElement : FHIRBoolean, 
		IsBrand : Boolean, 
		IsOverTheCounterElement : FHIRBoolean, 
		IsOverTheCounter : Boolean, 
		Manufacturer : ResourceReference, 
		Form : CodeableConcept, 
		Ingredient : list(Medication.IngredientComponent), 
		Package : Medication.PackageComponent, 
		Image : list(Attachment)
	}
};
create type MedicationAdministration from class "Hl7.Fhir.Model.MedicationAdministration" is { DomainResource };
create type MedicationAdministration.PerformerComponent from class "Hl7.Fhir.Model.MedicationAdministration+PerformerComponent" is { BackboneElement };
alter type MedicationAdministration.PerformerComponent
{
	create representation MedicationAdministration.PerformerComponent
	{
		Actor : ResourceReference, 
		OnBehalfOf : ResourceReference
	}
};
create type MedicationAdministration.DosageComponent from class "Hl7.Fhir.Model.MedicationAdministration+DosageComponent" is { BackboneElement };
alter type MedicationAdministration.DosageComponent
{
	create representation MedicationAdministration.DosageComponent
	{
		TextElement : FHIRString, 
		Text : String, 
		Site : CodeableConcept, 
		Route : CodeableConcept, 
		Method : CodeableConcept, 
		Dose : SimpleQuantity, 
		Rate : Element
	}
};
alter type MedicationAdministration
{
	create representation MedicationAdministration
	{
		Identifier : list(Identifier), 
		Definition : list(ResourceReference), 
		PartOf : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		Category : CodeableConcept, 
		Medication : Element, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		SupportingInformation : list(ResourceReference), 
		Effective : Element, 
		Performer : list(MedicationAdministration.PerformerComponent), 
		NotGivenElement : FHIRBoolean, 
		NotGiven : Boolean, 
		ReasonNotGiven : list(CodeableConcept), 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		Prescription : ResourceReference, 
		Device : list(ResourceReference), 
		Note : list(Annotation), 
		Dosage : MedicationAdministration.DosageComponent, 
		EventHistory : list(ResourceReference)
	}
};
create type MedicationDispense from class "Hl7.Fhir.Model.MedicationDispense" is { DomainResource };
create type MedicationDispense.PerformerComponent from class "Hl7.Fhir.Model.MedicationDispense+PerformerComponent" is { BackboneElement };
alter type MedicationDispense.PerformerComponent
{
	create representation MedicationDispense.PerformerComponent
	{
		Actor : ResourceReference, 
		OnBehalfOf : ResourceReference
	}
};
create type MedicationDispense.SubstitutionComponent from class "Hl7.Fhir.Model.MedicationDispense+SubstitutionComponent" is { BackboneElement };
alter type MedicationDispense.SubstitutionComponent
{
	create representation MedicationDispense.SubstitutionComponent
	{
		WasSubstitutedElement : FHIRBoolean, 
		WasSubstituted : Boolean, 
		Type : CodeableConcept, 
		Reason : list(CodeableConcept), 
		ResponsibleParty : list(ResourceReference)
	}
};
alter type MedicationDispense
{
	create representation MedicationDispense
	{
		Identifier : list(Identifier), 
		PartOf : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		Category : CodeableConcept, 
		Medication : Element, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		SupportingInformation : list(ResourceReference), 
		Performer : list(MedicationDispense.PerformerComponent), 
		AuthorizingPrescription : list(ResourceReference), 
		Type : CodeableConcept, 
		Quantity : SimpleQuantity, 
		DaysSupply : SimpleQuantity, 
		WhenPreparedElement : FHIRDateTime, 
		WhenPrepared : String, 
		WhenHandedOverElement : FHIRDateTime, 
		WhenHandedOver : String, 
		Destination : ResourceReference, 
		Receiver : list(ResourceReference), 
		Note : list(Annotation), 
		DosageInstruction : list(Dosage), 
		Substitution : MedicationDispense.SubstitutionComponent, 
		DetectedIssue : list(ResourceReference), 
		NotDoneElement : FHIRBoolean, 
		NotDone : Boolean, 
		NotDoneReason : Element, 
		EventHistory : list(ResourceReference)
	}
};
create type MedicationRequest from class "Hl7.Fhir.Model.MedicationRequest" is { DomainResource };
create type MedicationRequest.RequesterComponent from class "Hl7.Fhir.Model.MedicationRequest+RequesterComponent" is { BackboneElement };
alter type MedicationRequest.RequesterComponent
{
	create representation MedicationRequest.RequesterComponent
	{
		Agent : ResourceReference, 
		OnBehalfOf : ResourceReference
	}
};
create type MedicationRequest.DispenseRequestComponent from class "Hl7.Fhir.Model.MedicationRequest+DispenseRequestComponent" is { BackboneElement };
alter type MedicationRequest.DispenseRequestComponent
{
	create representation MedicationRequest.DispenseRequestComponent
	{
		ValidityPeriod : Period, 
		NumberOfRepeatsAllowedElement : PositiveInt, 
		NumberOfRepeatsAllowed : Integer, 
		Quantity : SimpleQuantity, 
		ExpectedSupplyDuration : Duration, 
		Performer : ResourceReference
	}
};
create type MedicationRequest.SubstitutionComponent from class "Hl7.Fhir.Model.MedicationRequest+SubstitutionComponent" is { BackboneElement };
alter type MedicationRequest.SubstitutionComponent
{
	create representation MedicationRequest.SubstitutionComponent
	{
		AllowedElement : FHIRBoolean, 
		Allowed : Boolean, 
		Reason : CodeableConcept
	}
};
alter type MedicationRequest
{
	create representation MedicationRequest
	{
		Identifier : list(Identifier), 
		Definition : list(ResourceReference), 
		BasedOn : list(ResourceReference), 
		GroupIdentifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		IntentElement : Code, 
		Intent : String, 
		Category : CodeableConcept, 
		PriorityElement : Code, 
		Priority : String, 
		Medication : Element, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		SupportingInformation : list(ResourceReference), 
		AuthoredOnElement : FHIRDateTime, 
		AuthoredOn : String, 
		Requester : MedicationRequest.RequesterComponent, 
		Recorder : ResourceReference, 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		Note : list(Annotation), 
		DosageInstruction : list(Dosage), 
		DispenseRequest : MedicationRequest.DispenseRequestComponent, 
		Substitution : MedicationRequest.SubstitutionComponent, 
		PriorPrescription : ResourceReference, 
		DetectedIssue : list(ResourceReference), 
		EventHistory : list(ResourceReference)
	}
};
create type MedicationStatement from class "Hl7.Fhir.Model.MedicationStatement" is { DomainResource };
alter type MedicationStatement
{
	create representation MedicationStatement
	{
		Identifier : list(Identifier), 
		BasedOn : list(ResourceReference), 
		PartOf : list(ResourceReference), 
		Context : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		Category : CodeableConcept, 
		Medication : Element, 
		Effective : Element, 
		DateAssertedElement : FHIRDateTime, 
		DateAsserted : String, 
		InformationSource : ResourceReference, 
		Subject : ResourceReference, 
		DerivedFrom : list(ResourceReference), 
		TakenElement : Code, 
		Taken : String, 
		ReasonNotTaken : list(CodeableConcept), 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		Note : list(Annotation), 
		Dosage : list(Dosage)
	}
};
create type MessageDefinition from class "Hl7.Fhir.Model.MessageDefinition" is { DomainResource };
create type MessageDefinition.FocusComponent from class "Hl7.Fhir.Model.MessageDefinition+FocusComponent" is { BackboneElement };
alter type MessageDefinition.FocusComponent
{
	create representation MessageDefinition.FocusComponent
	{
		CodeElement : Code, 
		Code : String, 
		Profile : ResourceReference, 
		MinElement : UnsignedInt, 
		Min : Integer, 
		MaxElement : FHIRString, 
		Max : String
	}
};
create type MessageDefinition.AllowedResponseComponent from class "Hl7.Fhir.Model.MessageDefinition+AllowedResponseComponent" is { BackboneElement };
alter type MessageDefinition.AllowedResponseComponent
{
	create representation MessageDefinition.AllowedResponseComponent
	{
		Message : ResourceReference, 
		Situation : Markdown
	}
};
alter type MessageDefinition
{
	create representation MessageDefinition
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : Identifier, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Purpose : Markdown, 
		Copyright : Markdown, 
		Base : ResourceReference, 
		Parent : list(ResourceReference), 
		Replaces : list(ResourceReference), 
		Event : Coding, 
		CategoryElement : Code, 
		Category : String, 
		Focus : list(MessageDefinition.FocusComponent), 
		ResponseRequiredElement : FHIRBoolean, 
		ResponseRequired : Boolean, 
		AllowedResponse : list(MessageDefinition.AllowedResponseComponent)
	}
};
create type MessageHeader from class "Hl7.Fhir.Model.MessageHeader" is { DomainResource };
create type MessageHeader.MessageDestinationComponent from class "Hl7.Fhir.Model.MessageHeader+MessageDestinationComponent" is { BackboneElement };
alter type MessageHeader.MessageDestinationComponent
{
	create representation MessageHeader.MessageDestinationComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Target : ResourceReference, 
		EndpointElement : FHIRUri, 
		Endpoint : String
	}
};
create type MessageHeader.MessageSourceComponent from class "Hl7.Fhir.Model.MessageHeader+MessageSourceComponent" is { BackboneElement };
alter type MessageHeader.MessageSourceComponent
{
	create representation MessageHeader.MessageSourceComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		SoftwareElement : FHIRString, 
		Software : String, 
		VersionElement : FHIRString, 
		Version : String, 
		Contact : ContactPoint, 
		EndpointElement : FHIRUri, 
		Endpoint : String
	}
};
create type MessageHeader.ResponseComponent from class "Hl7.Fhir.Model.MessageHeader+ResponseComponent" is { BackboneElement };
alter type MessageHeader.ResponseComponent
{
	create representation MessageHeader.ResponseComponent
	{
		IdentifierElement : Id, 
		Identifier : String, 
		CodeElement : Code, 
		Code : String, 
		Details : ResourceReference
	}
};
alter type MessageHeader
{
	create representation MessageHeader
	{
		Event : Coding, 
		Destination : list(MessageHeader.MessageDestinationComponent), 
		Receiver : ResourceReference, 
		Sender : ResourceReference, 
		TimestampElement : Instant, 
		Timestamp : DateTime, 
		Enterer : ResourceReference, 
		Author : ResourceReference, 
		Source : MessageHeader.MessageSourceComponent, 
		Responsible : ResourceReference, 
		Reason : CodeableConcept, 
		Response : MessageHeader.ResponseComponent, 
		Focus : list(ResourceReference)
	}
};
create type NamingSystem from class "Hl7.Fhir.Model.NamingSystem" is { DomainResource };
create type NamingSystem.UniqueIdComponent from class "Hl7.Fhir.Model.NamingSystem+UniqueIdComponent" is { BackboneElement };
alter type NamingSystem.UniqueIdComponent
{
	create representation NamingSystem.UniqueIdComponent
	{
		TypeElement : Code, 
		Type : String, 
		ValueElement : FHIRString, 
		Value : String, 
		PreferredElement : FHIRBoolean, 
		Preferred : Boolean, 
		CommentElement : FHIRString, 
		Comment : String, 
		Period : Period
	}
};
alter type NamingSystem
{
	create representation NamingSystem
	{
		NameElement : FHIRString, 
		Name : String, 
		StatusElement : Code, 
		Status : String, 
		KindElement : Code, 
		Kind : String, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		ResponsibleElement : FHIRString, 
		Responsible : String, 
		Type : CodeableConcept, 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		UsageElement : FHIRString, 
		Usage : String, 
		UniqueId : list(NamingSystem.UniqueIdComponent), 
		ReplacedBy : ResourceReference, 
		Purpose : Markdown, 
		Experimental : Boolean, 
		ExperimentalElement : FHIRBoolean, 
		Url : String, 
		UrlElement : FHIRUri
	}
};
create type NutritionOrder from class "Hl7.Fhir.Model.NutritionOrder" is { DomainResource };
create type NutritionOrder.OralDietComponent from class "Hl7.Fhir.Model.NutritionOrder+OralDietComponent" is { BackboneElement };
create type NutritionOrder.NutrientComponent from class "Hl7.Fhir.Model.NutritionOrder+NutrientComponent" is { BackboneElement };
alter type NutritionOrder.NutrientComponent
{
	create representation NutritionOrder.NutrientComponent
	{
		Modifier : CodeableConcept, 
		Amount : SimpleQuantity
	}
};
create type NutritionOrder.TextureComponent from class "Hl7.Fhir.Model.NutritionOrder+TextureComponent" is { BackboneElement };
alter type NutritionOrder.TextureComponent
{
	create representation NutritionOrder.TextureComponent
	{
		Modifier : CodeableConcept, 
		FoodType : CodeableConcept
	}
};
alter type NutritionOrder.OralDietComponent
{
	create representation NutritionOrder.OralDietComponent
	{
		Type : list(CodeableConcept), 
		Schedule : list(Timing), 
		Nutrient : list(NutritionOrder.NutrientComponent), 
		Texture : list(NutritionOrder.TextureComponent), 
		FluidConsistencyType : list(CodeableConcept), 
		InstructionElement : FHIRString, 
		Instruction : String
	}
};
create type NutritionOrder.SupplementComponent from class "Hl7.Fhir.Model.NutritionOrder+SupplementComponent" is { BackboneElement };
alter type NutritionOrder.SupplementComponent
{
	create representation NutritionOrder.SupplementComponent
	{
		Type : CodeableConcept, 
		ProductNameElement : FHIRString, 
		ProductName : String, 
		Schedule : list(Timing), 
		Quantity : SimpleQuantity, 
		InstructionElement : FHIRString, 
		Instruction : String
	}
};
create type NutritionOrder.EnteralFormulaComponent from class "Hl7.Fhir.Model.NutritionOrder+EnteralFormulaComponent" is { BackboneElement };
create type NutritionOrder.AdministrationComponent from class "Hl7.Fhir.Model.NutritionOrder+AdministrationComponent" is { BackboneElement };
alter type NutritionOrder.AdministrationComponent
{
	create representation NutritionOrder.AdministrationComponent
	{
		Schedule : Timing, 
		Quantity : SimpleQuantity, 
		Rate : Element
	}
};
alter type NutritionOrder.EnteralFormulaComponent
{
	create representation NutritionOrder.EnteralFormulaComponent
	{
		BaseFormulaType : CodeableConcept, 
		BaseFormulaProductNameElement : FHIRString, 
		BaseFormulaProductName : String, 
		AdditiveType : CodeableConcept, 
		AdditiveProductNameElement : FHIRString, 
		AdditiveProductName : String, 
		CaloricDensity : SimpleQuantity, 
		RouteofAdministration : CodeableConcept, 
		Administration : list(NutritionOrder.AdministrationComponent), 
		MaxVolumeToDeliver : SimpleQuantity, 
		AdministrationInstructionElement : FHIRString, 
		AdministrationInstruction : String
	}
};
alter type NutritionOrder
{
	create representation NutritionOrder
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Patient : ResourceReference, 
		Encounter : ResourceReference, 
		DateTimeElement : FHIRDateTime, 
		DateTime : String, 
		Orderer : ResourceReference, 
		AllergyIntolerance : list(ResourceReference), 
		FoodPreferenceModifier : list(CodeableConcept), 
		ExcludeFoodModifier : list(CodeableConcept), 
		OralDiet : NutritionOrder.OralDietComponent, 
		Supplement : list(NutritionOrder.SupplementComponent), 
		EnteralFormula : NutritionOrder.EnteralFormulaComponent
	}
};
create type OperationDefinition from class "Hl7.Fhir.Model.OperationDefinition" is { DomainResource };
create type OperationDefinition.ParameterComponent from class "Hl7.Fhir.Model.OperationDefinition+ParameterComponent" is { BackboneElement };
create type OperationDefinition.BindingComponent from class "Hl7.Fhir.Model.OperationDefinition+BindingComponent" is { BackboneElement };
alter type OperationDefinition.BindingComponent
{
	create representation OperationDefinition.BindingComponent
	{
		StrengthElement : Code, 
		Strength : String, 
		ValueSet : Element
	}
};
alter type OperationDefinition.ParameterComponent
{
	create representation OperationDefinition.ParameterComponent
	{
		NameElement : Code, 
		Name : String, 
		UseElement : Code, 
		Use : String, 
		MinElement : FHIRInteger, 
		Min : Integer, 
		MaxElement : FHIRString, 
		Max : String, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		TypeElement : Code, 
		Type : String, 
		SearchTypeElement : Code, 
		SearchType : String, 
		Profile : ResourceReference, 
		Binding : OperationDefinition.BindingComponent, 
		Part : list(OperationDefinition.ParameterComponent)
	}
};
create type OperationDefinition.OverloadComponent from class "Hl7.Fhir.Model.OperationDefinition+OverloadComponent" is { BackboneElement };
alter type OperationDefinition.OverloadComponent
{
	create representation OperationDefinition.OverloadComponent
	{
		ParameterNameElement : list(FHIRString), 
		ParameterName : list(String), 
		CommentElement : FHIRString, 
		Comment : String
	}
};
alter type OperationDefinition
{
	create representation OperationDefinition
	{
		UrlElement : FHIRUri, 
		Url : String, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		StatusElement : Code, 
		Status : String, 
		KindElement : Code, 
		Kind : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Purpose : Markdown, 
		IdempotentElement : FHIRBoolean, 
		Idempotent : Boolean, 
		CodeElement : Code, 
		Code : String, 
		CommentElement : FHIRString, 
		Comment : String, 
		Base : ResourceReference, 
		ResourceElement : list(Code), 
		Resource : list(String), 
		SystemElement : FHIRBoolean, 
		System : Boolean, 
		TypeElement : FHIRBoolean, 
		Type : Boolean, 
		InstanceElement : FHIRBoolean, 
		Instance : Boolean, 
		Parameter : list(OperationDefinition.ParameterComponent), 
		Overload : list(OperationDefinition.OverloadComponent)
	}
};
create type OperationOutcome from class "Hl7.Fhir.Model.OperationOutcome" is { DomainResource };
create type OperationOutcome.IssueComponent from class "Hl7.Fhir.Model.OperationOutcome+IssueComponent" is { BackboneElement };
alter type OperationOutcome.IssueComponent
{
	create representation OperationOutcome.IssueComponent
	{
		SeverityElement : Code, 
		Severity : String, 
		CodeElement : Code, 
		Code : String, 
		Details : CodeableConcept, 
		DiagnosticsElement : FHIRString, 
		Diagnostics : String, 
		LocationElement : list(FHIRString), 
		Location : list(String), 
		ExpressionElement : list(FHIRString), 
		Expression : list(String), 
		HierarchyLevel : Integer
	}
};
alter type OperationOutcome
{
	create representation OperationOutcome
	{
		Issue : list(OperationOutcome.IssueComponent)
	}
};
create type Organization from class "Hl7.Fhir.Model.Organization" is { DomainResource };
create type Organization.ContactComponent from class "Hl7.Fhir.Model.Organization+ContactComponent" is { BackboneElement };
alter type Organization.ContactComponent
{
	create representation Organization.ContactComponent
	{
		Purpose : CodeableConcept, 
		Name : HumanName, 
		Telecom : list(ContactPoint), 
		Address : Address
	}
};
alter type Organization
{
	create representation Organization
	{
		Identifier : list(Identifier), 
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		Type : list(CodeableConcept), 
		NameElement : FHIRString, 
		Name : String, 
		AliasElement : list(FHIRString), 
		Alias : list(String), 
		Telecom : list(ContactPoint), 
		Address : list(Address), 
		PartOf : ResourceReference, 
		Contact : list(Organization.ContactComponent), 
		Endpoint : list(ResourceReference)
	}
};
create type Patient from class "Hl7.Fhir.Model.Patient" is { DomainResource };
create type Patient.ContactComponent from class "Hl7.Fhir.Model.Patient+ContactComponent" is { BackboneElement };
alter type Patient.ContactComponent
{
	create representation Patient.ContactComponent
	{
		Relationship : list(CodeableConcept), 
		Name : HumanName, 
		Telecom : list(ContactPoint), 
		Address : Address, 
		GenderElement : Code, 
		Gender : String, 
		Organization : ResourceReference, 
		Period : Period
	}
};
create type Patient.AnimalComponent from class "Hl7.Fhir.Model.Patient+AnimalComponent" is { BackboneElement };
alter type Patient.AnimalComponent
{
	create representation Patient.AnimalComponent
	{
		Species : CodeableConcept, 
		Breed : CodeableConcept, 
		GenderStatus : CodeableConcept
	}
};
create type Patient.CommunicationComponent from class "Hl7.Fhir.Model.Patient+CommunicationComponent" is { BackboneElement };
alter type Patient.CommunicationComponent
{
	create representation Patient.CommunicationComponent
	{
		Language : CodeableConcept, 
		PreferredElement : FHIRBoolean, 
		Preferred : Boolean
	}
};
create type Patient.LinkComponent from class "Hl7.Fhir.Model.Patient+LinkComponent" is { BackboneElement };
alter type Patient.LinkComponent
{
	create representation Patient.LinkComponent
	{
		Other : ResourceReference, 
		TypeElement : Code, 
		Type : String
	}
};
alter type Patient
{
	create representation Patient
	{
		Identifier : list(Identifier), 
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		Name : list(HumanName), 
		Telecom : list(ContactPoint), 
		GenderElement : Code, 
		Gender : String, 
		BirthDateElement : FHIRDate, 
		BirthDate : String, 
		Deceased : Element, 
		Address : list(Address), 
		MaritalStatus : CodeableConcept, 
		MultipleBirth : Element, 
		Photo : list(Attachment), 
		Contact : list(Patient.ContactComponent), 
		Animal : Patient.AnimalComponent, 
		Communication : list(Patient.CommunicationComponent), 
		GeneralPractitioner : list(ResourceReference), 
		ManagingOrganization : ResourceReference, 
		Link : list(Patient.LinkComponent)
	}
};
create type PaymentNotice from class "Hl7.Fhir.Model.PaymentNotice" is { DomainResource };
alter type PaymentNotice
{
	create representation PaymentNotice
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Request : ResourceReference, 
		Response : ResourceReference, 
		StatusDateElement : FHIRDate, 
		StatusDate : String, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Target : ResourceReference, 
		Provider : ResourceReference, 
		Organization : ResourceReference, 
		PaymentStatus : CodeableConcept
	}
};
create type PaymentReconciliation from class "Hl7.Fhir.Model.PaymentReconciliation" is { DomainResource };
create type PaymentReconciliation.DetailsComponent from class "Hl7.Fhir.Model.PaymentReconciliation+DetailsComponent" is { BackboneElement };
alter type PaymentReconciliation.DetailsComponent
{
	create representation PaymentReconciliation.DetailsComponent
	{
		Type : CodeableConcept, 
		Request : ResourceReference, 
		Response : ResourceReference, 
		Submitter : ResourceReference, 
		Payee : ResourceReference, 
		DateElement : FHIRDate, 
		Date : String, 
		Amount : Money
	}
};
create type PaymentReconciliation.NotesComponent from class "Hl7.Fhir.Model.PaymentReconciliation+NotesComponent" is { BackboneElement };
alter type PaymentReconciliation.NotesComponent
{
	create representation PaymentReconciliation.NotesComponent
	{
		Type : CodeableConcept, 
		TextElement : FHIRString, 
		Text : String
	}
};
alter type PaymentReconciliation
{
	create representation PaymentReconciliation
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Period : Period, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Organization : ResourceReference, 
		Request : ResourceReference, 
		Outcome : CodeableConcept, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		RequestProvider : ResourceReference, 
		RequestOrganization : ResourceReference, 
		Detail : list(PaymentReconciliation.DetailsComponent), 
		Form : CodeableConcept, 
		Total : Money, 
		ProcessNote : list(PaymentReconciliation.NotesComponent)
	}
};
create type Person from class "Hl7.Fhir.Model.Person" is { DomainResource };
create type Person.LinkComponent from class "Hl7.Fhir.Model.Person+LinkComponent" is { BackboneElement };
alter type Person.LinkComponent
{
	create representation Person.LinkComponent
	{
		Target : ResourceReference, 
		AssuranceElement : Code, 
		Assurance : String
	}
};
alter type Person
{
	create representation Person
	{
		Identifier : list(Identifier), 
		Name : list(HumanName), 
		Telecom : list(ContactPoint), 
		GenderElement : Code, 
		Gender : String, 
		BirthDateElement : FHIRDate, 
		BirthDate : String, 
		Address : list(Address), 
		Photo : Attachment, 
		ManagingOrganization : ResourceReference, 
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		Link : list(Person.LinkComponent)
	}
};
create type PlanDefinition from class "Hl7.Fhir.Model.PlanDefinition" is { DomainResource };
create type PlanDefinition.GoalComponent from class "Hl7.Fhir.Model.PlanDefinition+GoalComponent" is { BackboneElement };
create type PlanDefinition.TargetComponent from class "Hl7.Fhir.Model.PlanDefinition+TargetComponent" is { BackboneElement };
alter type PlanDefinition.TargetComponent
{
	create representation PlanDefinition.TargetComponent
	{
		Measure : CodeableConcept, 
		Detail : Element, 
		Due : Duration
	}
};
alter type PlanDefinition.GoalComponent
{
	create representation PlanDefinition.GoalComponent
	{
		Category : CodeableConcept, 
		Description : CodeableConcept, 
		Priority : CodeableConcept, 
		Start : CodeableConcept, 
		Addresses : list(CodeableConcept), 
		Documentation : list(RelatedArtifact), 
		Target : list(PlanDefinition.TargetComponent)
	}
};
create type PlanDefinition.ActionComponent from class "Hl7.Fhir.Model.PlanDefinition+ActionComponent" is { BackboneElement };
create type TriggerDefinition from class "Hl7.Fhir.Model.TriggerDefinition" is { Element };
alter type TriggerDefinition
{
	create representation TriggerDefinition
	{
		TypeElement : Code, 
		Type : String, 
		EventNameElement : FHIRString, 
		EventName : String, 
		EventTiming : Element, 
		EventData : DataRequirement
	}
};
create type PlanDefinition.ConditionComponent from class "Hl7.Fhir.Model.PlanDefinition+ConditionComponent" is { BackboneElement };
alter type PlanDefinition.ConditionComponent
{
	create representation PlanDefinition.ConditionComponent
	{
		KindElement : Code, 
		Kind : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		LanguageElement : FHIRString, 
		Language : String, 
		ExpressionElement : FHIRString, 
		Expression : String
	}
};
create type PlanDefinition.RelatedActionComponent from class "Hl7.Fhir.Model.PlanDefinition+RelatedActionComponent" is { BackboneElement };
alter type PlanDefinition.RelatedActionComponent
{
	create representation PlanDefinition.RelatedActionComponent
	{
		ActionIdElement : Id, 
		ActionId : String, 
		RelationshipElement : Code, 
		Relationship : String, 
		Offset : Element
	}
};
create type PlanDefinition.ParticipantComponent from class "Hl7.Fhir.Model.PlanDefinition+ParticipantComponent" is { BackboneElement };
alter type PlanDefinition.ParticipantComponent
{
	create representation PlanDefinition.ParticipantComponent
	{
		TypeElement : Code, 
		Type : String, 
		Role : CodeableConcept
	}
};
create type PlanDefinition.DynamicValueComponent from class "Hl7.Fhir.Model.PlanDefinition+DynamicValueComponent" is { BackboneElement };
alter type PlanDefinition.DynamicValueComponent
{
	create representation PlanDefinition.DynamicValueComponent
	{
		DescriptionElement : FHIRString, 
		Description : String, 
		PathElement : FHIRString, 
		Path : String, 
		LanguageElement : FHIRString, 
		Language : String, 
		ExpressionElement : FHIRString, 
		Expression : String
	}
};
alter type PlanDefinition.ActionComponent
{
	create representation PlanDefinition.ActionComponent
	{
		LabelElement : FHIRString, 
		Label : String, 
		TitleElement : FHIRString, 
		Title : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		TextEquivalentElement : FHIRString, 
		TextEquivalent : String, 
		Code : list(CodeableConcept), 
		Reason : list(CodeableConcept), 
		Documentation : list(RelatedArtifact), 
		GoalIdElement : list(Id), 
		GoalId : list(String), 
		TriggerDefinition : list(TriggerDefinition), 
		Condition : list(PlanDefinition.ConditionComponent), 
		Input : list(DataRequirement), 
		Output : list(DataRequirement), 
		RelatedAction : list(PlanDefinition.RelatedActionComponent), 
		Timing : Element, 
		Participant : list(PlanDefinition.ParticipantComponent), 
		Type : Coding, 
		GroupingBehaviorElement : Code, 
		GroupingBehavior : String, 
		SelectionBehaviorElement : Code, 
		SelectionBehavior : String, 
		RequiredBehaviorElement : Code, 
		RequiredBehavior : String, 
		PrecheckBehaviorElement : Code, 
		PrecheckBehavior : String, 
		CardinalityBehaviorElement : Code, 
		CardinalityBehavior : String, 
		Definition : ResourceReference, 
		Transform : ResourceReference, 
		DynamicValue : list(PlanDefinition.DynamicValueComponent), 
		Action : list(PlanDefinition.ActionComponent)
	}
};
alter type PlanDefinition
{
	create representation PlanDefinition
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		Type : CodeableConcept, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Description : Markdown, 
		Purpose : Markdown, 
		UsageElement : FHIRString, 
		Usage : String, 
		ApprovalDateElement : FHIRDate, 
		ApprovalDate : String, 
		LastReviewDateElement : FHIRDate, 
		LastReviewDate : String, 
		EffectivePeriod : Period, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Topic : list(CodeableConcept), 
		Contributor : list(Contributor), 
		Contact : list(ContactDetail), 
		Copyright : Markdown, 
		RelatedArtifact : list(RelatedArtifact), 
		Library : list(ResourceReference), 
		Goal : list(PlanDefinition.GoalComponent), 
		Action : list(PlanDefinition.ActionComponent)
	}
};
create type Practitioner from class "Hl7.Fhir.Model.Practitioner" is { DomainResource };
create type Practitioner.QualificationComponent from class "Hl7.Fhir.Model.Practitioner+QualificationComponent" is { BackboneElement };
alter type Practitioner.QualificationComponent
{
	create representation Practitioner.QualificationComponent
	{
		Identifier : list(Identifier), 
		Code : CodeableConcept, 
		Period : Period, 
		Issuer : ResourceReference
	}
};
alter type Practitioner
{
	create representation Practitioner
	{
		Identifier : list(Identifier), 
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		Name : list(HumanName), 
		Telecom : list(ContactPoint), 
		Address : list(Address), 
		GenderElement : Code, 
		Gender : String, 
		BirthDateElement : FHIRDate, 
		BirthDate : String, 
		Photo : list(Attachment), 
		Qualification : list(Practitioner.QualificationComponent), 
		Communication : list(CodeableConcept)
	}
};
create type PractitionerRole from class "Hl7.Fhir.Model.PractitionerRole" is { DomainResource };
create type PractitionerRole.AvailableTimeComponent from class "Hl7.Fhir.Model.PractitionerRole+AvailableTimeComponent" is { BackboneElement };
alter type PractitionerRole.AvailableTimeComponent
{
	create representation PractitionerRole.AvailableTimeComponent
	{
		DaysOfWeekElement : list(Code), 
		DaysOfWeek : list(String), 
		AllDayElement : FHIRBoolean, 
		AllDay : Boolean, 
		AvailableStartTimeElement : FHIRTime, 
		AvailableStartTime : String, 
		AvailableEndTimeElement : FHIRTime, 
		AvailableEndTime : String
	}
};
create type PractitionerRole.NotAvailableComponent from class "Hl7.Fhir.Model.PractitionerRole+NotAvailableComponent" is { BackboneElement };
alter type PractitionerRole.NotAvailableComponent
{
	create representation PractitionerRole.NotAvailableComponent
	{
		DescriptionElement : FHIRString, 
		Description : String, 
		During : Period
	}
};
alter type PractitionerRole
{
	create representation PractitionerRole
	{
		Identifier : list(Identifier), 
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		Period : Period, 
		Practitioner : ResourceReference, 
		Organization : ResourceReference, 
		Code : list(CodeableConcept), 
		Specialty : list(CodeableConcept), 
		Location : list(ResourceReference), 
		HealthcareService : list(ResourceReference), 
		Telecom : list(ContactPoint), 
		AvailableTime : list(PractitionerRole.AvailableTimeComponent), 
		NotAvailable : list(PractitionerRole.NotAvailableComponent), 
		AvailabilityExceptionsElement : FHIRString, 
		AvailabilityExceptions : String, 
		Endpoint : list(ResourceReference)
	}
};
create type Procedure from class "Hl7.Fhir.Model.Procedure" is { DomainResource };
create type Procedure.PerformerComponent from class "Hl7.Fhir.Model.Procedure+PerformerComponent" is { BackboneElement };
alter type Procedure.PerformerComponent
{
	create representation Procedure.PerformerComponent
	{
		Role : CodeableConcept, 
		Actor : ResourceReference, 
		OnBehalfOf : ResourceReference
	}
};
create type Procedure.FocalDeviceComponent from class "Hl7.Fhir.Model.Procedure+FocalDeviceComponent" is { BackboneElement };
alter type Procedure.FocalDeviceComponent
{
	create representation Procedure.FocalDeviceComponent
	{
		Action : CodeableConcept, 
		Manipulated : ResourceReference
	}
};
alter type Procedure
{
	create representation Procedure
	{
		Identifier : list(Identifier), 
		Definition : list(ResourceReference), 
		BasedOn : list(ResourceReference), 
		PartOf : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		NotDoneElement : FHIRBoolean, 
		NotDone : Boolean, 
		NotDoneReason : CodeableConcept, 
		Category : CodeableConcept, 
		Code : CodeableConcept, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Performed : Element, 
		Performer : list(Procedure.PerformerComponent), 
		Location : ResourceReference, 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		BodySite : list(CodeableConcept), 
		Outcome : CodeableConcept, 
		Report : list(ResourceReference), 
		Complication : list(CodeableConcept), 
		ComplicationDetail : list(ResourceReference), 
		FollowUp : list(CodeableConcept), 
		Note : list(Annotation), 
		FocalDevice : list(Procedure.FocalDeviceComponent), 
		UsedReference : list(ResourceReference), 
		UsedCode : list(CodeableConcept)
	}
};
create type ProcedureRequest from class "Hl7.Fhir.Model.ProcedureRequest" is { DomainResource };
create type ProcedureRequest.RequesterComponent from class "Hl7.Fhir.Model.ProcedureRequest+RequesterComponent" is { BackboneElement };
alter type ProcedureRequest.RequesterComponent
{
	create representation ProcedureRequest.RequesterComponent
	{
		Agent : ResourceReference, 
		OnBehalfOf : ResourceReference
	}
};
alter type ProcedureRequest
{
	create representation ProcedureRequest
	{
		Identifier : list(Identifier), 
		Definition : list(ResourceReference), 
		BasedOn : list(ResourceReference), 
		Replaces : list(ResourceReference), 
		Requisition : Identifier, 
		StatusElement : Code, 
		Status : String, 
		IntentElement : Code, 
		Intent : String, 
		PriorityElement : Code, 
		Priority : String, 
		DoNotPerformElement : FHIRBoolean, 
		DoNotPerform : Boolean, 
		Category : list(CodeableConcept), 
		Code : CodeableConcept, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Occurrence : Element, 
		AsNeeded : Element, 
		AuthoredOnElement : FHIRDateTime, 
		AuthoredOn : String, 
		Requester : ProcedureRequest.RequesterComponent, 
		PerformerType : CodeableConcept, 
		Performer : ResourceReference, 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		SupportingInfo : list(ResourceReference), 
		Specimen : list(ResourceReference), 
		BodySite : list(CodeableConcept), 
		Note : list(Annotation), 
		RelevantHistory : list(ResourceReference)
	}
};
create type ProcessRequest from class "Hl7.Fhir.Model.ProcessRequest" is { DomainResource };
create type ProcessRequest.ItemsComponent from class "Hl7.Fhir.Model.ProcessRequest+ItemsComponent" is { BackboneElement };
alter type ProcessRequest.ItemsComponent
{
	create representation ProcessRequest.ItemsComponent
	{
		SequenceLinkIdElement : FHIRInteger, 
		SequenceLinkId : Integer
	}
};
alter type ProcessRequest
{
	create representation ProcessRequest
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		ActionElement : Code, 
		Action : String, 
		Target : ResourceReference, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Provider : ResourceReference, 
		Organization : ResourceReference, 
		Request : ResourceReference, 
		Response : ResourceReference, 
		NullifyElement : FHIRBoolean, 
		Nullify : Boolean, 
		ReferenceElement : FHIRString, 
		Reference : String, 
		Item : list(ProcessRequest.ItemsComponent), 
		IncludeElement : list(FHIRString), 
		Include : list(String), 
		ExcludeElement : list(FHIRString), 
		Exclude : list(String), 
		Period : Period
	}
};
create type ProcessResponse from class "Hl7.Fhir.Model.ProcessResponse" is { DomainResource };
create type ProcessResponse.ProcessNoteComponent from class "Hl7.Fhir.Model.ProcessResponse+ProcessNoteComponent" is { BackboneElement };
alter type ProcessResponse.ProcessNoteComponent
{
	create representation ProcessResponse.ProcessNoteComponent
	{
		Type : CodeableConcept, 
		TextElement : FHIRString, 
		Text : String
	}
};
alter type ProcessResponse
{
	create representation ProcessResponse
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Organization : ResourceReference, 
		Request : ResourceReference, 
		Outcome : CodeableConcept, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		RequestProvider : ResourceReference, 
		RequestOrganization : ResourceReference, 
		Form : CodeableConcept, 
		ProcessNote : list(ProcessResponse.ProcessNoteComponent), 
		Error : list(CodeableConcept), 
		CommunicationRequest : list(ResourceReference)
	}
};
create type Provenance from class "Hl7.Fhir.Model.Provenance" is { DomainResource };
create type Provenance.AgentComponent from class "Hl7.Fhir.Model.Provenance+AgentComponent" is { BackboneElement };
alter type Provenance.AgentComponent
{
	create representation Provenance.AgentComponent
	{
		Role : list(CodeableConcept), 
		Who : Element, 
		OnBehalfOf : Element, 
		RelatedAgentType : CodeableConcept
	}
};
create type Provenance.EntityComponent from class "Hl7.Fhir.Model.Provenance+EntityComponent" is { BackboneElement };
alter type Provenance.EntityComponent
{
	create representation Provenance.EntityComponent
	{
		RoleElement : Code, 
		Role : String, 
		What : Element, 
		Agent : list(Provenance.AgentComponent)
	}
};
alter type Provenance
{
	create representation Provenance
	{
		Target : list(ResourceReference), 
		Period : Period, 
		RecordedElement : Instant, 
		Recorded : DateTime, 
		PolicyElement : list(FHIRUri), 
		Policy : list(String), 
		Location : ResourceReference, 
		Reason : list(Coding), 
		Activity : Coding, 
		Agent : list(Provenance.AgentComponent), 
		Entity : list(Provenance.EntityComponent), 
		Signature : list(Signature)
	}
};
create type Questionnaire from class "Hl7.Fhir.Model.Questionnaire" is { DomainResource };
create type Questionnaire.ItemComponent from class "Hl7.Fhir.Model.Questionnaire+ItemComponent" is { BackboneElement };
create type Questionnaire.EnableWhenComponent from class "Hl7.Fhir.Model.Questionnaire+EnableWhenComponent" is { BackboneElement };
alter type Questionnaire.EnableWhenComponent
{
	create representation Questionnaire.EnableWhenComponent
	{
		QuestionElement : FHIRString, 
		Question : String, 
		HasAnswerElement : FHIRBoolean, 
		HasAnswer : Boolean, 
		Answer : Element
	}
};
create type Questionnaire.OptionComponent from class "Hl7.Fhir.Model.Questionnaire+OptionComponent" is { BackboneElement };
alter type Questionnaire.OptionComponent
{
	create representation Questionnaire.OptionComponent
	{
		Value : Element
	}
};
alter type Questionnaire.ItemComponent
{
	create representation Questionnaire.ItemComponent
	{
		LinkIdElement : FHIRString, 
		LinkId : String, 
		DefinitionElement : FHIRUri, 
		Definition : String, 
		Code : list(Coding), 
		PrefixElement : FHIRString, 
		Prefix : String, 
		TextElement : FHIRString, 
		Text : String, 
		TypeElement : Code, 
		Type : String, 
		EnableWhen : list(Questionnaire.EnableWhenComponent), 
		RequiredElement : FHIRBoolean, 
		Required : Boolean, 
		RepeatsElement : FHIRBoolean, 
		Repeats : Boolean, 
		ReadOnlyElement : FHIRBoolean, 
		ReadOnly : Boolean, 
		MaxLengthElement : FHIRInteger, 
		MaxLength : Integer, 
		Options : ResourceReference, 
		Option : list(Questionnaire.OptionComponent), 
		Initial : Element, 
		Item : list(Questionnaire.ItemComponent)
	}
};
alter type Questionnaire
{
	create representation Questionnaire
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Description : Markdown, 
		Purpose : Markdown, 
		ApprovalDateElement : FHIRDate, 
		ApprovalDate : String, 
		LastReviewDateElement : FHIRDate, 
		LastReviewDate : String, 
		EffectivePeriod : Period, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Contact : list(ContactDetail), 
		Copyright : Markdown, 
		Code : list(Coding), 
		SubjectTypeElement : list(Code), 
		SubjectType : list(String), 
		Item : list(Questionnaire.ItemComponent)
	}
};
create type QuestionnaireResponse from class "Hl7.Fhir.Model.QuestionnaireResponse" is { DomainResource };
create type QuestionnaireResponse.ItemComponent from class "Hl7.Fhir.Model.QuestionnaireResponse+ItemComponent" is { BackboneElement };
create type QuestionnaireResponse.AnswerComponent from class "Hl7.Fhir.Model.QuestionnaireResponse+AnswerComponent" is { BackboneElement };
alter type QuestionnaireResponse.AnswerComponent
{
	create representation QuestionnaireResponse.AnswerComponent
	{
		Value : Element, 
		Item : list(QuestionnaireResponse.ItemComponent)
	}
};
alter type QuestionnaireResponse.ItemComponent
{
	create representation QuestionnaireResponse.ItemComponent
	{
		LinkIdElement : FHIRString, 
		LinkId : String, 
		DefinitionElement : FHIRUri, 
		Definition : String, 
		TextElement : FHIRString, 
		Text : String, 
		Subject : ResourceReference, 
		Answer : list(QuestionnaireResponse.AnswerComponent), 
		Item : list(QuestionnaireResponse.ItemComponent)
	}
};
alter type QuestionnaireResponse
{
	create representation QuestionnaireResponse
	{
		Identifier : Identifier, 
		BasedOn : list(ResourceReference), 
		Parent : list(ResourceReference), 
		Questionnaire : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		AuthoredElement : FHIRDateTime, 
		Authored : String, 
		Author : ResourceReference, 
		Source : ResourceReference, 
		Item : list(QuestionnaireResponse.ItemComponent)
	}
};
create type ReferralRequest from class "Hl7.Fhir.Model.ReferralRequest" is { DomainResource };
create type ReferralRequest.RequesterComponent from class "Hl7.Fhir.Model.ReferralRequest+RequesterComponent" is { BackboneElement };
alter type ReferralRequest.RequesterComponent
{
	create representation ReferralRequest.RequesterComponent
	{
		Agent : ResourceReference, 
		OnBehalfOf : ResourceReference
	}
};
alter type ReferralRequest
{
	create representation ReferralRequest
	{
		Identifier : list(Identifier), 
		Definition : list(ResourceReference), 
		BasedOn : list(ResourceReference), 
		Replaces : list(ResourceReference), 
		GroupIdentifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		IntentElement : Code, 
		Intent : String, 
		Type : CodeableConcept, 
		PriorityElement : Code, 
		Priority : String, 
		ServiceRequested : list(CodeableConcept), 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Occurrence : Element, 
		AuthoredOnElement : FHIRDateTime, 
		AuthoredOn : String, 
		Requester : ReferralRequest.RequesterComponent, 
		Specialty : CodeableConcept, 
		Recipient : list(ResourceReference), 
		ReasonCode : list(CodeableConcept), 
		ReasonReference : list(ResourceReference), 
		DescriptionElement : FHIRString, 
		Description : String, 
		SupportingInfo : list(ResourceReference), 
		Note : list(Annotation), 
		RelevantHistory : list(ResourceReference)
	}
};
create type RelatedPerson from class "Hl7.Fhir.Model.RelatedPerson" is { DomainResource };
alter type RelatedPerson
{
	create representation RelatedPerson
	{
		Identifier : list(Identifier), 
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		Patient : ResourceReference, 
		Relationship : CodeableConcept, 
		Name : list(HumanName), 
		Telecom : list(ContactPoint), 
		GenderElement : Code, 
		Gender : String, 
		BirthDateElement : FHIRDate, 
		BirthDate : String, 
		Address : list(Address), 
		Photo : list(Attachment), 
		Period : Period
	}
};
create type RequestGroup from class "Hl7.Fhir.Model.RequestGroup" is { DomainResource };
create type RequestGroup.ActionComponent from class "Hl7.Fhir.Model.RequestGroup+ActionComponent" is { BackboneElement };
create type RequestGroup.ConditionComponent from class "Hl7.Fhir.Model.RequestGroup+ConditionComponent" is { BackboneElement };
alter type RequestGroup.ConditionComponent
{
	create representation RequestGroup.ConditionComponent
	{
		KindElement : Code, 
		Kind : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		LanguageElement : FHIRString, 
		Language : String, 
		ExpressionElement : FHIRString, 
		Expression : String
	}
};
create type RequestGroup.RelatedActionComponent from class "Hl7.Fhir.Model.RequestGroup+RelatedActionComponent" is { BackboneElement };
alter type RequestGroup.RelatedActionComponent
{
	create representation RequestGroup.RelatedActionComponent
	{
		ActionIdElement : Id, 
		ActionId : String, 
		RelationshipElement : Code, 
		Relationship : String, 
		Offset : Element
	}
};
alter type RequestGroup.ActionComponent
{
	create representation RequestGroup.ActionComponent
	{
		LabelElement : FHIRString, 
		Label : String, 
		TitleElement : FHIRString, 
		Title : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		TextEquivalentElement : FHIRString, 
		TextEquivalent : String, 
		Code : list(CodeableConcept), 
		Documentation : list(RelatedArtifact), 
		Condition : list(RequestGroup.ConditionComponent), 
		RelatedAction : list(RequestGroup.RelatedActionComponent), 
		Timing : Element, 
		Participant : list(ResourceReference), 
		Type : Coding, 
		GroupingBehaviorElement : Code, 
		GroupingBehavior : String, 
		SelectionBehaviorElement : Code, 
		SelectionBehavior : String, 
		RequiredBehaviorElement : Code, 
		RequiredBehavior : String, 
		PrecheckBehaviorElement : Code, 
		PrecheckBehavior : String, 
		CardinalityBehaviorElement : Code, 
		CardinalityBehavior : String, 
		Resource : ResourceReference, 
		Action : list(RequestGroup.ActionComponent)
	}
};
alter type RequestGroup
{
	create representation RequestGroup
	{
		Identifier : list(Identifier), 
		Definition : list(ResourceReference), 
		BasedOn : list(ResourceReference), 
		Replaces : list(ResourceReference), 
		GroupIdentifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		IntentElement : Code, 
		Intent : String, 
		PriorityElement : Code, 
		Priority : String, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		AuthoredOnElement : FHIRDateTime, 
		AuthoredOn : String, 
		Author : ResourceReference, 
		Reason : Element, 
		Note : list(Annotation), 
		Action : list(RequestGroup.ActionComponent)
	}
};
create type ResearchStudy from class "Hl7.Fhir.Model.ResearchStudy" is { DomainResource };
create type ResearchStudy.ArmComponent from class "Hl7.Fhir.Model.ResearchStudy+ArmComponent" is { BackboneElement };
alter type ResearchStudy.ArmComponent
{
	create representation ResearchStudy.ArmComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Code : CodeableConcept, 
		DescriptionElement : FHIRString, 
		Description : String
	}
};
alter type ResearchStudy
{
	create representation ResearchStudy
	{
		Identifier : list(Identifier), 
		TitleElement : FHIRString, 
		Title : String, 
		Protocol : list(ResourceReference), 
		PartOf : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		Category : list(CodeableConcept), 
		Focus : list(CodeableConcept), 
		Contact : list(ContactDetail), 
		RelatedArtifact : list(RelatedArtifact), 
		Keyword : list(CodeableConcept), 
		Jurisdiction : list(CodeableConcept), 
		Description : Markdown, 
		Enrollment : list(ResourceReference), 
		Period : Period, 
		Sponsor : ResourceReference, 
		PrincipalInvestigator : ResourceReference, 
		Site : list(ResourceReference), 
		ReasonStopped : CodeableConcept, 
		Note : list(Annotation), 
		Arm : list(ResearchStudy.ArmComponent)
	}
};
create type ResearchSubject from class "Hl7.Fhir.Model.ResearchSubject" is { DomainResource };
alter type ResearchSubject
{
	create representation ResearchSubject
	{
		Identifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		Period : Period, 
		Study : ResourceReference, 
		Individual : ResourceReference, 
		AssignedArmElement : FHIRString, 
		AssignedArm : String, 
		ActualArmElement : FHIRString, 
		ActualArm : String, 
		Consent : ResourceReference
	}
};
create type RiskAssessment from class "Hl7.Fhir.Model.RiskAssessment" is { DomainResource };
create type RiskAssessment.PredictionComponent from class "Hl7.Fhir.Model.RiskAssessment+PredictionComponent" is { BackboneElement };
alter type RiskAssessment.PredictionComponent
{
	create representation RiskAssessment.PredictionComponent
	{
		Outcome : CodeableConcept, 
		Probability : Element, 
		QualitativeRisk : CodeableConcept, 
		RelativeRiskElement : FHIRDecimal, 
		RelativeRisk : Decimal, 
		When : Element, 
		RationaleElement : FHIRString, 
		Rationale : String
	}
};
alter type RiskAssessment
{
	create representation RiskAssessment
	{
		Identifier : Identifier, 
		BasedOn : ResourceReference, 
		Parent : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		Method : CodeableConcept, 
		Code : CodeableConcept, 
		Subject : ResourceReference, 
		Context : ResourceReference, 
		Occurrence : Element, 
		Condition : ResourceReference, 
		Performer : ResourceReference, 
		Reason : Element, 
		Basis : list(ResourceReference), 
		Prediction : list(RiskAssessment.PredictionComponent), 
		MitigationElement : FHIRString, 
		Mitigation : String, 
		CommentElement : FHIRString, 
		Comment : String
	}
};
create type SampledData from class "Hl7.Fhir.Model.SampledData" is { Element };
alter type SampledData
{
	create representation SampledData
	{
		Origin : Quantity, 
		PeriodElement : FHIRDecimal, 
		Period : Decimal, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		LowerLimitElement : FHIRDecimal, 
		LowerLimit : Decimal, 
		UpperLimitElement : FHIRDecimal, 
		UpperLimit : Decimal, 
		DimensionsElement : PositiveInt, 
		Dimensions : Integer, 
		DataElement : FHIRString, 
		Data : String
	}
};
create type Schedule from class "Hl7.Fhir.Model.Schedule" is { DomainResource };
alter type Schedule
{
	create representation Schedule
	{
		Identifier : list(Identifier), 
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		ServiceCategory : CodeableConcept, 
		ServiceType : list(CodeableConcept), 
		Specialty : list(CodeableConcept), 
		Actor : list(ResourceReference), 
		PlanningHorizon : Period, 
		CommentElement : FHIRString, 
		Comment : String
	}
};
create type SearchParameter from class "Hl7.Fhir.Model.SearchParameter" is { DomainResource };
create type SearchParameter.ComponentComponent from class "Hl7.Fhir.Model.SearchParameter+ComponentComponent" is { BackboneElement };
alter type SearchParameter.ComponentComponent
{
	create representation SearchParameter.ComponentComponent
	{
		Definition : ResourceReference, 
		ExpressionElement : FHIRString, 
		Expression : String
	}
};
alter type SearchParameter
{
	create representation SearchParameter
	{
		UrlElement : FHIRUri, 
		Url : String, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Purpose : Markdown, 
		CodeElement : Code, 
		Code : String, 
		BaseElement : list(Code), 
		Base : list(String), 
		TypeElement : Code, 
		Type : String, 
		DerivedFromElement : FHIRUri, 
		DerivedFrom : String, 
		Description : Markdown, 
		ExpressionElement : FHIRString, 
		Expression : String, 
		XpathElement : FHIRString, 
		Xpath : String, 
		XpathUsageElement : Code, 
		XpathUsage : String, 
		TargetElement : list(Code), 
		Target : list(String), 
		ComparatorElement : list(Code), 
		Comparator : list(String), 
		ModifierElement : list(Code), 
		Modifier : list(String), 
		ChainElement : list(FHIRString), 
		Chain : list(String), 
		Component : list(SearchParameter.ComponentComponent)
	}
};
create type Sequence from class "Hl7.Fhir.Model.Sequence" is { DomainResource };
create type Sequence.ReferenceSeqComponent from class "Hl7.Fhir.Model.Sequence+ReferenceSeqComponent" is { BackboneElement };
alter type Sequence.ReferenceSeqComponent
{
	create representation Sequence.ReferenceSeqComponent
	{
		Chromosome : CodeableConcept, 
		GenomeBuildElement : FHIRString, 
		GenomeBuild : String, 
		ReferenceSeqId : CodeableConcept, 
		ReferenceSeqPointer : ResourceReference, 
		ReferenceSeqStringElement : FHIRString, 
		ReferenceSeqString : String, 
		StrandElement : FHIRInteger, 
		Strand : Integer, 
		WindowStartElement : FHIRInteger, 
		WindowStart : Integer, 
		WindowEndElement : FHIRInteger, 
		WindowEnd : Integer
	}
};
create type Sequence.VariantComponent from class "Hl7.Fhir.Model.Sequence+VariantComponent" is { BackboneElement };
alter type Sequence.VariantComponent
{
	create representation Sequence.VariantComponent
	{
		StartElement : FHIRInteger, 
		Start : Integer, 
		EndElement : FHIRInteger, 
		End : Integer, 
		ObservedAlleleElement : FHIRString, 
		ObservedAllele : String, 
		ReferenceAlleleElement : FHIRString, 
		ReferenceAllele : String, 
		CigarElement : FHIRString, 
		Cigar : String, 
		VariantPointer : ResourceReference
	}
};
create type Sequence.QualityComponent from class "Hl7.Fhir.Model.Sequence+QualityComponent" is { BackboneElement };
alter type Sequence.QualityComponent
{
	create representation Sequence.QualityComponent
	{
		TypeElement : Code, 
		Type : String, 
		StandardSequence : CodeableConcept, 
		StartElement : FHIRInteger, 
		Start : Integer, 
		EndElement : FHIRInteger, 
		End : Integer, 
		Score : Quantity, 
		Method : CodeableConcept, 
		TruthTPElement : FHIRDecimal, 
		TruthTP : Decimal, 
		QueryTPElement : FHIRDecimal, 
		QueryTP : Decimal, 
		TruthFNElement : FHIRDecimal, 
		TruthFN : Decimal, 
		QueryFPElement : FHIRDecimal, 
		QueryFP : Decimal, 
		GtFPElement : FHIRDecimal, 
		GtFP : Decimal, 
		PrecisionElement : FHIRDecimal, 
		Precision : Decimal, 
		RecallElement : FHIRDecimal, 
		Recall : Decimal, 
		FScoreElement : FHIRDecimal, 
		FScore : Decimal
	}
};
create type Sequence.RepositoryComponent from class "Hl7.Fhir.Model.Sequence+RepositoryComponent" is { BackboneElement };
alter type Sequence.RepositoryComponent
{
	create representation Sequence.RepositoryComponent
	{
		TypeElement : Code, 
		Type : String, 
		UrlElement : FHIRUri, 
		Url : String, 
		NameElement : FHIRString, 
		Name : String, 
		DatasetIdElement : FHIRString, 
		DatasetId : String, 
		VariantsetIdElement : FHIRString, 
		VariantsetId : String, 
		ReadsetIdElement : FHIRString, 
		ReadsetId : String
	}
};
alter type Sequence
{
	create representation Sequence
	{
		Identifier : list(Identifier), 
		TypeElement : Code, 
		Type : String, 
		CoordinateSystemElement : FHIRInteger, 
		CoordinateSystem : Integer, 
		Patient : ResourceReference, 
		Specimen : ResourceReference, 
		Device : ResourceReference, 
		Performer : ResourceReference, 
		Quantity : Quantity, 
		ReferenceSeq : Sequence.ReferenceSeqComponent, 
		Variant : list(Sequence.VariantComponent), 
		ObservedSeqElement : FHIRString, 
		ObservedSeq : String, 
		Quality : list(Sequence.QualityComponent), 
		ReadCoverageElement : FHIRInteger, 
		ReadCoverage : Integer, 
		Repository : list(Sequence.RepositoryComponent), 
		Pointer : list(ResourceReference)
	}
};
create type ServiceDefinition from class "Hl7.Fhir.Model.ServiceDefinition" is { DomainResource };
alter type ServiceDefinition
{
	create representation ServiceDefinition
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Description : Markdown, 
		Purpose : Markdown, 
		UsageElement : FHIRString, 
		Usage : String, 
		ApprovalDateElement : FHIRDate, 
		ApprovalDate : String, 
		LastReviewDateElement : FHIRDate, 
		LastReviewDate : String, 
		EffectivePeriod : Period, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Topic : list(CodeableConcept), 
		Contributor : list(Contributor), 
		Contact : list(ContactDetail), 
		Copyright : Markdown, 
		RelatedArtifact : list(RelatedArtifact), 
		Trigger : list(TriggerDefinition), 
		DataRequirement : list(DataRequirement), 
		OperationDefinition : ResourceReference
	}
};
create type Slot from class "Hl7.Fhir.Model.Slot" is { DomainResource };
alter type Slot
{
	create representation Slot
	{
		Identifier : list(Identifier), 
		ServiceCategory : CodeableConcept, 
		ServiceType : list(CodeableConcept), 
		Specialty : list(CodeableConcept), 
		AppointmentType : CodeableConcept, 
		Schedule : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		StartElement : Instant, 
		Start : DateTime, 
		EndElement : Instant, 
		End : DateTime, 
		OverbookedElement : FHIRBoolean, 
		Overbooked : Boolean, 
		CommentElement : FHIRString, 
		Comment : String
	}
};
create type Specimen from class "Hl7.Fhir.Model.Specimen" is { DomainResource };
create type Specimen.CollectionComponent from class "Hl7.Fhir.Model.Specimen+CollectionComponent" is { BackboneElement };
alter type Specimen.CollectionComponent
{
	create representation Specimen.CollectionComponent
	{
		Collector : ResourceReference, 
		Collected : Element, 
		Quantity : SimpleQuantity, 
		Method : CodeableConcept, 
		BodySite : CodeableConcept
	}
};
create type Specimen.ProcessingComponent from class "Hl7.Fhir.Model.Specimen+ProcessingComponent" is { BackboneElement };
alter type Specimen.ProcessingComponent
{
	create representation Specimen.ProcessingComponent
	{
		DescriptionElement : FHIRString, 
		Description : String, 
		Procedure : CodeableConcept, 
		Additive : list(ResourceReference), 
		Time : Element
	}
};
create type Specimen.ContainerComponent from class "Hl7.Fhir.Model.Specimen+ContainerComponent" is { BackboneElement };
alter type Specimen.ContainerComponent
{
	create representation Specimen.ContainerComponent
	{
		Identifier : list(Identifier), 
		DescriptionElement : FHIRString, 
		Description : String, 
		Type : CodeableConcept, 
		Capacity : SimpleQuantity, 
		SpecimenQuantity : SimpleQuantity, 
		Additive : Element
	}
};
alter type Specimen
{
	create representation Specimen
	{
		Identifier : list(Identifier), 
		AccessionIdentifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		Type : CodeableConcept, 
		Subject : ResourceReference, 
		ReceivedTimeElement : FHIRDateTime, 
		ReceivedTime : String, 
		Parent : list(ResourceReference), 
		Request : list(ResourceReference), 
		Collection : Specimen.CollectionComponent, 
		Processing : list(Specimen.ProcessingComponent), 
		Container : list(Specimen.ContainerComponent), 
		Note : list(Annotation)
	}
};
create type StructureMap from class "Hl7.Fhir.Model.StructureMap" is { DomainResource };
create type StructureMap.StructureComponent from class "Hl7.Fhir.Model.StructureMap+StructureComponent" is { BackboneElement };
alter type StructureMap.StructureComponent
{
	create representation StructureMap.StructureComponent
	{
		UrlElement : FHIRUri, 
		Url : String, 
		ModeElement : Code, 
		Mode : String, 
		AliasElement : FHIRString, 
		Alias : String, 
		DocumentationElement : FHIRString, 
		Documentation : String
	}
};
create type StructureMap.GroupComponent from class "Hl7.Fhir.Model.StructureMap+GroupComponent" is { BackboneElement };
create type StructureMap.InputComponent from class "Hl7.Fhir.Model.StructureMap+InputComponent" is { BackboneElement };
alter type StructureMap.InputComponent
{
	create representation StructureMap.InputComponent
	{
		NameElement : Id, 
		Name : String, 
		TypeElement : FHIRString, 
		Type : String, 
		ModeElement : Code, 
		Mode : String, 
		DocumentationElement : FHIRString, 
		Documentation : String
	}
};
create type StructureMap.RuleComponent from class "Hl7.Fhir.Model.StructureMap+RuleComponent" is { BackboneElement };
create type StructureMap.SourceComponent from class "Hl7.Fhir.Model.StructureMap+SourceComponent" is { BackboneElement };
alter type StructureMap.SourceComponent
{
	create representation StructureMap.SourceComponent
	{
		ContextElement : Id, 
		Context : String, 
		MinElement : FHIRInteger, 
		Min : Integer, 
		MaxElement : FHIRString, 
		Max : String, 
		TypeElement : FHIRString, 
		Type : String, 
		DefaultValue : Element, 
		ElementElement : FHIRString, 
		Element : String, 
		ListModeElement : Code, 
		ListMode : String, 
		VariableElement : Id, 
		Variable : String, 
		ConditionElement : FHIRString, 
		Condition : String, 
		CheckElement : FHIRString, 
		Check : String
	}
};
create type StructureMap.TargetComponent from class "Hl7.Fhir.Model.StructureMap+TargetComponent" is { BackboneElement };
create type StructureMap.ParameterComponent from class "Hl7.Fhir.Model.StructureMap+ParameterComponent" is { BackboneElement };
alter type StructureMap.ParameterComponent
{
	create representation StructureMap.ParameterComponent
	{
		Value : Element
	}
};
alter type StructureMap.TargetComponent
{
	create representation StructureMap.TargetComponent
	{
		ContextElement : Id, 
		Context : String, 
		ContextTypeElement : Code, 
		ContextType : String, 
		ElementElement : FHIRString, 
		Element : String, 
		VariableElement : Id, 
		Variable : String, 
		ListModeElement : list(Code), 
		ListMode : list(String), 
		ListRuleIdElement : Id, 
		ListRuleId : String, 
		TransformElement : Code, 
		Transform : String, 
		Parameter : list(StructureMap.ParameterComponent)
	}
};
create type StructureMap.DependentComponent from class "Hl7.Fhir.Model.StructureMap+DependentComponent" is { BackboneElement };
alter type StructureMap.DependentComponent
{
	create representation StructureMap.DependentComponent
	{
		NameElement : Id, 
		Name : String, 
		VariableElement : list(FHIRString), 
		Variable : list(String)
	}
};
alter type StructureMap.RuleComponent
{
	create representation StructureMap.RuleComponent
	{
		NameElement : Id, 
		Name : String, 
		Source : list(StructureMap.SourceComponent), 
		Target : list(StructureMap.TargetComponent), 
		Rule : list(StructureMap.RuleComponent), 
		Dependent : list(StructureMap.DependentComponent), 
		DocumentationElement : FHIRString, 
		Documentation : String
	}
};
alter type StructureMap.GroupComponent
{
	create representation StructureMap.GroupComponent
	{
		NameElement : Id, 
		Name : String, 
		ExtendsElement : Id, 
		Extends : String, 
		TypeModeElement : Code, 
		TypeMode : String, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		Input : list(StructureMap.InputComponent), 
		Rule : list(StructureMap.RuleComponent)
	}
};
alter type StructureMap
{
	create representation StructureMap
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Purpose : Markdown, 
		Copyright : Markdown, 
		Structure : list(StructureMap.StructureComponent), 
		ImportElement : list(FHIRUri), 
		Import : list(String), 
		Group : list(StructureMap.GroupComponent)
	}
};
create type Subscription from class "Hl7.Fhir.Model.Subscription" is { DomainResource };
create type Subscription.ChannelComponent from class "Hl7.Fhir.Model.Subscription+ChannelComponent" is { BackboneElement };
alter type Subscription.ChannelComponent
{
	create representation Subscription.ChannelComponent
	{
		TypeElement : Code, 
		Type : String, 
		EndpointElement : FHIRUri, 
		Endpoint : String, 
		PayloadElement : FHIRString, 
		Payload : String, 
		HeaderElement : list(FHIRString), 
		Header : list(String)
	}
};
alter type Subscription
{
	create representation Subscription
	{
		StatusElement : Code, 
		Status : String, 
		Contact : list(ContactPoint), 
		EndElement : Instant, 
		End : DateTime, 
		ReasonElement : FHIRString, 
		Reason : String, 
		CriteriaElement : FHIRString, 
		Criteria : String, 
		ErrorElement : FHIRString, 
		Error : String, 
		Channel : Subscription.ChannelComponent, 
		Tag : list(Coding)
	}
};
create type Substance from class "Hl7.Fhir.Model.Substance" is { DomainResource };
create type Substance.InstanceComponent from class "Hl7.Fhir.Model.Substance+InstanceComponent" is { BackboneElement };
alter type Substance.InstanceComponent
{
	create representation Substance.InstanceComponent
	{
		Identifier : Identifier, 
		ExpiryElement : FHIRDateTime, 
		Expiry : String, 
		Quantity : SimpleQuantity
	}
};
create type Substance.IngredientComponent from class "Hl7.Fhir.Model.Substance+IngredientComponent" is { BackboneElement };
alter type Substance.IngredientComponent
{
	create representation Substance.IngredientComponent
	{
		Quantity : Ratio, 
		Substance : Element
	}
};
alter type Substance
{
	create representation Substance
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Category : list(CodeableConcept), 
		Code : CodeableConcept, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Instance : list(Substance.InstanceComponent), 
		Ingredient : list(Substance.IngredientComponent)
	}
};
create type SupplyDelivery from class "Hl7.Fhir.Model.SupplyDelivery" is { DomainResource };
create type SupplyDelivery.SuppliedItemComponent from class "Hl7.Fhir.Model.SupplyDelivery+SuppliedItemComponent" is { BackboneElement };
alter type SupplyDelivery.SuppliedItemComponent
{
	create representation SupplyDelivery.SuppliedItemComponent
	{
		Quantity : SimpleQuantity, 
		Item : Element
	}
};
alter type SupplyDelivery
{
	create representation SupplyDelivery
	{
		Identifier : Identifier, 
		BasedOn : list(ResourceReference), 
		PartOf : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		Patient : ResourceReference, 
		Type : CodeableConcept, 
		SuppliedItem : SupplyDelivery.SuppliedItemComponent, 
		Occurrence : Element, 
		Supplier : ResourceReference, 
		Destination : ResourceReference, 
		Receiver : list(ResourceReference)
	}
};
create type SupplyRequest from class "Hl7.Fhir.Model.SupplyRequest" is { DomainResource };
create type SupplyRequest.OrderedItemComponent from class "Hl7.Fhir.Model.SupplyRequest+OrderedItemComponent" is { BackboneElement };
alter type SupplyRequest.OrderedItemComponent
{
	create representation SupplyRequest.OrderedItemComponent
	{
		Quantity : Quantity, 
		Item : Element
	}
};
create type SupplyRequest.RequesterComponent from class "Hl7.Fhir.Model.SupplyRequest+RequesterComponent" is { BackboneElement };
alter type SupplyRequest.RequesterComponent
{
	create representation SupplyRequest.RequesterComponent
	{
		Agent : ResourceReference, 
		OnBehalfOf : ResourceReference
	}
};
alter type SupplyRequest
{
	create representation SupplyRequest
	{
		Identifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		Category : CodeableConcept, 
		PriorityElement : Code, 
		Priority : String, 
		OrderedItem : SupplyRequest.OrderedItemComponent, 
		Occurrence : Element, 
		AuthoredOnElement : FHIRDateTime, 
		AuthoredOn : String, 
		Requester : SupplyRequest.RequesterComponent, 
		Supplier : list(ResourceReference), 
		Reason : Element, 
		DeliverFrom : ResourceReference, 
		DeliverTo : ResourceReference
	}
};
create type Task from class "Hl7.Fhir.Model.Task" is { DomainResource };
create type Task.RequesterComponent from class "Hl7.Fhir.Model.Task+RequesterComponent" is { BackboneElement };
alter type Task.RequesterComponent
{
	create representation Task.RequesterComponent
	{
		Agent : ResourceReference, 
		OnBehalfOf : ResourceReference
	}
};
create type Task.RestrictionComponent from class "Hl7.Fhir.Model.Task+RestrictionComponent" is { BackboneElement };
alter type Task.RestrictionComponent
{
	create representation Task.RestrictionComponent
	{
		RepetitionsElement : PositiveInt, 
		Repetitions : Integer, 
		Period : Period, 
		Recipient : list(ResourceReference)
	}
};
create type Task.ParameterComponent from class "Hl7.Fhir.Model.Task+ParameterComponent" is { BackboneElement };
alter type Task.ParameterComponent
{
	create representation Task.ParameterComponent
	{
		Type : CodeableConcept, 
		Value : Element
	}
};
create type Task.OutputComponent from class "Hl7.Fhir.Model.Task+OutputComponent" is { BackboneElement };
alter type Task.OutputComponent
{
	create representation Task.OutputComponent
	{
		Type : CodeableConcept, 
		Value : Element
	}
};
alter type Task
{
	create representation Task
	{
		Identifier : list(Identifier), 
		Definition : Element, 
		BasedOn : list(ResourceReference), 
		GroupIdentifier : Identifier, 
		PartOf : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		StatusReason : CodeableConcept, 
		BusinessStatus : CodeableConcept, 
		IntentElement : Code, 
		Intent : String, 
		PriorityElement : Code, 
		Priority : String, 
		Code : CodeableConcept, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Focus : ResourceReference, 
		For : ResourceReference, 
		Context : ResourceReference, 
		ExecutionPeriod : Period, 
		AuthoredOnElement : FHIRDateTime, 
		AuthoredOn : String, 
		LastModifiedElement : FHIRDateTime, 
		LastModified : String, 
		Requester : Task.RequesterComponent, 
		PerformerType : list(CodeableConcept), 
		Owner : ResourceReference, 
		Reason : CodeableConcept, 
		Note : list(Annotation), 
		RelevantHistory : list(ResourceReference), 
		Restriction : Task.RestrictionComponent, 
		Input : list(Task.ParameterComponent), 
		Output : list(Task.OutputComponent)
	}
};
create type TestReport from class "Hl7.Fhir.Model.TestReport" is { DomainResource };
create type TestReport.ParticipantComponent from class "Hl7.Fhir.Model.TestReport+ParticipantComponent" is { BackboneElement };
alter type TestReport.ParticipantComponent
{
	create representation TestReport.ParticipantComponent
	{
		TypeElement : Code, 
		Type : String, 
		UriElement : FHIRUri, 
		Uri : String, 
		DisplayElement : FHIRString, 
		Display : String
	}
};
create type TestReport.SetupComponent from class "Hl7.Fhir.Model.TestReport+SetupComponent" is { BackboneElement };
create type TestReport.SetupActionComponent from class "Hl7.Fhir.Model.TestReport+SetupActionComponent" is { BackboneElement };
create type TestReport.OperationComponent from class "Hl7.Fhir.Model.TestReport+OperationComponent" is { BackboneElement };
alter type TestReport.OperationComponent
{
	create representation TestReport.OperationComponent
	{
		ResultElement : Code, 
		Result : String, 
		Message : Markdown, 
		DetailElement : FHIRUri, 
		Detail : String
	}
};
create type TestReport.AssertComponent from class "Hl7.Fhir.Model.TestReport+AssertComponent" is { BackboneElement };
alter type TestReport.AssertComponent
{
	create representation TestReport.AssertComponent
	{
		ResultElement : Code, 
		Result : String, 
		Message : Markdown, 
		DetailElement : FHIRString, 
		Detail : String
	}
};
alter type TestReport.SetupActionComponent
{
	create representation TestReport.SetupActionComponent
	{
		Operation : TestReport.OperationComponent, 
		Assert : TestReport.AssertComponent
	}
};
alter type TestReport.SetupComponent
{
	create representation TestReport.SetupComponent
	{
		Action : list(TestReport.SetupActionComponent)
	}
};
create type TestReport.TestComponent from class "Hl7.Fhir.Model.TestReport+TestComponent" is { BackboneElement };
create type TestReport.TestActionComponent from class "Hl7.Fhir.Model.TestReport+TestActionComponent" is { BackboneElement };
alter type TestReport.TestActionComponent
{
	create representation TestReport.TestActionComponent
	{
		Operation : TestReport.OperationComponent, 
		Assert : TestReport.AssertComponent
	}
};
alter type TestReport.TestComponent
{
	create representation TestReport.TestComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Action : list(TestReport.TestActionComponent)
	}
};
create type TestReport.TeardownComponent from class "Hl7.Fhir.Model.TestReport+TeardownComponent" is { BackboneElement };
create type TestReport.TeardownActionComponent from class "Hl7.Fhir.Model.TestReport+TeardownActionComponent" is { BackboneElement };
alter type TestReport.TeardownActionComponent
{
	create representation TestReport.TeardownActionComponent
	{
		Operation : TestReport.OperationComponent
	}
};
alter type TestReport.TeardownComponent
{
	create representation TestReport.TeardownComponent
	{
		Action : list(TestReport.TeardownActionComponent)
	}
};
alter type TestReport
{
	create representation TestReport
	{
		Identifier : Identifier, 
		NameElement : FHIRString, 
		Name : String, 
		StatusElement : Code, 
		Status : String, 
		TestScript : ResourceReference, 
		ResultElement : Code, 
		Result : String, 
		ScoreElement : FHIRDecimal, 
		Score : Decimal, 
		TesterElement : FHIRString, 
		Tester : String, 
		IssuedElement : FHIRDateTime, 
		Issued : String, 
		Participant : list(TestReport.ParticipantComponent), 
		Setup : TestReport.SetupComponent, 
		Test : list(TestReport.TestComponent), 
		Teardown : TestReport.TeardownComponent
	}
};
create type TestScript from class "Hl7.Fhir.Model.TestScript" is { DomainResource };
create type TestScript.OriginComponent from class "Hl7.Fhir.Model.TestScript+OriginComponent" is { BackboneElement };
alter type TestScript.OriginComponent
{
	create representation TestScript.OriginComponent
	{
		IndexElement : FHIRInteger, 
		Index : Integer, 
		Profile : Coding
	}
};
create type TestScript.DestinationComponent from class "Hl7.Fhir.Model.TestScript+DestinationComponent" is { BackboneElement };
alter type TestScript.DestinationComponent
{
	create representation TestScript.DestinationComponent
	{
		IndexElement : FHIRInteger, 
		Index : Integer, 
		Profile : Coding
	}
};
create type TestScript.MetadataComponent from class "Hl7.Fhir.Model.TestScript+MetadataComponent" is { BackboneElement };
create type TestScript.LinkComponent from class "Hl7.Fhir.Model.TestScript+LinkComponent" is { BackboneElement };
alter type TestScript.LinkComponent
{
	create representation TestScript.LinkComponent
	{
		UrlElement : FHIRUri, 
		Url : String, 
		DescriptionElement : FHIRString, 
		Description : String
	}
};
create type TestScript.CapabilityComponent from class "Hl7.Fhir.Model.TestScript+CapabilityComponent" is { BackboneElement };
alter type TestScript.CapabilityComponent
{
	create representation TestScript.CapabilityComponent
	{
		RequiredElement : FHIRBoolean, 
		Required : Boolean, 
		ValidatedElement : FHIRBoolean, 
		Validated : Boolean, 
		DescriptionElement : FHIRString, 
		Description : String, 
		OriginElement : list(FHIRInteger), 
		Origin : list(Integer), 
		DestinationElement : FHIRInteger, 
		Destination : Integer, 
		LinkElement : list(FHIRUri), 
		Link : list(String), 
		Capabilities : ResourceReference
	}
};
alter type TestScript.MetadataComponent
{
	create representation TestScript.MetadataComponent
	{
		Link : list(TestScript.LinkComponent), 
		Capability : list(TestScript.CapabilityComponent)
	}
};
create type TestScript.FixtureComponent from class "Hl7.Fhir.Model.TestScript+FixtureComponent" is { BackboneElement };
alter type TestScript.FixtureComponent
{
	create representation TestScript.FixtureComponent
	{
		AutocreateElement : FHIRBoolean, 
		Autocreate : Boolean, 
		AutodeleteElement : FHIRBoolean, 
		Autodelete : Boolean, 
		Resource : ResourceReference
	}
};
create type TestScript.VariableComponent from class "Hl7.Fhir.Model.TestScript+VariableComponent" is { BackboneElement };
alter type TestScript.VariableComponent
{
	create representation TestScript.VariableComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		DefaultValueElement : FHIRString, 
		DefaultValue : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		ExpressionElement : FHIRString, 
		Expression : String, 
		HeaderFieldElement : FHIRString, 
		HeaderField : String, 
		HintElement : FHIRString, 
		Hint : String, 
		PathElement : FHIRString, 
		Path : String, 
		SourceIdElement : Id, 
		SourceId : String
	}
};
create type TestScript.RuleComponent from class "Hl7.Fhir.Model.TestScript+RuleComponent" is { BackboneElement };
create type TestScript.RuleParamComponent from class "Hl7.Fhir.Model.TestScript+RuleParamComponent" is { BackboneElement };
alter type TestScript.RuleParamComponent
{
	create representation TestScript.RuleParamComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		ValueElement : FHIRString, 
		Value : String
	}
};
alter type TestScript.RuleComponent
{
	create representation TestScript.RuleComponent
	{
		Resource : ResourceReference, 
		Param : list(TestScript.RuleParamComponent)
	}
};
create type TestScript.RulesetComponent from class "Hl7.Fhir.Model.TestScript+RulesetComponent" is { BackboneElement };
create type TestScript.RulesetRuleComponent from class "Hl7.Fhir.Model.TestScript+RulesetRuleComponent" is { BackboneElement };
create type TestScript.RulesetRuleParamComponent from class "Hl7.Fhir.Model.TestScript+RulesetRuleParamComponent" is { BackboneElement };
alter type TestScript.RulesetRuleParamComponent
{
	create representation TestScript.RulesetRuleParamComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		ValueElement : FHIRString, 
		Value : String
	}
};
alter type TestScript.RulesetRuleComponent
{
	create representation TestScript.RulesetRuleComponent
	{
		RuleIdElement : Id, 
		RuleId : String, 
		Param : list(TestScript.RulesetRuleParamComponent)
	}
};
alter type TestScript.RulesetComponent
{
	create representation TestScript.RulesetComponent
	{
		Resource : ResourceReference, 
		Rule : list(TestScript.RulesetRuleComponent)
	}
};
create type TestScript.SetupComponent from class "Hl7.Fhir.Model.TestScript+SetupComponent" is { BackboneElement };
create type TestScript.SetupActionComponent from class "Hl7.Fhir.Model.TestScript+SetupActionComponent" is { BackboneElement };
create type TestScript.OperationComponent from class "Hl7.Fhir.Model.TestScript+OperationComponent" is { BackboneElement };
create type TestScript.RequestHeaderComponent from class "Hl7.Fhir.Model.TestScript+RequestHeaderComponent" is { BackboneElement };
alter type TestScript.RequestHeaderComponent
{
	create representation TestScript.RequestHeaderComponent
	{
		FieldElement : FHIRString, 
		Field : String, 
		ValueElement : FHIRString, 
		Value : String
	}
};
alter type TestScript.OperationComponent
{
	create representation TestScript.OperationComponent
	{
		Type : Coding, 
		ResourceElement : Code, 
		Resource : String, 
		LabelElement : FHIRString, 
		Label : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		AcceptElement : Code, 
		Accept : String, 
		ContentType_Element : Code, 
		ContentType_ : String, 
		DestinationElement : FHIRInteger, 
		Destination : Integer, 
		EncodeRequestUrlElement : FHIRBoolean, 
		EncodeRequestUrl : Boolean, 
		OriginElement : FHIRInteger, 
		Origin : Integer, 
		ParamsElement : FHIRString, 
		Params : String, 
		RequestHeader : list(TestScript.RequestHeaderComponent), 
		RequestIdElement : Id, 
		RequestId : String, 
		ResponseIdElement : Id, 
		ResponseId : String, 
		SourceIdElement : Id, 
		SourceId : String, 
		TargetIdElement : Id, 
		TargetId : String, 
		UrlElement : FHIRString, 
		Url : String
	}
};
create type TestScript.AssertComponent from class "Hl7.Fhir.Model.TestScript+AssertComponent" is { BackboneElement };
create type TestScript.ActionAssertRuleComponent from class "Hl7.Fhir.Model.TestScript+ActionAssertRuleComponent" is { BackboneElement };
create type TestScript.ActionAssertRuleParamComponent from class "Hl7.Fhir.Model.TestScript+ActionAssertRuleParamComponent" is { BackboneElement };
alter type TestScript.ActionAssertRuleParamComponent
{
	create representation TestScript.ActionAssertRuleParamComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		ValueElement : FHIRString, 
		Value : String
	}
};
alter type TestScript.ActionAssertRuleComponent
{
	create representation TestScript.ActionAssertRuleComponent
	{
		RuleIdElement : Id, 
		RuleId : String, 
		Param : list(TestScript.ActionAssertRuleParamComponent)
	}
};
create type TestScript.ActionAssertRulesetComponent from class "Hl7.Fhir.Model.TestScript+ActionAssertRulesetComponent" is { BackboneElement };
create type TestScript.ActionAssertRulesetRuleComponent from class "Hl7.Fhir.Model.TestScript+ActionAssertRulesetRuleComponent" is { BackboneElement };
create type TestScript.ParamComponent from class "Hl7.Fhir.Model.TestScript+ParamComponent" is { BackboneElement };
alter type TestScript.ParamComponent
{
	create representation TestScript.ParamComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		ValueElement : FHIRString, 
		Value : String
	}
};
alter type TestScript.ActionAssertRulesetRuleComponent
{
	create representation TestScript.ActionAssertRulesetRuleComponent
	{
		RuleIdElement : Id, 
		RuleId : String, 
		Param : list(TestScript.ParamComponent)
	}
};
alter type TestScript.ActionAssertRulesetComponent
{
	create representation TestScript.ActionAssertRulesetComponent
	{
		RulesetIdElement : Id, 
		RulesetId : String, 
		Rule : list(TestScript.ActionAssertRulesetRuleComponent)
	}
};
alter type TestScript.AssertComponent
{
	create representation TestScript.AssertComponent
	{
		LabelElement : FHIRString, 
		Label : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		DirectionElement : Code, 
		Direction : String, 
		CompareToSourceIdElement : FHIRString, 
		CompareToSourceId : String, 
		CompareToSourceExpressionElement : FHIRString, 
		CompareToSourceExpression : String, 
		CompareToSourcePathElement : FHIRString, 
		CompareToSourcePath : String, 
		ContentType_Element : Code, 
		ContentType_ : String, 
		ExpressionElement : FHIRString, 
		Expression : String, 
		HeaderFieldElement : FHIRString, 
		HeaderField : String, 
		MinimumIdElement : FHIRString, 
		MinimumId : String, 
		NavigationLinksElement : FHIRBoolean, 
		NavigationLinks : Boolean, 
		OperatorElement : Code, 
		Operator : String, 
		PathElement : FHIRString, 
		Path : String, 
		RequestMethodElement : Code, 
		RequestMethod : String, 
		RequestURLElement : FHIRString, 
		RequestURL : String, 
		ResourceElement : Code, 
		Resource : String, 
		ResponseElement : Code, 
		Response : String, 
		ResponseCodeElement : FHIRString, 
		ResponseCode : String, 
		Rule : TestScript.ActionAssertRuleComponent, 
		Ruleset : TestScript.ActionAssertRulesetComponent, 
		SourceIdElement : Id, 
		SourceId : String, 
		ValidateProfileIdElement : Id, 
		ValidateProfileId : String, 
		ValueElement : FHIRString, 
		Value : String, 
		WarningOnlyElement : FHIRBoolean, 
		WarningOnly : Boolean
	}
};
alter type TestScript.SetupActionComponent
{
	create representation TestScript.SetupActionComponent
	{
		Operation : TestScript.OperationComponent, 
		Assert : TestScript.AssertComponent
	}
};
alter type TestScript.SetupComponent
{
	create representation TestScript.SetupComponent
	{
		Action : list(TestScript.SetupActionComponent)
	}
};
create type TestScript.TestComponent from class "Hl7.Fhir.Model.TestScript+TestComponent" is { BackboneElement };
create type TestScript.TestActionComponent from class "Hl7.Fhir.Model.TestScript+TestActionComponent" is { BackboneElement };
alter type TestScript.TestActionComponent
{
	create representation TestScript.TestActionComponent
	{
		Operation : TestScript.OperationComponent, 
		Assert : TestScript.AssertComponent
	}
};
alter type TestScript.TestComponent
{
	create representation TestScript.TestComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Action : list(TestScript.TestActionComponent)
	}
};
create type TestScript.TeardownComponent from class "Hl7.Fhir.Model.TestScript+TeardownComponent" is { BackboneElement };
create type TestScript.TeardownActionComponent from class "Hl7.Fhir.Model.TestScript+TeardownActionComponent" is { BackboneElement };
alter type TestScript.TeardownActionComponent
{
	create representation TestScript.TeardownActionComponent
	{
		Operation : TestScript.OperationComponent
	}
};
alter type TestScript.TeardownComponent
{
	create representation TestScript.TeardownComponent
	{
		Action : list(TestScript.TeardownActionComponent)
	}
};
alter type TestScript
{
	create representation TestScript
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : Identifier, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		Purpose : Markdown, 
		Copyright : Markdown, 
		Origin : list(TestScript.OriginComponent), 
		Destination : list(TestScript.DestinationComponent), 
		Metadata : TestScript.MetadataComponent, 
		Fixture : list(TestScript.FixtureComponent), 
		Profile : list(ResourceReference), 
		Variable : list(TestScript.VariableComponent), 
		Rule : list(TestScript.RuleComponent), 
		Ruleset : list(TestScript.RulesetComponent), 
		Setup : TestScript.SetupComponent, 
		Test : list(TestScript.TestComponent), 
		Teardown : TestScript.TeardownComponent
	}
};
create type Uuid from class "Hl7.Fhir.Model.Uuid" is { Element };
alter type Uuid
{
	create representation Uuid
	{
		Value : String
	}
};
create type ValueSet from class "Hl7.Fhir.Model.ValueSet" is { DomainResource };
create type ValueSet.ComposeComponent from class "Hl7.Fhir.Model.ValueSet+ComposeComponent" is { BackboneElement };
create type ValueSet.ConceptSetComponent from class "Hl7.Fhir.Model.ValueSet+ConceptSetComponent" is { BackboneElement };
create type ValueSet.ConceptReferenceComponent from class "Hl7.Fhir.Model.ValueSet+ConceptReferenceComponent" is { BackboneElement };
create type ValueSet.DesignationComponent from class "Hl7.Fhir.Model.ValueSet+DesignationComponent" is { BackboneElement };
alter type ValueSet.DesignationComponent
{
	create representation ValueSet.DesignationComponent
	{
		LanguageElement : Code, 
		Language : String, 
		Use : Coding, 
		ValueElement : FHIRString, 
		Value : String
	}
};
alter type ValueSet.ConceptReferenceComponent
{
	create representation ValueSet.ConceptReferenceComponent
	{
		CodeElement : Code, 
		Code : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		Designation : list(ValueSet.DesignationComponent)
	}
};
create type ValueSet.FilterComponent from class "Hl7.Fhir.Model.ValueSet+FilterComponent" is { BackboneElement };
alter type ValueSet.FilterComponent
{
	create representation ValueSet.FilterComponent
	{
		PropertyElement : Code, 
		Property : String, 
		OpElement : Code, 
		Op : String, 
		ValueElement : Code, 
		Value : String
	}
};
alter type ValueSet.ConceptSetComponent
{
	create representation ValueSet.ConceptSetComponent
	{
		SystemElement : FHIRUri, 
		System : String, 
		VersionElement : FHIRString, 
		Version : String, 
		Concept : list(ValueSet.ConceptReferenceComponent), 
		Filter : list(ValueSet.FilterComponent), 
		ValueSetElement : list(FHIRUri), 
		ValueSet : list(String)
	}
};
alter type ValueSet.ComposeComponent
{
	create representation ValueSet.ComposeComponent
	{
		LockedDateElement : FHIRDate, 
		LockedDate : String, 
		InactiveElement : FHIRBoolean, 
		Inactive : Boolean, 
		Include : list(ValueSet.ConceptSetComponent), 
		Exclude : list(ValueSet.ConceptSetComponent)
	}
};
create type ValueSet.ExpansionComponent from class "Hl7.Fhir.Model.ValueSet+ExpansionComponent" is { BackboneElement };
create type ValueSet.ParameterComponent from class "Hl7.Fhir.Model.ValueSet+ParameterComponent" is { BackboneElement };
alter type ValueSet.ParameterComponent
{
	create representation ValueSet.ParameterComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Value : Element
	}
};
create type ValueSet.ContainsComponent from class "Hl7.Fhir.Model.ValueSet+ContainsComponent" is { BackboneElement };
alter type ValueSet.ContainsComponent
{
	create representation ValueSet.ContainsComponent
	{
		SystemElement : FHIRUri, 
		System : String, 
		AbstractElement : FHIRBoolean, 
		Abstract : Boolean, 
		InactiveElement : FHIRBoolean, 
		Inactive : Boolean, 
		VersionElement : FHIRString, 
		Version : String, 
		CodeElement : Code, 
		Code : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		Designation : list(ValueSet.DesignationComponent), 
		Contains : list(ValueSet.ContainsComponent)
	}
};
alter type ValueSet.ExpansionComponent
{
	create representation ValueSet.ExpansionComponent
	{
		IdentifierElement : FHIRUri, 
		Identifier : String, 
		TimestampElement : FHIRDateTime, 
		Timestamp : String, 
		TotalElement : FHIRInteger, 
		Total : Integer, 
		OffsetElement : FHIRInteger, 
		Offset : Integer, 
		Parameter : list(ValueSet.ParameterComponent), 
		Contains : list(ValueSet.ContainsComponent)
	}
};
alter type ValueSet
{
	create representation ValueSet
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ContactDetail), 
		Description : Markdown, 
		UseContext : list(UsageContext), 
		Jurisdiction : list(CodeableConcept), 
		ImmutableElement : FHIRBoolean, 
		Immutable : Boolean, 
		Purpose : Markdown, 
		Copyright : Markdown, 
		ExtensibleElement : FHIRBoolean, 
		Extensible : Boolean, 
		Compose : ValueSet.ComposeComponent, 
		Expansion : ValueSet.ExpansionComponent, 
		Define : String
	}
};
create type VisionPrescription from class "Hl7.Fhir.Model.VisionPrescription" is { DomainResource };
create type VisionPrescription.DispenseComponent from class "Hl7.Fhir.Model.VisionPrescription+DispenseComponent" is { BackboneElement };
alter type VisionPrescription.DispenseComponent
{
	create representation VisionPrescription.DispenseComponent
	{
		Product : CodeableConcept, 
		EyeElement : Code, 
		Eye : String, 
		SphereElement : FHIRDecimal, 
		Sphere : Decimal, 
		CylinderElement : FHIRDecimal, 
		Cylinder : Decimal, 
		AxisElement : FHIRInteger, 
		Axis : Integer, 
		PrismElement : FHIRDecimal, 
		Prism : Decimal, 
		BaseElement : Code, 
		Base : String, 
		AddElement : FHIRDecimal, 
		Add : Decimal, 
		PowerElement : FHIRDecimal, 
		Power : Decimal, 
		BackCurveElement : FHIRDecimal, 
		BackCurve : Decimal, 
		DiameterElement : FHIRDecimal, 
		Diameter : Decimal, 
		Duration : SimpleQuantity, 
		ColorElement : FHIRString, 
		Color : String, 
		BrandElement : FHIRString, 
		Brand : String, 
		Note : list(Annotation)
	}
};
alter type VisionPrescription
{
	create representation VisionPrescription
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Patient : ResourceReference, 
		Encounter : ResourceReference, 
		DateWrittenElement : FHIRDateTime, 
		DateWritten : String, 
		Prescriber : ResourceReference, 
		Reason : Element, 
		Dispense : list(VisionPrescription.DispenseComponent)
	}
};
create type Xhtml from class "Hl7.Fhir.Model.Xhtml" is { Element };
alter type Xhtml
{
	create representation Xhtml
	{
		Value : String
	}
};
//create type Primitive from class "Hl7.Fhir.Model.Primitive" is { Element };
//create type Object from class "System.Object";
//alter type Primitive
//{
//	create representation Primitive
//	{
//		ObjectValue : Object
//	}
//};
