
//drop operator .FHIR.Core.Coding.iEqual(Coding, Coding);
create operator Coding.iEqual(const ALeft : Coding, const ARight : Coding) : Boolean
begin
	result := 
		(ALeft.System.IsNil() and ARight.System.IsNil() or ALeft.System = ARight.System)
			and (ALeft.Version.IsNil() and ARight.Version.IsNil() or ALeft.Version = ARight.Version)
			and (ALeft.Code.IsNil() and ARight.Code.IsNil() or ALeft.Code = ARight.Code);
end;

create operator Coding.iLess(const ALeft : Coding, const ARight : Coding) : Boolean
begin
	result := 
		ALeft.System < ARight.System
			or ALeft.Version < ARight.Version
			or ALeft.Code < ARight.Code;
end;
			

//drop operator .FHIR.Core.CodeableConcept.iEqual(CodeableConcept, CodeableConcept);
create operator CodeableConcept.iEqual(const ALeft : CodeableConcept, const ARight : CodeableConcept) : Boolean
begin
	result :=
		(ALeft.Coding.IsNil() and ARight.Coding.IsNil() or ALeft.Coding = ARight.Coding)
			and (ALeft.Text.IsNil() and ARight.Text.IsNil() or ALeft.Text = ARight.Text);
end;

create operator CodeableConcept.iLess(const ALeft : CodeableConcept, const ARight : CodeableConcept) : Boolean
begin
	result :=
		ALeft.Text < ARight.Text;
end;

create operator ResourceReference.iEqual(const ALeft : ResourceReference, const ARight : ResourceReference) : Boolean
begin
	result :=
		ALeft.Reference = ARight.Reference;
end;

create operator ResourceReference.iLess(const ALeft : ResourceReference, const ARight : ResourceReference) : Boolean
begin
	result :=
		ALeft.Reference < ARight.Reference;
end;

create operator Appointment.ParticipantComponent.iEqual(const ALeft : Appointment.ParticipantComponent, const ARight : Appointment.ParticipantComponent) : Boolean
begin
	result :=
		ALeft.Actor = ARight.Actor;
end;

create operator Appointment.ParticipantComponent.iLess(const ALeft : Appointment.ParticipantComponent, const ARight : Appointment.ParticipantComponent) : Boolean
begin
	result :=
		ALeft.Actor < ARight.Actor;
end;

create operator Appointment.iEqual(const ALeft : Appointment, const ARight : Appointment) : Boolean
begin
	result :=
		ALeft.Id = ARight.Id;
end;

create operator Appointment.iLess(const ALeft : Appointment, const ARight : Appointment) : Boolean
begin
	result :=
		ALeft.Id < ARight.Id;
end;

// Primitive selectors
create operator FHIRBoolean(Value: System.Boolean): FHIRBoolean
begin
  result := FHIRBoolean(row { Value Value });
end
	tags { DAE.IsOrderPreserving = "True" };
	
create operator FHIRBoolean.iEqual(ALeft: FHIRBoolean, ARight: FHIRBoolean) : Boolean
begin
  result := ALeft.Value = ARight.Value;
end;

create operator FHIRBoolean.iLess(ALeft: FHIRBoolean, ARight: FHIRBoolean) : Boolean
begin
  result := ALeft.Value < ARight.Value;
end;

create operator FHIRInteger(Value: System.Integer): FHIRInteger
begin
  result := FHIRInteger(row { Value Value });
end
  tags { DAE.IsOrderPreserving = "True" };
  
create operator FHIRInteger.iEqual(ALeft: FHIRInteger, ARight: FHIRInteger) : Boolean
begin
  result := ALeft.Value = ARight.Value;
end;

create operator FHIRInteger.iLess(ALeft: FHIRInteger, ARight: FHIRInteger) : Boolean
begin
  result := ALeft.Value < ARight.Value;
end;

create operator FHIRDecimal(Value: System.Decimal): FHIRDecimal
begin
  result := FHIRDecimal(row { Value Value });
end
  tags { DAE.IsOrderPreserving = "True" };

create operator FHIRDecimal.iEqual(ALeft: FHIRDecimal, ARight: FHIRDecimal) : Boolean
begin
  result := ALeft.Value = ARight.Value;
end;

create operator FHIRDecimal.iLess(ALeft: FHIRDecimal, ARight: FHIRDecimal) : Boolean
begin
  result := ALeft.Value < ARight.Value;
end;

create operator FHIRString(Value: System.String): FHIRString
begin
  result := FHIRString(row { Value Value });
end
  tags { DAE.IsOrderPreserving = "True" };

create operator FHIRString.iEqual(ALeft: FHIRString, ARight: FHIRString) : Boolean
begin
  result := ALeft.Value = ARight.Value;
end;

create operator FHIRString.iLess(ALeft: FHIRString, ARight: FHIRString) : Boolean
begin
  result := ALeft.Value < ARight.Value;
end;

create operator FHIRUri(Value: System.String): FHIRUri
begin
  result := FHIRUri(row { Value Value });
end
  tags { DAE.IsOrderPreserving = "True" };

create operator FHIRUri.iEqual(ALeft: FHIRUri, ARight: FHIRUri) : Boolean
begin
  result := ALeft.Value = ARight.Value;
end;

create operator FHIRUri.iLess(ALeft: FHIRUri, ARight: FHIRUri) : Boolean
begin
  result := ALeft.Value < ARight.Value;
end;

create operator FHIRDateTime(Value: System.DateTime): FHIRDateTime
begin
  result := FHIRDateTime(row { Value Value });
end
  tags { DAE.IsOrderPreserving = "True" };

create operator FHIRDateTime.iEqual(ALeft: FHIRDateTime, ARight: FHIRDateTime) : Boolean
begin
  result := ALeft.Value = ARight.Value;
end;

create operator FHIRDateTime.iLess(ALeft: FHIRDateTime, ARight: FHIRDateTime) : Boolean
begin
  result := ALeft.Value < ARight.Value;
end;

create operator FHIRDate(Value: System.Date): FHIRDate
begin
  result := FHIRDate(row { Value Value });
end
  tags { DAE.IsOrderPreserving = "True" };

create operator FHIRDate.iEqual(ALeft: FHIRDate, ARight: FHIRDate) : Boolean
begin
  result := ALeft.Value = ARight.Value;
end;

create operator FHIRDate.iLess(ALeft: FHIRDate, ARight: FHIRDate) : Boolean
begin
  result := ALeft.Value < ARight.Value;
end;

//drop operator Id(String);
create operator Id(Value: System.String): Id
begin
  result := Id(row { Value Value });
end 
	tags { DAE.IsOrderPreserving = "True" };

create operator Id.iEqual(const ALeft : Id, const ARight : Id) : Boolean
begin
  result := ALeft.Value = ARight.Value;
end;

create operator Id.iLess(const ALeft : Id, const ARight : Id) : Boolean
begin
  result := ALeft.Value < ARight.Value;
end;
 	
create operator Code(Value: System.String): Code
begin
  result := Code(row { Value Value });
end
  tags { DAE.IsOrderPreserving = "True" };

create operator Code.iEqual(const ALeft : Code, const ARight : Code) : Boolean
begin
  result := ALeft.Value = ARight.Value;
end;

create operator Code.iLess(const ALeft : Code, const ARight : Code) : Boolean
begin
  result := ALeft.Value < ARight.Value;
end;

create operator Coding(Code: Code): Coding
begin
  result := Coding(row { Code CodeElement });
end;

create operator Coding(Code: Code, System: FHIRUri): Coding
begin
	result := Coding(row { Code CodeElement, System SystemElement });
end;

create operator Coding(Code: Code, System: String): Coding
begin
  result := Coding(row { Code CodeElement, System System });
end;

create operator Coding(Code: Code, System: FHIRUri, Display: FHIRString): Coding
begin
  result := Coding(row { Code CodeElement, System SystemElement, Display DisplayElement });
end;

create operator Coding(Code: Code, System: String, Display: String): Coding
begin
  result := Coding(row { Code CodeElement, System System, Display Display });
end;

create operator CodeableConcept(Coding: Coding): CodeableConcept
begin
  result := CodeableConcept(row { list { Coding } Coding });
end;

create operator CodeableConcept(Coding: Coding, Text: FHIRString): CodeableConcept
begin
  result := CodeableConcept(row { list { Coding } Coding, Text TextElement });
end;

create operator CodeableConcept(Coding: Coding, Text: String): CodeableConcept
begin
  result := CodeableConcept(row { list { Coding } Coding, Text Text });
end;
