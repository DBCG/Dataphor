/*
	FHIR Primitive Types
*/

create type Element
	class "FHIRCore.FHIRObjectConveyor"
	tags 
	{ 
		DAE.Namespace = "Hl7.Fhir.Model",
		DAE.ClassName = "Element" 
	};
	
create type Extension : Element;
	
create type string : Element
{
	value : System.String
};
	
create type id : string
{
	// TODO: Additional constraints on id
};
	
alter type Element
{
	create representation Element
	{
		id : id,
		extension : list(Extension)
	}
};
	
create type boolean : Element
{
	value : Boolean
};

create type integer : Element
{
	value : Integer
};

create type unsignedInt : integer
{
	constraint unsignedIntValid { value >= 0 }
};

create type positiveInt : integer
{
	constraint positiveIntValid { value > 0 }
};

create type decimal : Element
{
	value : Decimal
};

create type instant : Element
{
	value : DateTime
};

create type time : Element
{
	value : Time
};

create type date : Element
{
	year : Integer,
	month : Integer,
	day : Integer
};

create type dateTime : Element
{
	year : Integer,
	month : Integer,
	day : Integer,
	hour : Integer,
	minute : Integer,
	second : Decimal
};

create type code : string
{
	// TODO: Additional constraints for valid code values
};

create type markdown : string
{
	// TODO: Additional constraints for valid markdown values
};

create type xhtml : string
{
	// TODO: Additional constraints for valid xhtml values
};

create type uri : Element
{
	value : String
	// TODO: Additional constraints for valid uri values
};

create type oid : uri
{
	// TODO: Additional constraints for valid oid values
};

create type base64Binary : Element
{
	value : String
	// TODO: Additional constraints for valid base64Binary values
};

create type Coding : Element
{
	system : uri,
	version : string,
	code : code,
	display : string,
	userSelected : boolean
};

create type CodeableConcept : Element
{
	coding : list(Coding),
	text : string
};

create type Meta : Element
{
	versionId : id,
	lastUpdated : instant,
	profile : list(uri),
	security : list(Coding),
	tag : list(Coding)
};

create type Period : Element
{
	start : dateTime,
	end : dateTime
};

create type Reference
{
	reference : string,
	display : string
};

create type Identifier : Element
{
	use : code,
	type : CodeableConcept,
	system : uri,
	value : string,
	period : Period,
	assigner : Reference
};

create type HumanName : Element
{
	use : code,
	text : string,
	family : string,
	given : string,
	prefix : string,
	suffix : string,
	period : Period
};

create type Address : Element
{
	use : code,
	type : code,
	text : string,
	line : list(string),
	city : string,
	district : string,
	state : string,
	postalCode : string,
	country : string,
	period : Period
};

create type ContactPoint : Element
{
	system : code,
	value : string,
	use : code,
	rank : positiveInt,
	period : Period
};

create type Quantity : Element
{
	value : decimal,
	comparator : code,
	unit : string,
	system : uri,
	code : code
};

create type Money : Quantity
{
	// TODO: Additional constraints on Money
};

create type SimpleQuantity : Quantity
{
	constraint SimpleQuantityValid { comparator is nil }
};

create type Duration : Quantity
{
	// TODO: Additional constraints on Duration
};

create type Count : Quantity
{
	// TODO: Additional constraints on Count
};

create type Distance : Quantity
{
	// TODO: Additional constraints on Distance
};

create type Range : Element
{
	low : SimpleQuantity,
	high : SimpleQuantity
};

create type Ratio : Element
{
	numerator : Quantity,
	denominator : Quantity
};

create type SampledData : Element
{
	origin : SimpleQuantity,
	period : decimal,
	factor : decimal,
	lowerLimit : decimal,
	upperLimit : decimal,
	dimensions : positiveInt,
	data : string
};

create type Attachment : Element
{
	contentType : code,
	language : code,
	data : base64Binary,
	url : uri,
	size : unsignedInt,
	hash : base64Binary,
	title : string,
	creation : dateTime
};

create type TimingRepeat : Element
{
	boundsQuantity : Duration,
	boundsRange : Range,
	boundsPeriod : Period,
	count : integer,
	duration : decimal,
	durationMax : decimal,
	durationUnits : code,
	frequency : integer,
	frequencyMax : integer,
	period : decimal,
	periodMax : decimal,
	periodUnits : code,
	when : code
}

create type Timing : Element
{
	event : list(dateTime),
	repeat : TimingRepeat,
	code : CodeableConcept
};

create type Signature : Element
{
	type : list(Coding),
	when : instant,
	whoUri : uri,
	whoReference : Reference,
	contentType : code,
	blob : base64Binary
};

create type Annotation : Element
{
	authorReference : Reference,
	authorString : string,
	time : dateTime,
	text : string
};

create type Narrative : Element
{
	status : code,
	div : xhtml
};

alter type Extension 
{ 
	create representation Extension
	{
		url : uri,
		valueInteger : integer,
		valueDecimal : decimal,
		valueDateTime : dateTime,
		valueDate : date,
		valueInstant : instant,
		valueString : string,
		valueUri : uri,
		valueBoolean : boolean,
		valueCode : code,
		valueMarkdown : markdown,
		valueBase64Binary : base64Binary,
		valueCoding : Coding,
		valueCodeableConcept : CodeableConcept,
		valueAttachment : Attachment,
		valueIdentifier : Identifier,
		valueQuantity : Quantity,
		valueRange : Range,
		valuePeriod : Period,
		valueRatio : Ratio,
		valueHumanName : HumanName,
		valueAddress : Address,
		valueContactPoint : ContactPoint,
		valueTiming : Timing,
		valueSignature : Signature,
		valueReference : Reference
	}
};		

