/*
Types.Generated - Generated using the following statement:
select GenerateTypes()
*/

create type Resource from class "Hl7.Fhir.Model.Resource" is { Base };
create type Id from class "Hl7.Fhir.Model.Id" is { Element };
alter type Id
{
	create representation Id
	{
		Value : String
	}
};
create type Meta from class "Hl7.Fhir.Model.Meta" is { Element };
create type Instant from class "Hl7.Fhir.Model.Instant" is { Element };
alter type Instant
{
	create representation Instant
	{
		Value : DateTime
	}
};
create type FHIRUri from class "Hl7.Fhir.Model.FhirUri" is { Element };
alter type FHIRUri
{
	create representation FHIRUri
	{
		Value : String
	}
};
create type Coding from class "Hl7.Fhir.Model.Coding" is { Element };
create type FHIRString from class "Hl7.Fhir.Model.FhirString" is { Element };
alter type FHIRString
{
	create representation FHIRString
	{
		Value : String
	}
};
create type Code from class "Hl7.Fhir.Model.Code" is { Element };
alter type Code
{
	create representation Code
	{
		Value : String
	}
};
create type FHIRBoolean from class "Hl7.Fhir.Model.FhirBoolean" is { Element };
alter type FHIRBoolean
{
	create representation FHIRBoolean
	{
		Value : Boolean
	}
};
alter type Coding
{
	create representation Coding
	{
		SystemElement : FHIRUri, 
		System : String, 
		VersionElement : FHIRString, 
		Version : String, 
		CodeElement : Code, 
		Code : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		PrimaryElement : FHIRBoolean, 
		Primary : Boolean
	}
};
alter type Meta
{
	create representation Meta
	{
		VersionIdElement : Id, 
		VersionId : String, 
		LastUpdatedElement : Instant, 
		LastUpdated : DateTime, 
		ProfileElement : list(FHIRUri), 
		Profile : list(String), 
		Security : list(Coding), 
		Tag : list(Coding)
	}
};
alter type Resource
{
	create representation Resource
	{
		IdElement : Id, 
		Id : String, 
		Meta : Meta, 
		ImplicitRulesElement : FHIRUri, 
		ImplicitRules : String, 
		LanguageElement : Code, 
		Language : String, 
		VersionId : String
	}
};
create type Parameters from class "Hl7.Fhir.Model.Parameters" is { Resource };
create type BackboneElement from class "Hl7.Fhir.Model.BackboneElement" is { Element };
alter type BackboneElement
{
	create representation BackboneElement
	{
		ModifierExtension : list(Extension)
	}
};
create type Parameters.ParametersParameterComponent from class "Hl7.Fhir.Model.Parameters+ParametersParameterComponent" is { BackboneElement };
create type Parameters.ParametersParameterPartComponent from class "Hl7.Fhir.Model.Parameters+ParametersParameterPartComponent" is { BackboneElement };
alter type Parameters.ParametersParameterPartComponent
{
	create representation Parameters.ParametersParameterPartComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Value : Element, 
		Resource : Resource
	}
};
alter type Parameters.ParametersParameterComponent
{
	create representation Parameters.ParametersParameterComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Value : Element, 
		Resource : Resource, 
		Part : list(Parameters.ParametersParameterPartComponent)
	}
};
alter type Parameters
{
	create representation Parameters
	{
		Parameter : list(Parameters.ParametersParameterComponent)
	}
};
create type Query from class "Hl7.Fhir.Model.Query" is { Parameters };
create type Bundle from class "Hl7.Fhir.Model.Bundle" is { Resource };
create type UnsignedInt from class "Hl7.Fhir.Model.UnsignedInt" is { Element };
alter type UnsignedInt
{
	create representation UnsignedInt
	{
		Value : Integer
	}
};
create type Bundle.BundleLinkComponent from class "Hl7.Fhir.Model.Bundle+BundleLinkComponent" is { BackboneElement };
alter type Bundle.BundleLinkComponent
{
	create representation Bundle.BundleLinkComponent
	{
		RelationElement : FHIRString, 
		Relation : String, 
		UrlElement : FHIRUri, 
		Url : String
	}
};
create type Bundle.BundleEntryComponent from class "Hl7.Fhir.Model.Bundle+BundleEntryComponent" is { BackboneElement };
create type Bundle.BundleEntrySearchComponent from class "Hl7.Fhir.Model.Bundle+BundleEntrySearchComponent" is { BackboneElement };
create type FHIRDecimal from class "Hl7.Fhir.Model.FhirDecimal" is { Element };
alter type FHIRDecimal
{
	create representation FHIRDecimal
	{
		Value : Decimal
	}
};
alter type Bundle.BundleEntrySearchComponent
{
	create representation Bundle.BundleEntrySearchComponent
	{
		ModeElement : Code, 
		Mode : String, 
		ScoreElement : FHIRDecimal, 
		Score : Decimal
	}
};
create type Bundle.BundleEntryTransactionComponent from class "Hl7.Fhir.Model.Bundle+BundleEntryTransactionComponent" is { BackboneElement };
alter type Bundle.BundleEntryTransactionComponent
{
	create representation Bundle.BundleEntryTransactionComponent
	{
		MethodElement : Code, 
		Method : String, 
		UrlElement : FHIRUri, 
		Url : String, 
		IfNoneMatchElement : FHIRString, 
		IfNoneMatch : String, 
		IfMatchElement : FHIRString, 
		IfMatch : String, 
		IfModifiedSinceElement : Instant, 
		IfModifiedSince : DateTime, 
		IfNoneExistElement : FHIRString, 
		IfNoneExist : String
	}
};
create type Bundle.BundleEntryTransactionResponseComponent from class "Hl7.Fhir.Model.Bundle+BundleEntryTransactionResponseComponent" is { BackboneElement };
alter type Bundle.BundleEntryTransactionResponseComponent
{
	create representation Bundle.BundleEntryTransactionResponseComponent
	{
		StatusElement : FHIRString, 
		Status : String, 
		LocationElement : FHIRUri, 
		Location : String, 
		EtagElement : FHIRString, 
		Etag : String, 
		LastModifiedElement : Instant, 
		LastModified : DateTime
	}
};
alter type Bundle.BundleEntryComponent
{
	create representation Bundle.BundleEntryComponent
	{
		BaseElement : FHIRUri, 
		Base : String, 
		Link : list(Bundle.BundleLinkComponent), 
		Resource : Resource, 
		Search : Bundle.BundleEntrySearchComponent, 
		Transaction : Bundle.BundleEntryTransactionComponent, 
		TransactionResponse : Bundle.BundleEntryTransactionResponseComponent
	}
};
create type Base64Binary from class "Hl7.Fhir.Model.Base64Binary" is { Element };
alter type Base64Binary
{
	create representation Base64Binary
	{
		Value : Binary
	}
};
alter type Bundle
{
	create representation Bundle
	{
		SelfLink : String, 
		FirstLink : String, 
		PreviousLink : String, 
		NextLink : String, 
		LastLink : String, 
		SearchLink : String, 
		PredecessorVersionLink : String, 
		Alternate : String, 
		TypeElement : Code, 
		Type : String, 
		BaseElement : FHIRUri, 
		Base : String, 
		TotalElement : UnsignedInt, 
		Total : Integer, 
		Link : list(Bundle.BundleLinkComponent), 
		Entry : list(Bundle.BundleEntryComponent), 
		SignatureElement : Base64Binary, 
		Signature : Binary
	}
};
create type Binary from class "Hl7.Fhir.Model.Binary" is { Resource };
alter type Binary
{
	create representation Binary
	{
		ContentTypeElement : Code, 
		ContentType : String, 
		ContentElement : Base64Binary, 
		Content : Binary
	}
};
create type Primitive from class "Hl7.Fhir.Model.Primitive" is { Element };
create type DomainResource from class "Hl7.Fhir.Model.DomainResource" is { Resource };
create type Narrative from class "Hl7.Fhir.Model.Narrative" is { Element };
alter type Narrative
{
	create representation Narrative
	{
		StatusElement : Code, 
		Status : String, 
		Div : String
	}
};
alter type DomainResource
{
	create representation DomainResource
	{
		Text : Narrative, 
		Contained : list(Resource), 
		Extension : list(Extension), 
		ModifierExtension : list(Extension)
	}
};
create type ConceptMap from class "Hl7.Fhir.Model.ConceptMap" is { DomainResource };
create type Identifier from class "Hl7.Fhir.Model.Identifier" is { Element };
create type CodeableConcept from class "Hl7.Fhir.Model.CodeableConcept" is { Element };
alter type CodeableConcept
{
	create representation CodeableConcept
	{
		Coding : list(Coding), 
		TextElement : FHIRString, 
		Text : String
	}
};
create type Period from class "Hl7.Fhir.Model.Period" is { Element };
create type FHIRDateTime from class "Hl7.Fhir.Model.FhirDateTime" is { Element };
alter type FHIRDateTime
{
	create representation FHIRDateTime
	{
		Value : String
	}
};
alter type Period
{
	create representation Period
	{
		StartElement : FHIRDateTime, 
		Start : String, 
		EndElement : FHIRDateTime, 
		End : String
	}
};
create type ResourceReference from class "Hl7.Fhir.Model.ResourceReference" is { Element };
alter type ResourceReference
{
	create representation ResourceReference
	{
		ReferenceElement : FHIRString, 
		Reference : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		Url : String
	}
};
alter type Identifier
{
	create representation Identifier
	{
		UseElement : Code, 
		Use : String, 
		Type : CodeableConcept, 
		SystemElement : FHIRUri, 
		System : String, 
		ValueElement : FHIRString, 
		Value : String, 
		Period : Period, 
		Assigner : ResourceReference
	}
};
create type ConceptMap.ConceptMapContactComponent from class "Hl7.Fhir.Model.ConceptMap+ConceptMapContactComponent" is { BackboneElement };
create type ContactPoint from class "Hl7.Fhir.Model.ContactPoint" is { Element };
alter type ContactPoint
{
	create representation ContactPoint
	{
		Zip : String, 
		SystemElement : Code, 
		System : String, 
		ValueElement : FHIRString, 
		Value : String, 
		UseElement : Code, 
		Use : String, 
		Period : Period
	}
};
alter type ConceptMap.ConceptMapContactComponent
{
	create representation ConceptMap.ConceptMapContactComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Telecom : list(ContactPoint)
	}
};
create type ConceptMap.ConceptMapElementComponent from class "Hl7.Fhir.Model.ConceptMap+ConceptMapElementComponent" is { BackboneElement };
create type ConceptMap.OtherElementComponent from class "Hl7.Fhir.Model.ConceptMap+OtherElementComponent" is { BackboneElement };
alter type ConceptMap.OtherElementComponent
{
	create representation ConceptMap.OtherElementComponent
	{
		ElementElement : FHIRUri, 
		Element : String, 
		CodeSystemElement : FHIRUri, 
		CodeSystem : String, 
		CodeElement : FHIRString, 
		Code : String
	}
};
create type ConceptMap.ConceptMapElementMapComponent from class "Hl7.Fhir.Model.ConceptMap+ConceptMapElementMapComponent" is { BackboneElement };
alter type ConceptMap.ConceptMapElementMapComponent
{
	create representation ConceptMap.ConceptMapElementMapComponent
	{
		CodeSystemElement : FHIRUri, 
		CodeSystem : String, 
		CodeElement : Code, 
		Code : String, 
		EquivalenceElement : Code, 
		Equivalence : String, 
		CommentsElement : FHIRString, 
		Comments : String, 
		Product : list(ConceptMap.OtherElementComponent)
	}
};
alter type ConceptMap.ConceptMapElementComponent
{
	create representation ConceptMap.ConceptMapElementComponent
	{
		CodeSystemElement : FHIRUri, 
		CodeSystem : String, 
		CodeElement : Code, 
		Code : String, 
		DependsOn : list(ConceptMap.OtherElementComponent), 
		Map : list(ConceptMap.ConceptMapElementMapComponent)
	}
};
alter type ConceptMap
{
	create representation ConceptMap
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : Identifier, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		UseContext : list(CodeableConcept), 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ConceptMap.ConceptMapContactComponent), 
		DescriptionElement : FHIRString, 
		Description : String, 
		RequirementsElement : FHIRString, 
		Requirements : String, 
		CopyrightElement : FHIRString, 
		Copyright : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Source : Element, 
		Target : Element, 
		Element : list(ConceptMap.ConceptMapElementComponent)
	}
};
create type FHIRDate from class "Hl7.Fhir.Model.Date" is { Element };
alter type FHIRDate
{
	create representation FHIRDate
	{
		Value : String
	}
};
create type Appointment from class "Hl7.Fhir.Model.Appointment" is { DomainResource };
create type Appointment.AppointmentParticipantComponent from class "Hl7.Fhir.Model.Appointment+AppointmentParticipantComponent" is { BackboneElement };
alter type Appointment.AppointmentParticipantComponent
{
	create representation Appointment.AppointmentParticipantComponent
	{
		Type : list(CodeableConcept), 
		Actor : ResourceReference, 
		RequiredElement : Code, 
		Required : String, 
		StatusElement : Code, 
		Status : String
	}
};
alter type Appointment
{
	create representation Appointment
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Type : CodeableConcept, 
		Reason : CodeableConcept, 
		PriorityElement : UnsignedInt, 
		Priority : Integer, 
		DescriptionElement : FHIRString, 
		Description : String, 
		StartElement : Instant, 
		Start : DateTime, 
		EndElement : Instant, 
		End : DateTime, 
		Slot : list(ResourceReference), 
		CommentElement : FHIRString, 
		Comment : String, 
		Order : ResourceReference, 
		Participant : list(Appointment.AppointmentParticipantComponent)
	}
};
create type AppointmentResponse from class "Hl7.Fhir.Model.AppointmentResponse" is { DomainResource };
alter type AppointmentResponse
{
	create representation AppointmentResponse
	{
		Identifier : list(Identifier), 
		Appointment : ResourceReference, 
		ParticipantType : list(CodeableConcept), 
		Actor : ResourceReference, 
		ParticipantStatus_Element : Code, 
		ParticipantStatus_ : String, 
		CommentElement : FHIRString, 
		Comment : String, 
		StartElement : Instant, 
		Start : DateTime, 
		EndElement : Instant, 
		End : DateTime
	}
};
create type AuditEvent from class "Hl7.Fhir.Model.AuditEvent" is { DomainResource };
create type AuditEvent.AuditEventEventComponent from class "Hl7.Fhir.Model.AuditEvent+AuditEventEventComponent" is { BackboneElement };
alter type AuditEvent.AuditEventEventComponent
{
	create representation AuditEvent.AuditEventEventComponent
	{
		Type : CodeableConcept, 
		Subtype : list(CodeableConcept), 
		ActionElement : Code, 
		Action : String, 
		DateTimeElement : Instant, 
		DateTime : DateTime, 
		OutcomeElement : Code, 
		Outcome : String, 
		OutcomeDescElement : FHIRString, 
		OutcomeDesc : String, 
		PurposeOfEvent : list(Coding)
	}
};
create type AuditEvent.AuditEventParticipantComponent from class "Hl7.Fhir.Model.AuditEvent+AuditEventParticipantComponent" is { BackboneElement };
create type AuditEvent.AuditEventParticipantNetworkComponent from class "Hl7.Fhir.Model.AuditEvent+AuditEventParticipantNetworkComponent" is { BackboneElement };
alter type AuditEvent.AuditEventParticipantNetworkComponent
{
	create representation AuditEvent.AuditEventParticipantNetworkComponent
	{
		IdentifierElement : FHIRString, 
		Identifier : String, 
		TypeElement : Code, 
		Type : String
	}
};
alter type AuditEvent.AuditEventParticipantComponent
{
	create representation AuditEvent.AuditEventParticipantComponent
	{
		Role : list(CodeableConcept), 
		Reference : ResourceReference, 
		UserIdElement : FHIRString, 
		UserId : String, 
		AltIdElement : FHIRString, 
		AltId : String, 
		NameElement : FHIRString, 
		Name : String, 
		RequestorElement : FHIRBoolean, 
		Requestor : Boolean, 
		Location : ResourceReference, 
		PolicyElement : list(FHIRUri), 
		Policy : list(String), 
		Media : Coding, 
		Network : AuditEvent.AuditEventParticipantNetworkComponent, 
		PurposeOfUse : list(Coding)
	}
};
create type AuditEvent.AuditEventSourceComponent from class "Hl7.Fhir.Model.AuditEvent+AuditEventSourceComponent" is { BackboneElement };
alter type AuditEvent.AuditEventSourceComponent
{
	create representation AuditEvent.AuditEventSourceComponent
	{
		SiteElement : FHIRString, 
		Site : String, 
		IdentifierElement : FHIRString, 
		Identifier : String, 
		Type : list(Coding)
	}
};
create type AuditEvent.AuditEventObjectComponent from class "Hl7.Fhir.Model.AuditEvent+AuditEventObjectComponent" is { BackboneElement };
create type AuditEvent.AuditEventObjectDetailComponent from class "Hl7.Fhir.Model.AuditEvent+AuditEventObjectDetailComponent" is { BackboneElement };
alter type AuditEvent.AuditEventObjectDetailComponent
{
	create representation AuditEvent.AuditEventObjectDetailComponent
	{
		TypeElement : FHIRString, 
		Type : String, 
		ValueElement : Base64Binary, 
		Value : Binary
	}
};
alter type AuditEvent.AuditEventObjectComponent
{
	create representation AuditEvent.AuditEventObjectComponent
	{
		Identifier : Identifier, 
		Reference : ResourceReference, 
		TypeElement : Code, 
		Type : String, 
		RoleElement : Code, 
		Role : String, 
		LifecycleElement : Code, 
		Lifecycle : String, 
		Sensitivity : CodeableConcept, 
		NameElement : FHIRString, 
		Name : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		QueryElement : Base64Binary, 
		Query : Binary, 
		Detail : list(AuditEvent.AuditEventObjectDetailComponent)
	}
};
alter type AuditEvent
{
	create representation AuditEvent
	{
		Event : AuditEvent.AuditEventEventComponent, 
		Participant : list(AuditEvent.AuditEventParticipantComponent), 
		Source : AuditEvent.AuditEventSourceComponent, 
		Object : list(AuditEvent.AuditEventObjectComponent)
	}
};
create type Basic from class "Hl7.Fhir.Model.Basic" is { DomainResource };
alter type Basic
{
	create representation Basic
	{
		Identifier : list(Identifier), 
		Code : CodeableConcept, 
		Subject : ResourceReference, 
		Author : ResourceReference, 
		CreatedElement : FHIRDate, 
		Created : String
	}
};
create type BodySite from class "Hl7.Fhir.Model.BodySite" is { DomainResource };
create type Attachment from class "Hl7.Fhir.Model.Attachment" is { Element };
alter type Attachment
{
	create representation Attachment
	{
		ContentTypeElement : Code, 
		ContentType : String, 
		LanguageElement : Code, 
		Language : String, 
		DataElement : Base64Binary, 
		Data : Binary, 
		UrlElement : FHIRUri, 
		Url : String, 
		SizeElement : UnsignedInt, 
		Size : Integer, 
		HashElement : Base64Binary, 
		Hash : Binary, 
		TitleElement : FHIRString, 
		Title : String, 
		CreationElement : FHIRDateTime, 
		Creation : String
	}
};
alter type BodySite
{
	create representation BodySite
	{
		Patient : ResourceReference, 
		Identifier : list(Identifier), 
		Code : CodeableConcept, 
		Modifier : list(CodeableConcept), 
		DescriptionElement : FHIRString, 
		Description : String, 
		Image : list(Attachment)
	}
};
create type Claim from class "Hl7.Fhir.Model.Claim" is { DomainResource };
create type Claim.PayeeComponent from class "Hl7.Fhir.Model.Claim+PayeeComponent" is { BackboneElement };
alter type Claim.PayeeComponent
{
	create representation Claim.PayeeComponent
	{
		Type : Coding, 
		Provider : ResourceReference, 
		Organization : ResourceReference, 
		Person : ResourceReference
	}
};
create type Claim.DiagnosisComponent from class "Hl7.Fhir.Model.Claim+DiagnosisComponent" is { BackboneElement };
create type PositiveInt from class "Hl7.Fhir.Model.PositiveInt" is { Element };
alter type PositiveInt
{
	create representation PositiveInt
	{
		Value : Integer
	}
};
alter type Claim.DiagnosisComponent
{
	create representation Claim.DiagnosisComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Diagnosis : Coding
	}
};
create type Claim.CoverageComponent from class "Hl7.Fhir.Model.Claim+CoverageComponent" is { BackboneElement };
alter type Claim.CoverageComponent
{
	create representation Claim.CoverageComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		FocalElement : FHIRBoolean, 
		Focal : Boolean, 
		Coverage : ResourceReference, 
		BusinessArrangementElement : FHIRString, 
		BusinessArrangement : String, 
		Relationship : Coding, 
		PreAuthRefElement : list(FHIRString), 
		PreAuthRef : list(String), 
		ClaimResponse : ResourceReference, 
		OriginalRuleset : Coding
	}
};
create type Claim.ItemsComponent from class "Hl7.Fhir.Model.Claim+ItemsComponent" is { BackboneElement };
create type Quantity from class "Hl7.Fhir.Model.Quantity" is { Element };
alter type Quantity
{
	create representation Quantity
	{
		ValueElement : FHIRDecimal, 
		Value : Decimal, 
		ComparatorElement : Code, 
		Comparator : String, 
		UnitsElement : FHIRString, 
		Units : String, 
		SystemElement : FHIRUri, 
		System : String, 
		CodeElement : Code, 
		Code : String
	}
};
create type Money from class "Hl7.Fhir.Model.Money" is { Quantity };
create type Claim.DetailComponent from class "Hl7.Fhir.Model.Claim+DetailComponent" is { BackboneElement };
create type Claim.SubDetailComponent from class "Hl7.Fhir.Model.Claim+SubDetailComponent" is { BackboneElement };
alter type Claim.SubDetailComponent
{
	create representation Claim.SubDetailComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Type : Coding, 
		Service : Coding, 
		Quantity : Quantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		PointsElement : FHIRDecimal, 
		Points : Decimal, 
		Net : Money, 
		Udi : Coding
	}
};
alter type Claim.DetailComponent
{
	create representation Claim.DetailComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Type : Coding, 
		Service : Coding, 
		Quantity : Quantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		PointsElement : FHIRDecimal, 
		Points : Decimal, 
		Net : Money, 
		Udi : Coding, 
		SubDetail : list(Claim.SubDetailComponent)
	}
};
create type Claim.ProsthesisComponent from class "Hl7.Fhir.Model.Claim+ProsthesisComponent" is { BackboneElement };
alter type Claim.ProsthesisComponent
{
	create representation Claim.ProsthesisComponent
	{
		InitialElement : FHIRBoolean, 
		Initial : Boolean, 
		PriorDateElement : FHIRDate, 
		PriorDate : String, 
		PriorMaterial : Coding
	}
};
alter type Claim.ItemsComponent
{
	create representation Claim.ItemsComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Type : Coding, 
		Provider : ResourceReference, 
		DiagnosisLinkIdElement : list(PositiveInt), 
		DiagnosisLinkId : list(Integer), 
		Service : Coding, 
		ServiceDateElement : FHIRDate, 
		ServiceDate : String, 
		Quantity : Quantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		PointsElement : FHIRDecimal, 
		Points : Decimal, 
		Net : Money, 
		Udi : Coding, 
		BodySite : Coding, 
		SubSite : list(Coding), 
		Modifier : list(Coding), 
		Detail : list(Claim.DetailComponent), 
		Prosthesis : Claim.ProsthesisComponent
	}
};
create type Claim.MissingTeethComponent from class "Hl7.Fhir.Model.Claim+MissingTeethComponent" is { BackboneElement };
alter type Claim.MissingTeethComponent
{
	create representation Claim.MissingTeethComponent
	{
		Tooth : Coding, 
		Reason : Coding, 
		ExtractionDateElement : FHIRDate, 
		ExtractionDate : String
	}
};
alter type Claim
{
	create representation Claim
	{
		TypeElement : Code, 
		Type : String, 
		Identifier : list(Identifier), 
		Ruleset : Coding, 
		OriginalRuleset : Coding, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Target : ResourceReference, 
		Provider : ResourceReference, 
		Organization : ResourceReference, 
		Use_Element : Code, 
		Use_ : String, 
		Priority : Coding, 
		FundsReserve : Coding, 
		Enterer : ResourceReference, 
		Facility : ResourceReference, 
		Prescription : ResourceReference, 
		OriginalPrescription : ResourceReference, 
		Payee : Claim.PayeeComponent, 
		Referral : ResourceReference, 
		Diagnosis : list(Claim.DiagnosisComponent), 
		Condition : list(Coding), 
		Patient : ResourceReference, 
		Coverage : list(Claim.CoverageComponent), 
		Exception : list(Coding), 
		SchoolElement : FHIRString, 
		School : String, 
		AccidentElement : FHIRDate, 
		Accident : String, 
		AccidentType : Coding, 
		InterventionException : list(Coding), 
		Item : list(Claim.ItemsComponent), 
		AdditionalMaterials : list(Coding), 
		MissingTeeth : list(Claim.MissingTeethComponent)
	}
};
create type ClaimResponse from class "Hl7.Fhir.Model.ClaimResponse" is { DomainResource };
create type ClaimResponse.ItemsComponent from class "Hl7.Fhir.Model.ClaimResponse+ItemsComponent" is { BackboneElement };
create type ClaimResponse.ItemAdjudicationComponent from class "Hl7.Fhir.Model.ClaimResponse+ItemAdjudicationComponent" is { BackboneElement };
alter type ClaimResponse.ItemAdjudicationComponent
{
	create representation ClaimResponse.ItemAdjudicationComponent
	{
		Code : Coding, 
		Amount : Money, 
		ValueElement : FHIRDecimal, 
		Value : Decimal
	}
};
create type ClaimResponse.ItemDetailComponent from class "Hl7.Fhir.Model.ClaimResponse+ItemDetailComponent" is { BackboneElement };
create type ClaimResponse.DetailAdjudicationComponent from class "Hl7.Fhir.Model.ClaimResponse+DetailAdjudicationComponent" is { BackboneElement };
alter type ClaimResponse.DetailAdjudicationComponent
{
	create representation ClaimResponse.DetailAdjudicationComponent
	{
		Code : Coding, 
		Amount : Money, 
		ValueElement : FHIRDecimal, 
		Value : Decimal
	}
};
create type ClaimResponse.SubDetailComponent from class "Hl7.Fhir.Model.ClaimResponse+SubDetailComponent" is { BackboneElement };
create type ClaimResponse.SubdetailAdjudicationComponent from class "Hl7.Fhir.Model.ClaimResponse+SubdetailAdjudicationComponent" is { BackboneElement };
alter type ClaimResponse.SubdetailAdjudicationComponent
{
	create representation ClaimResponse.SubdetailAdjudicationComponent
	{
		Code : Coding, 
		Amount : Money, 
		ValueElement : FHIRDecimal, 
		Value : Decimal
	}
};
alter type ClaimResponse.SubDetailComponent
{
	create representation ClaimResponse.SubDetailComponent
	{
		SequenceLinkIdElement : PositiveInt, 
		SequenceLinkId : Integer, 
		Adjudication : list(ClaimResponse.SubdetailAdjudicationComponent)
	}
};
alter type ClaimResponse.ItemDetailComponent
{
	create representation ClaimResponse.ItemDetailComponent
	{
		SequenceLinkIdElement : PositiveInt, 
		SequenceLinkId : Integer, 
		Adjudication : list(ClaimResponse.DetailAdjudicationComponent), 
		SubDetail : list(ClaimResponse.SubDetailComponent)
	}
};
alter type ClaimResponse.ItemsComponent
{
	create representation ClaimResponse.ItemsComponent
	{
		SequenceLinkIdElement : PositiveInt, 
		SequenceLinkId : Integer, 
		NoteNumberElement : list(PositiveInt), 
		NoteNumber : list(Integer), 
		Adjudication : list(ClaimResponse.ItemAdjudicationComponent), 
		Detail : list(ClaimResponse.ItemDetailComponent)
	}
};
create type ClaimResponse.AddedItemComponent from class "Hl7.Fhir.Model.ClaimResponse+AddedItemComponent" is { BackboneElement };
create type ClaimResponse.AddedItemAdjudicationComponent from class "Hl7.Fhir.Model.ClaimResponse+AddedItemAdjudicationComponent" is { BackboneElement };
alter type ClaimResponse.AddedItemAdjudicationComponent
{
	create representation ClaimResponse.AddedItemAdjudicationComponent
	{
		Code : Coding, 
		Amount : Money, 
		ValueElement : FHIRDecimal, 
		Value : Decimal
	}
};
create type ClaimResponse.AddedItemsDetailComponent from class "Hl7.Fhir.Model.ClaimResponse+AddedItemsDetailComponent" is { BackboneElement };
create type ClaimResponse.AddedItemDetailAdjudicationComponent from class "Hl7.Fhir.Model.ClaimResponse+AddedItemDetailAdjudicationComponent" is { BackboneElement };
alter type ClaimResponse.AddedItemDetailAdjudicationComponent
{
	create representation ClaimResponse.AddedItemDetailAdjudicationComponent
	{
		Code : Coding, 
		Amount : Money, 
		ValueElement : FHIRDecimal, 
		Value : Decimal
	}
};
alter type ClaimResponse.AddedItemsDetailComponent
{
	create representation ClaimResponse.AddedItemsDetailComponent
	{
		Service : Coding, 
		Fee : Money, 
		Adjudication : list(ClaimResponse.AddedItemDetailAdjudicationComponent)
	}
};
alter type ClaimResponse.AddedItemComponent
{
	create representation ClaimResponse.AddedItemComponent
	{
		SequenceLinkIdElement : list(PositiveInt), 
		SequenceLinkId : list(Integer), 
		Service : Coding, 
		Fee : Money, 
		NoteNumberLinkIdElement : list(PositiveInt), 
		NoteNumberLinkId : list(Integer), 
		Adjudication : list(ClaimResponse.AddedItemAdjudicationComponent), 
		Detail : list(ClaimResponse.AddedItemsDetailComponent)
	}
};
create type ClaimResponse.ErrorsComponent from class "Hl7.Fhir.Model.ClaimResponse+ErrorsComponent" is { BackboneElement };
alter type ClaimResponse.ErrorsComponent
{
	create representation ClaimResponse.ErrorsComponent
	{
		SequenceLinkIdElement : PositiveInt, 
		SequenceLinkId : Integer, 
		DetailSequenceLinkIdElement : PositiveInt, 
		DetailSequenceLinkId : Integer, 
		SubdetailSequenceLinkIdElement : PositiveInt, 
		SubdetailSequenceLinkId : Integer, 
		Code : Coding
	}
};
create type ClaimResponse.NotesComponent from class "Hl7.Fhir.Model.ClaimResponse+NotesComponent" is { BackboneElement };
alter type ClaimResponse.NotesComponent
{
	create representation ClaimResponse.NotesComponent
	{
		NumberElement : PositiveInt, 
		Number : Integer, 
		Type : Coding, 
		TextElement : FHIRString, 
		Text : String
	}
};
create type ClaimResponse.CoverageComponent from class "Hl7.Fhir.Model.ClaimResponse+CoverageComponent" is { BackboneElement };
alter type ClaimResponse.CoverageComponent
{
	create representation ClaimResponse.CoverageComponent
	{
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		FocalElement : FHIRBoolean, 
		Focal : Boolean, 
		Coverage : ResourceReference, 
		BusinessArrangementElement : FHIRString, 
		BusinessArrangement : String, 
		Relationship : Coding, 
		PreAuthRefElement : list(FHIRString), 
		PreAuthRef : list(String), 
		ClaimResponse : ResourceReference, 
		OriginalRuleset : Coding
	}
};
alter type ClaimResponse
{
	create representation ClaimResponse
	{
		Identifier : list(Identifier), 
		Request : ResourceReference, 
		Ruleset : Coding, 
		OriginalRuleset : Coding, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Organization : ResourceReference, 
		RequestProvider : ResourceReference, 
		RequestOrganization : ResourceReference, 
		OutcomeElement : Code, 
		Outcome : String, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		PayeeType : Coding, 
		Item : list(ClaimResponse.ItemsComponent), 
		AddItem : list(ClaimResponse.AddedItemComponent), 
		Error : list(ClaimResponse.ErrorsComponent), 
		TotalCost : Money, 
		UnallocDeductable : Money, 
		TotalBenefit : Money, 
		PaymentAdjustment : Money, 
		PaymentAdjustmentReason : Coding, 
		PaymentDateElement : FHIRDate, 
		PaymentDate : String, 
		PaymentAmount : Money, 
		PaymentRef : Identifier, 
		Reserved : Coding, 
		Form : Coding, 
		Note : list(ClaimResponse.NotesComponent), 
		Coverage : list(ClaimResponse.CoverageComponent)
	}
};
create type ClinicalImpression from class "Hl7.Fhir.Model.ClinicalImpression" is { DomainResource };
create type ClinicalImpression.ClinicalImpressionInvestigationsComponent from class "Hl7.Fhir.Model.ClinicalImpression+ClinicalImpressionInvestigationsComponent" is { BackboneElement };
alter type ClinicalImpression.ClinicalImpressionInvestigationsComponent
{
	create representation ClinicalImpression.ClinicalImpressionInvestigationsComponent
	{
		Code : CodeableConcept, 
		Item : list(ResourceReference)
	}
};
create type ClinicalImpression.ClinicalImpressionFindingComponent from class "Hl7.Fhir.Model.ClinicalImpression+ClinicalImpressionFindingComponent" is { BackboneElement };
alter type ClinicalImpression.ClinicalImpressionFindingComponent
{
	create representation ClinicalImpression.ClinicalImpressionFindingComponent
	{
		Item : CodeableConcept, 
		CauseElement : FHIRString, 
		Cause : String
	}
};
create type ClinicalImpression.ClinicalImpressionRuledOutComponent from class "Hl7.Fhir.Model.ClinicalImpression+ClinicalImpressionRuledOutComponent" is { BackboneElement };
alter type ClinicalImpression.ClinicalImpressionRuledOutComponent
{
	create representation ClinicalImpression.ClinicalImpressionRuledOutComponent
	{
		Item : CodeableConcept, 
		ReasonElement : FHIRString, 
		Reason : String
	}
};
alter type ClinicalImpression
{
	create representation ClinicalImpression
	{
		Patient : ResourceReference, 
		Assessor : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		DateElement : FHIRDateTime, 
		Date : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Previous : ResourceReference, 
		Problem : list(ResourceReference), 
		Trigger : Element, 
		Investigations : list(ClinicalImpression.ClinicalImpressionInvestigationsComponent), 
		ProtocolElement : FHIRUri, 
		Protocol : String, 
		SummaryElement : FHIRString, 
		Summary : String, 
		Finding : list(ClinicalImpression.ClinicalImpressionFindingComponent), 
		Resolved : list(CodeableConcept), 
		RuledOut : list(ClinicalImpression.ClinicalImpressionRuledOutComponent), 
		PrognosisElement : FHIRString, 
		Prognosis : String, 
		Plan : list(ResourceReference), 
		Action : list(ResourceReference)
	}
};
create type Communication from class "Hl7.Fhir.Model.Communication" is { DomainResource };
create type Communication.CommunicationPayloadComponent from class "Hl7.Fhir.Model.Communication+CommunicationPayloadComponent" is { BackboneElement };
alter type Communication.CommunicationPayloadComponent
{
	create representation Communication.CommunicationPayloadComponent
	{
		Content : Element
	}
};
alter type Communication
{
	create representation Communication
	{
		Identifier : list(Identifier), 
		Category : CodeableConcept, 
		Sender : ResourceReference, 
		Recipient : list(ResourceReference), 
		Payload : list(Communication.CommunicationPayloadComponent), 
		Medium : list(CodeableConcept), 
		StatusElement : Code, 
		Status : String, 
		Encounter : ResourceReference, 
		SentElement : FHIRDateTime, 
		Sent : String, 
		ReceivedElement : FHIRDateTime, 
		Received : String, 
		Reason : list(CodeableConcept), 
		Subject : ResourceReference
	}
};
create type CommunicationRequest from class "Hl7.Fhir.Model.CommunicationRequest" is { DomainResource };
create type CommunicationRequest.CommunicationRequestPayloadComponent from class "Hl7.Fhir.Model.CommunicationRequest+CommunicationRequestPayloadComponent" is { BackboneElement };
alter type CommunicationRequest.CommunicationRequestPayloadComponent
{
	create representation CommunicationRequest.CommunicationRequestPayloadComponent
	{
		Content : Element
	}
};
alter type CommunicationRequest
{
	create representation CommunicationRequest
	{
		Identifier : list(Identifier), 
		Category : CodeableConcept, 
		Sender : ResourceReference, 
		Recipient : list(ResourceReference), 
		Payload : list(CommunicationRequest.CommunicationRequestPayloadComponent), 
		Medium : list(CodeableConcept), 
		Requester : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		Encounter : ResourceReference, 
		ScheduledTimeElement : FHIRDateTime, 
		ScheduledTime : String, 
		Reason : list(CodeableConcept), 
		OrderedOnElement : FHIRDateTime, 
		OrderedOn : String, 
		Subject : ResourceReference, 
		Priority : CodeableConcept
	}
};
create type Contract from class "Hl7.Fhir.Model.Contract" is { DomainResource };
create type Contract.ActorComponent from class "Hl7.Fhir.Model.Contract+ActorComponent" is { BackboneElement };
alter type Contract.ActorComponent
{
	create representation Contract.ActorComponent
	{
		Entity : ResourceReference, 
		Role : list(CodeableConcept)
	}
};
create type Contract.ValuedItemComponent from class "Hl7.Fhir.Model.Contract+ValuedItemComponent" is { BackboneElement };
alter type Contract.ValuedItemComponent
{
	create representation Contract.ValuedItemComponent
	{
		Entity : Element, 
		Identifier : Identifier, 
		EffectiveTimeElement : FHIRDateTime, 
		EffectiveTime : String, 
		Quantity : Quantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		PointsElement : FHIRDecimal, 
		Points : Decimal, 
		Net : Money
	}
};
create type Contract.SignatoryComponent from class "Hl7.Fhir.Model.Contract+SignatoryComponent" is { BackboneElement };
alter type Contract.SignatoryComponent
{
	create representation Contract.SignatoryComponent
	{
		Type : Coding, 
		Party : ResourceReference, 
		SignatureElement : FHIRString, 
		Signature : String
	}
};
create type Contract.TermComponent from class "Hl7.Fhir.Model.Contract+TermComponent" is { BackboneElement };
create type Contract.TermActorComponent from class "Hl7.Fhir.Model.Contract+TermActorComponent" is { BackboneElement };
alter type Contract.TermActorComponent
{
	create representation Contract.TermActorComponent
	{
		Entity : ResourceReference, 
		Role : list(CodeableConcept)
	}
};
create type Contract.TermValuedItemComponent from class "Hl7.Fhir.Model.Contract+TermValuedItemComponent" is { BackboneElement };
alter type Contract.TermValuedItemComponent
{
	create representation Contract.TermValuedItemComponent
	{
		Entity : Element, 
		Identifier : Identifier, 
		EffectiveTimeElement : FHIRDateTime, 
		EffectiveTime : String, 
		Quantity : Quantity, 
		UnitPrice : Money, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		PointsElement : FHIRDecimal, 
		Points : Decimal, 
		Net : Money
	}
};
alter type Contract.TermComponent
{
	create representation Contract.TermComponent
	{
		Identifier : Identifier, 
		IssuedElement : FHIRDateTime, 
		Issued : String, 
		Applies : Period, 
		Type : CodeableConcept, 
		SubType : CodeableConcept, 
		Subject : ResourceReference, 
		Action : list(CodeableConcept), 
		ActionReason : list(CodeableConcept), 
		Actor : list(Contract.TermActorComponent), 
		TextElement : FHIRString, 
		Text : String, 
		ValuedItem : list(Contract.TermValuedItemComponent), 
		Group : list(Contract.TermComponent)
	}
};
create type Contract.FriendlyLanguageComponent from class "Hl7.Fhir.Model.Contract+FriendlyLanguageComponent" is { BackboneElement };
alter type Contract.FriendlyLanguageComponent
{
	create representation Contract.FriendlyLanguageComponent
	{
		Content : Element
	}
};
create type Contract.LegalLanguageComponent from class "Hl7.Fhir.Model.Contract+LegalLanguageComponent" is { BackboneElement };
alter type Contract.LegalLanguageComponent
{
	create representation Contract.LegalLanguageComponent
	{
		Content : Element
	}
};
create type Contract.ComputableLanguageComponent from class "Hl7.Fhir.Model.Contract+ComputableLanguageComponent" is { BackboneElement };
alter type Contract.ComputableLanguageComponent
{
	create representation Contract.ComputableLanguageComponent
	{
		Content : Element
	}
};
alter type Contract
{
	create representation Contract
	{
		Identifier : Identifier, 
		IssuedElement : FHIRDateTime, 
		Issued : String, 
		Applies : Period, 
		Subject : list(ResourceReference), 
		Authority : list(ResourceReference), 
		Domain : list(ResourceReference), 
		Type : CodeableConcept, 
		SubType : list(CodeableConcept), 
		Action : list(CodeableConcept), 
		ActionReason : list(CodeableConcept), 
		Actor : list(Contract.ActorComponent), 
		ValuedItem : list(Contract.ValuedItemComponent), 
		Signer : list(Contract.SignatoryComponent), 
		Term : list(Contract.TermComponent), 
		Binding : Element, 
		Friendly : list(Contract.FriendlyLanguageComponent), 
		Legal : list(Contract.LegalLanguageComponent), 
		Rule : list(Contract.ComputableLanguageComponent)
	}
};
create type Contraindication from class "Hl7.Fhir.Model.Contraindication" is { DomainResource };
create type Contraindication.ContraindicationMitigationComponent from class "Hl7.Fhir.Model.Contraindication+ContraindicationMitigationComponent" is { BackboneElement };
alter type Contraindication.ContraindicationMitigationComponent
{
	create representation Contraindication.ContraindicationMitigationComponent
	{
		Action : CodeableConcept, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Author : ResourceReference
	}
};
alter type Contraindication
{
	create representation Contraindication
	{
		Patient : ResourceReference, 
		Category : CodeableConcept, 
		SeverityElement : Code, 
		Severity : String, 
		Implicated : list(ResourceReference), 
		DetailElement : FHIRString, 
		Detail : String, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Author : ResourceReference, 
		Identifier : Identifier, 
		ReferenceElement : FHIRUri, 
		Reference : String, 
		Mitigation : list(Contraindication.ContraindicationMitigationComponent)
	}
};
create type Coverage from class "Hl7.Fhir.Model.Coverage" is { DomainResource };
alter type Coverage
{
	create representation Coverage
	{
		Issuer : ResourceReference, 
		Bin : Identifier, 
		Period : Period, 
		Type : Coding, 
		SubscriberId : Identifier, 
		Identifier : list(Identifier), 
		GroupElement : FHIRString, 
		Group : String, 
		PlanElement : FHIRString, 
		Plan : String, 
		SubPlanElement : FHIRString, 
		SubPlan : String, 
		DependentElement : PositiveInt, 
		Dependent : Integer, 
		SequenceElement : PositiveInt, 
		Sequence : Integer, 
		Subscriber : ResourceReference, 
		Network : Identifier, 
		Contract : list(ResourceReference)
	}
};
create type DataElement from class "Hl7.Fhir.Model.DataElement" is { DomainResource };
create type DataElement.DataElementContactComponent from class "Hl7.Fhir.Model.DataElement+DataElementContactComponent" is { BackboneElement };
alter type DataElement.DataElementContactComponent
{
	create representation DataElement.DataElementContactComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Telecom : list(ContactPoint)
	}
};
create type DataElement.DataElementMappingComponent from class "Hl7.Fhir.Model.DataElement+DataElementMappingComponent" is { BackboneElement };
alter type DataElement.DataElementMappingComponent
{
	create representation DataElement.DataElementMappingComponent
	{
		IdentityElement : Id, 
		Identity : String, 
		UriElement : FHIRUri, 
		Uri : String, 
		NameElement : FHIRString, 
		Name : String, 
		CommentsElement : FHIRString, 
		Comments : String
	}
};
create type ElementDefinition from class "Hl7.Fhir.Model.ElementDefinition" is { Element };
create type ElementDefinition.ElementDefinitionSlicingComponent from class "Hl7.Fhir.Model.ElementDefinition+ElementDefinitionSlicingComponent" is { BackboneElement };
alter type ElementDefinition.ElementDefinitionSlicingComponent
{
	create representation ElementDefinition.ElementDefinitionSlicingComponent
	{
		DiscriminatorElement : list(FHIRString), 
		Discriminator : list(String), 
		DescriptionElement : FHIRString, 
		Description : String, 
		OrderedElement : FHIRBoolean, 
		Ordered : Boolean, 
		RulesElement : Code, 
		Rules : String
	}
};
create type FHIRInteger from class "Hl7.Fhir.Model.Integer" is { Element };
alter type FHIRInteger
{
	create representation FHIRInteger
	{
		Value : Integer
	}
};
create type ElementDefinition.TypeRefComponent from class "Hl7.Fhir.Model.ElementDefinition+TypeRefComponent" is { BackboneElement };
alter type ElementDefinition.TypeRefComponent
{
	create representation ElementDefinition.TypeRefComponent
	{
		CodeElement : Code, 
		Code : String, 
		ProfileElement : FHIRUri, 
		Profile : String, 
		AggregationElement : list(Code), 
		Aggregation : list(String)
	}
};
create type ElementDefinition.ElementDefinitionConstraintComponent from class "Hl7.Fhir.Model.ElementDefinition+ElementDefinitionConstraintComponent" is { BackboneElement };
alter type ElementDefinition.ElementDefinitionConstraintComponent
{
	create representation ElementDefinition.ElementDefinitionConstraintComponent
	{
		KeyElement : Id, 
		Key : String, 
		NameElement : FHIRString, 
		Name : String, 
		SeverityElement : Code, 
		Severity : String, 
		HumanElement : FHIRString, 
		Human : String, 
		XpathElement : FHIRString, 
		Xpath : String
	}
};
create type ElementDefinition.ElementDefinitionBindingComponent from class "Hl7.Fhir.Model.ElementDefinition+ElementDefinitionBindingComponent" is { BackboneElement };
alter type ElementDefinition.ElementDefinitionBindingComponent
{
	create representation ElementDefinition.ElementDefinitionBindingComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		StrengthElement : Code, 
		Strength : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		ValueSet : Element
	}
};
create type ElementDefinition.ElementDefinitionMappingComponent from class "Hl7.Fhir.Model.ElementDefinition+ElementDefinitionMappingComponent" is { BackboneElement };
alter type ElementDefinition.ElementDefinitionMappingComponent
{
	create representation ElementDefinition.ElementDefinitionMappingComponent
	{
		IdentityElement : Id, 
		Identity : String, 
		LanguageElement : Code, 
		Language : String, 
		MapElement : FHIRString, 
		Map : String
	}
};
alter type ElementDefinition
{
	create representation ElementDefinition
	{
		PathElement : FHIRString, 
		Path : String, 
		RepresentationElement : list(Code), 
		Representation : list(String), 
		NameElement : FHIRString, 
		Name : String, 
		LabelElement : FHIRString, 
		Label : String, 
		Code : list(Coding), 
		Slicing : ElementDefinition.ElementDefinitionSlicingComponent, 
		ShortElement : FHIRString, 
		Short : String, 
		DefinitionElement : FHIRString, 
		Definition : String, 
		CommentsElement : FHIRString, 
		Comments : String, 
		RequirementsElement : FHIRString, 
		Requirements : String, 
		AliasElement : list(FHIRString), 
		Alias : list(String), 
		MinElement : FHIRInteger, 
		Min : Integer, 
		MaxElement : FHIRString, 
		Max : String, 
		Type : list(ElementDefinition.TypeRefComponent), 
		NameReferenceElement : FHIRString, 
		NameReference : String, 
		DefaultValue : Element, 
		MeaningWhenMissingElement : FHIRString, 
		MeaningWhenMissing : String, 
		Fixed : Element, 
		Pattern : Element, 
		Example : Element, 
		MaxLengthElement : FHIRInteger, 
		MaxLength : Integer, 
		ConditionElement : list(Id), 
		Condition : list(String), 
		Constraint : list(ElementDefinition.ElementDefinitionConstraintComponent), 
		MustSupportElement : FHIRBoolean, 
		MustSupport : Boolean, 
		IsModifierElement : FHIRBoolean, 
		IsModifier : Boolean, 
		IsSummaryElement : FHIRBoolean, 
		IsSummary : Boolean, 
		Binding : ElementDefinition.ElementDefinitionBindingComponent, 
		Mapping : list(ElementDefinition.ElementDefinitionMappingComponent)
	}
};
alter type DataElement
{
	create representation DataElement
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : Identifier, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		UseContext : list(CodeableConcept), 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		StatusElement : Code, 
		Status : String, 
		DateElement : FHIRDateTime, 
		Date : String, 
		CopyrightElement : FHIRString, 
		Copyright : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(DataElement.DataElementContactComponent), 
		SpecificityElement : Code, 
		Specificity : String, 
		Mapping : list(DataElement.DataElementMappingComponent), 
		Element : list(ElementDefinition), 
		Description : String
	}
};
create type DeviceComponent from class "Hl7.Fhir.Model.DeviceComponent" is { DomainResource };
create type DeviceComponent.DeviceComponentProductionSpecificationComponent from class "Hl7.Fhir.Model.DeviceComponent+DeviceComponentProductionSpecificationComponent" is { BackboneElement };
alter type DeviceComponent.DeviceComponentProductionSpecificationComponent
{
	create representation DeviceComponent.DeviceComponentProductionSpecificationComponent
	{
		SpecType : CodeableConcept, 
		ComponentId : Identifier, 
		ProductionSpecElement : FHIRString, 
		ProductionSpec : String
	}
};
alter type DeviceComponent
{
	create representation DeviceComponent
	{
		Type : CodeableConcept, 
		Identifier : Identifier, 
		LastSystemChangeElement : Instant, 
		LastSystemChange : DateTime, 
		Source : ResourceReference, 
		Parent : ResourceReference, 
		OperationalStatus : list(CodeableConcept), 
		ParameterGroup : CodeableConcept, 
		MeasurementPrincipleElement : Code, 
		MeasurementPrinciple : String, 
		ProductionSpecification : list(DeviceComponent.DeviceComponentProductionSpecificationComponent), 
		LanguageCode : CodeableConcept
	}
};
create type DeviceMetric from class "Hl7.Fhir.Model.DeviceMetric" is { DomainResource };
create type Timing from class "Hl7.Fhir.Model.Timing" is { Element };
create type Timing.TimingRepeatComponent from class "Hl7.Fhir.Model.Timing+TimingRepeatComponent" is { BackboneElement };
alter type Timing.TimingRepeatComponent
{
	create representation Timing.TimingRepeatComponent
	{
		Bounds : Period, 
		CountElement : FHIRInteger, 
		Count : Integer, 
		DurationElement : FHIRDecimal, 
		Duration : Decimal, 
		DurationUnitsElement : Code, 
		DurationUnits : String, 
		FrequencyElement : FHIRInteger, 
		Frequency : Integer, 
		FrequencyMaxElement : FHIRInteger, 
		FrequencyMax : Integer, 
		PeriodElement : FHIRDecimal, 
		Period : Decimal, 
		PeriodMaxElement : FHIRDecimal, 
		PeriodMax : Decimal, 
		PeriodUnitsElement : Code, 
		PeriodUnits : String, 
		WhenElement : Code, 
		When : String
	}
};
alter type Timing
{
	create representation Timing
	{
		EventElement : list(FHIRDateTime), 
		Event : list(String), 
		Repeat : Timing.TimingRepeatComponent, 
		Code : CodeableConcept
	}
};
create type DeviceMetric.DeviceMetricCalibrationComponent from class "Hl7.Fhir.Model.DeviceMetric+DeviceMetricCalibrationComponent" is { BackboneElement };
alter type DeviceMetric.DeviceMetricCalibrationComponent
{
	create representation DeviceMetric.DeviceMetricCalibrationComponent
	{
		TypeElement : Code, 
		Type : String, 
		StateElement : Code, 
		State : String, 
		TimeElement : Instant, 
		Time : DateTime
	}
};
alter type DeviceMetric
{
	create representation DeviceMetric
	{
		Type : CodeableConcept, 
		Identifier : Identifier, 
		Unit : CodeableConcept, 
		Source : ResourceReference, 
		Parent : ResourceReference, 
		OperationalStatusElement : Code, 
		OperationalStatus : String, 
		ColorElement : Code, 
		Color : String, 
		CategoryElement : Code, 
		Category : String, 
		MeasurementPeriod : Timing, 
		Calibration : list(DeviceMetric.DeviceMetricCalibrationComponent)
	}
};
create type DeviceUseRequest from class "Hl7.Fhir.Model.DeviceUseRequest" is { DomainResource };
alter type DeviceUseRequest
{
	create representation DeviceUseRequest
	{
		BodySite : Element, 
		StatusElement : Code, 
		Status : String, 
		Device : ResourceReference, 
		Encounter : ResourceReference, 
		Identifier : list(Identifier), 
		Indication : list(CodeableConcept), 
		NotesElement : list(FHIRString), 
		Notes : list(String), 
		PrnReason : list(CodeableConcept), 
		OrderedOnElement : FHIRDateTime, 
		OrderedOn : String, 
		RecordedOnElement : FHIRDateTime, 
		RecordedOn : String, 
		Subject : ResourceReference, 
		Timing : Element, 
		PriorityElement : Code, 
		Priority : String
	}
};
create type DeviceUseStatement from class "Hl7.Fhir.Model.DeviceUseStatement" is { DomainResource };
alter type DeviceUseStatement
{
	create representation DeviceUseStatement
	{
		BodySite : Element, 
		WhenUsed : Period, 
		Device : ResourceReference, 
		Identifier : list(Identifier), 
		Indication : list(CodeableConcept), 
		NotesElement : list(FHIRString), 
		Notes : list(String), 
		RecordedOnElement : FHIRDateTime, 
		RecordedOn : String, 
		Subject : ResourceReference, 
		Timing : Element
	}
};
create type EligibilityRequest from class "Hl7.Fhir.Model.EligibilityRequest" is { DomainResource };
alter type EligibilityRequest
{
	create representation EligibilityRequest
	{
		Identifier : list(Identifier), 
		Ruleset : Coding, 
		OriginalRuleset : Coding, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Target : ResourceReference, 
		Provider : ResourceReference, 
		Organization : ResourceReference
	}
};
create type EligibilityResponse from class "Hl7.Fhir.Model.EligibilityResponse" is { DomainResource };
alter type EligibilityResponse
{
	create representation EligibilityResponse
	{
		Identifier : list(Identifier), 
		Request : ResourceReference, 
		OutcomeElement : Code, 
		Outcome : String, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		Ruleset : Coding, 
		OriginalRuleset : Coding, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Organization : ResourceReference, 
		RequestProvider : ResourceReference, 
		RequestOrganization : ResourceReference
	}
};
create type EnrollmentRequest from class "Hl7.Fhir.Model.EnrollmentRequest" is { DomainResource };
alter type EnrollmentRequest
{
	create representation EnrollmentRequest
	{
		Identifier : list(Identifier), 
		Ruleset : Coding, 
		OriginalRuleset : Coding, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Target : ResourceReference, 
		Provider : ResourceReference, 
		Organization : ResourceReference, 
		Subject : ResourceReference, 
		Coverage : ResourceReference, 
		Relationship : Coding
	}
};
create type EnrollmentResponse from class "Hl7.Fhir.Model.EnrollmentResponse" is { DomainResource };
alter type EnrollmentResponse
{
	create representation EnrollmentResponse
	{
		Identifier : list(Identifier), 
		Request : ResourceReference, 
		OutcomeElement : Code, 
		Outcome : String, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		Ruleset : Coding, 
		OriginalRuleset : Coding, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Organization : ResourceReference, 
		RequestProvider : ResourceReference, 
		RequestOrganization : ResourceReference
	}
};
create type EpisodeOfCare from class "Hl7.Fhir.Model.EpisodeOfCare" is { DomainResource };
create type EpisodeOfCare.EpisodeOfCareStatusHistoryComponent from class "Hl7.Fhir.Model.EpisodeOfCare+EpisodeOfCareStatusHistoryComponent" is { BackboneElement };
alter type EpisodeOfCare.EpisodeOfCareStatusHistoryComponent
{
	create representation EpisodeOfCare.EpisodeOfCareStatusHistoryComponent
	{
		StatusElement : Code, 
		Status : String, 
		Period : Period
	}
};
create type EpisodeOfCare.EpisodeOfCareCareTeamComponent from class "Hl7.Fhir.Model.EpisodeOfCare+EpisodeOfCareCareTeamComponent" is { BackboneElement };
alter type EpisodeOfCare.EpisodeOfCareCareTeamComponent
{
	create representation EpisodeOfCare.EpisodeOfCareCareTeamComponent
	{
		Member : ResourceReference, 
		Role : list(CodeableConcept), 
		Period : Period
	}
};
alter type EpisodeOfCare
{
	create representation EpisodeOfCare
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		StatusHistory : list(EpisodeOfCare.EpisodeOfCareStatusHistoryComponent), 
		Type : list(CodeableConcept), 
		Patient : ResourceReference, 
		ManagingOrganization : ResourceReference, 
		Period : Period, 
		Condition : list(ResourceReference), 
		ReferralRequest : list(ResourceReference), 
		CareManager : ResourceReference, 
		CareTeam : list(EpisodeOfCare.EpisodeOfCareCareTeamComponent)
	}
};
create type ExplanationOfBenefit from class "Hl7.Fhir.Model.ExplanationOfBenefit" is { DomainResource };
alter type ExplanationOfBenefit
{
	create representation ExplanationOfBenefit
	{
		Identifier : list(Identifier), 
		Request : ResourceReference, 
		OutcomeElement : Code, 
		Outcome : String, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		Ruleset : Coding, 
		OriginalRuleset : Coding, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Organization : ResourceReference, 
		RequestProvider : ResourceReference, 
		RequestOrganization : ResourceReference
	}
};
create type FamilyMemberHistory from class "Hl7.Fhir.Model.FamilyMemberHistory" is { DomainResource };
create type FamilyMemberHistory.FamilyMemberHistoryConditionComponent from class "Hl7.Fhir.Model.FamilyMemberHistory+FamilyMemberHistoryConditionComponent" is { BackboneElement };
alter type FamilyMemberHistory.FamilyMemberHistoryConditionComponent
{
	create representation FamilyMemberHistory.FamilyMemberHistoryConditionComponent
	{
		Type : CodeableConcept, 
		Outcome : CodeableConcept, 
		Onset : Element, 
		NoteElement : FHIRString, 
		Note : String
	}
};
alter type FamilyMemberHistory
{
	create representation FamilyMemberHistory
	{
		Identifier : list(Identifier), 
		Patient : ResourceReference, 
		DateElement : FHIRDateTime, 
		Date : String, 
		NameElement : FHIRString, 
		Name : String, 
		Relationship : CodeableConcept, 
		GenderElement : Code, 
		Gender : String, 
		Born : Element, 
		Age : Element, 
		Deceased : Element, 
		NoteElement : FHIRString, 
		Note : String, 
		Condition : list(FamilyMemberHistory.FamilyMemberHistoryConditionComponent)
	}
};
create type Flag from class "Hl7.Fhir.Model.Flag" is { DomainResource };
alter type Flag
{
	create representation Flag
	{
		Identifier : list(Identifier), 
		Category : CodeableConcept, 
		StatusElement : Code, 
		Status : String, 
		Period : Period, 
		Patient : ResourceReference, 
		Author : ResourceReference, 
		Code : CodeableConcept
	}
};
create type Goal from class "Hl7.Fhir.Model.Goal" is { DomainResource };
create type Goal.GoalOutcomeComponent from class "Hl7.Fhir.Model.Goal+GoalOutcomeComponent" is { BackboneElement };
alter type Goal.GoalOutcomeComponent
{
	create representation Goal.GoalOutcomeComponent
	{
		Result : Element
	}
};
alter type Goal
{
	create representation Goal
	{
		Identifier : list(Identifier), 
		Patient : ResourceReference, 
		TargetDateElement : FHIRDate, 
		TargetDate : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		StatusElement : Code, 
		Status : String, 
		StatusDateElement : FHIRDate, 
		StatusDate : String, 
		Author : ResourceReference, 
		Priority : CodeableConcept, 
		Concern : list(ResourceReference), 
		NotesElement : FHIRString, 
		Notes : String, 
		Outcome : list(Goal.GoalOutcomeComponent)
	}
};
create type HealthcareService from class "Hl7.Fhir.Model.HealthcareService" is { DomainResource };
create type HealthcareService.ServiceTypeComponent from class "Hl7.Fhir.Model.HealthcareService+ServiceTypeComponent" is { BackboneElement };
alter type HealthcareService.ServiceTypeComponent
{
	create representation HealthcareService.ServiceTypeComponent
	{
		Type : CodeableConcept, 
		Specialty : list(CodeableConcept)
	}
};
create type HealthcareService.HealthcareServiceAvailableTimeComponent from class "Hl7.Fhir.Model.HealthcareService+HealthcareServiceAvailableTimeComponent" is { BackboneElement };
create type FHIRTime from class "Hl7.Fhir.Model.Time" is { Element };
alter type FHIRTime
{
	create representation FHIRTime
	{
		Value : String
	}
};
alter type HealthcareService.HealthcareServiceAvailableTimeComponent
{
	create representation HealthcareService.HealthcareServiceAvailableTimeComponent
	{
		DaysOfWeekElement : list(Code), 
		DaysOfWeek : list(String), 
		AllDayElement : FHIRBoolean, 
		AllDay : Boolean, 
		AvailableStartTimeElement : FHIRTime, 
		AvailableStartTime : String, 
		AvailableEndTimeElement : FHIRTime, 
		AvailableEndTime : String
	}
};
create type HealthcareService.HealthcareServiceNotAvailableComponent from class "Hl7.Fhir.Model.HealthcareService+HealthcareServiceNotAvailableComponent" is { BackboneElement };
alter type HealthcareService.HealthcareServiceNotAvailableComponent
{
	create representation HealthcareService.HealthcareServiceNotAvailableComponent
	{
		DescriptionElement : FHIRString, 
		Description : String, 
		During : Period
	}
};
alter type HealthcareService
{
	create representation HealthcareService
	{
		Identifier : list(Identifier), 
		ProvidedBy : ResourceReference, 
		Location : ResourceReference, 
		ServiceCategory : CodeableConcept, 
		ServiceType : list(HealthcareService.ServiceTypeComponent), 
		ServiceNameElement : FHIRString, 
		ServiceName : String, 
		CommentElement : FHIRString, 
		Comment : String, 
		ExtraDetailsElement : FHIRString, 
		ExtraDetails : String, 
		Photo : Attachment, 
		Telecom : list(ContactPoint), 
		CoverageArea : list(ResourceReference), 
		ServiceProvisionCode : list(CodeableConcept), 
		Eligibility : CodeableConcept, 
		EligibilityNoteElement : FHIRString, 
		EligibilityNote : String, 
		ProgramNameElement : list(FHIRString), 
		ProgramName : list(String), 
		Characteristic : list(CodeableConcept), 
		ReferralMethod_ : list(CodeableConcept), 
		PublicKeyElement : FHIRString, 
		PublicKey : String, 
		AppointmentRequiredElement : FHIRBoolean, 
		AppointmentRequired : Boolean, 
		AvailableTime : list(HealthcareService.HealthcareServiceAvailableTimeComponent), 
		NotAvailable : list(HealthcareService.HealthcareServiceNotAvailableComponent), 
		AvailabilityExceptionsElement : FHIRString, 
		AvailabilityExceptions : String
	}
};
create type ImagingObjectSelection from class "Hl7.Fhir.Model.ImagingObjectSelection" is { DomainResource };
create type Oid from class "Hl7.Fhir.Model.Oid" is { Element };
alter type Oid
{
	create representation Oid
	{
		Value : String
	}
};
create type ImagingObjectSelection.StudyComponent from class "Hl7.Fhir.Model.ImagingObjectSelection+StudyComponent" is { BackboneElement };
create type ImagingObjectSelection.SeriesComponent from class "Hl7.Fhir.Model.ImagingObjectSelection+SeriesComponent" is { BackboneElement };
create type ImagingObjectSelection.InstanceComponent from class "Hl7.Fhir.Model.ImagingObjectSelection+InstanceComponent" is { BackboneElement };
create type ImagingObjectSelection.FramesComponent from class "Hl7.Fhir.Model.ImagingObjectSelection+FramesComponent" is { BackboneElement };
alter type ImagingObjectSelection.FramesComponent
{
	create representation ImagingObjectSelection.FramesComponent
	{
		FrameNumbersElement : list(UnsignedInt), 
		FrameNumbers : list(Integer), 
		UrlElement : FHIRUri, 
		Url : String
	}
};
alter type ImagingObjectSelection.InstanceComponent
{
	create representation ImagingObjectSelection.InstanceComponent
	{
		SopClassElement : Oid, 
		SopClass : String, 
		UidElement : Oid, 
		Uid : String, 
		UrlElement : FHIRUri, 
		Url : String, 
		Frames : list(ImagingObjectSelection.FramesComponent)
	}
};
alter type ImagingObjectSelection.SeriesComponent
{
	create representation ImagingObjectSelection.SeriesComponent
	{
		UidElement : Oid, 
		Uid : String, 
		UrlElement : FHIRUri, 
		Url : String, 
		Instance : list(ImagingObjectSelection.InstanceComponent)
	}
};
alter type ImagingObjectSelection.StudyComponent
{
	create representation ImagingObjectSelection.StudyComponent
	{
		UidElement : Oid, 
		Uid : String, 
		UrlElement : FHIRUri, 
		Url : String, 
		Series : list(ImagingObjectSelection.SeriesComponent)
	}
};
alter type ImagingObjectSelection
{
	create representation ImagingObjectSelection
	{
		UidElement : Oid, 
		Uid : String, 
		Patient : ResourceReference, 
		Title : CodeableConcept, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Author : ResourceReference, 
		AuthoringTimeElement : FHIRDateTime, 
		AuthoringTime : String, 
		Study : list(ImagingObjectSelection.StudyComponent)
	}
};
create type NamingSystem from class "Hl7.Fhir.Model.NamingSystem" is { DomainResource };
create type NamingSystem.NamingSystemUniqueIdComponent from class "Hl7.Fhir.Model.NamingSystem+NamingSystemUniqueIdComponent" is { BackboneElement };
alter type NamingSystem.NamingSystemUniqueIdComponent
{
	create representation NamingSystem.NamingSystemUniqueIdComponent
	{
		TypeElement : Code, 
		Type : String, 
		ValueElement : FHIRString, 
		Value : String, 
		PreferredElement : FHIRBoolean, 
		Preferred : Boolean, 
		Period : Period
	}
};
create type NamingSystem.NamingSystemContactComponent from class "Hl7.Fhir.Model.NamingSystem+NamingSystemContactComponent" is { BackboneElement };
alter type NamingSystem.NamingSystemContactComponent
{
	create representation NamingSystem.NamingSystemContactComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Telecom : list(ContactPoint)
	}
};
alter type NamingSystem
{
	create representation NamingSystem
	{
		TypeElement : Code, 
		Type : String, 
		NameElement : FHIRString, 
		Name : String, 
		DateElement : FHIRDateTime, 
		Date : String, 
		StatusElement : Code, 
		Status : String, 
		CountryElement : Code, 
		Country : String, 
		Category : CodeableConcept, 
		ResponsibleElement : FHIRString, 
		Responsible : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		UsageElement : FHIRString, 
		Usage : String, 
		UniqueId : list(NamingSystem.NamingSystemUniqueIdComponent), 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(NamingSystem.NamingSystemContactComponent), 
		ReplacedBy : ResourceReference, 
		Experimental : Boolean, 
		Url : String
	}
};
create type NutritionOrder from class "Hl7.Fhir.Model.NutritionOrder" is { DomainResource };
create type NutritionOrder.NutritionOrderOralDietComponent from class "Hl7.Fhir.Model.NutritionOrder+NutritionOrderOralDietComponent" is { BackboneElement };
create type NutritionOrder.NutritionOrderOralDietNutrientComponent from class "Hl7.Fhir.Model.NutritionOrder+NutritionOrderOralDietNutrientComponent" is { BackboneElement };
alter type NutritionOrder.NutritionOrderOralDietNutrientComponent
{
	create representation NutritionOrder.NutritionOrderOralDietNutrientComponent
	{
		Modifier : CodeableConcept, 
		Amount : Quantity
	}
};
create type NutritionOrder.NutritionOrderOralDietTextureComponent from class "Hl7.Fhir.Model.NutritionOrder+NutritionOrderOralDietTextureComponent" is { BackboneElement };
alter type NutritionOrder.NutritionOrderOralDietTextureComponent
{
	create representation NutritionOrder.NutritionOrderOralDietTextureComponent
	{
		Modifier : CodeableConcept, 
		FoodType : CodeableConcept
	}
};
alter type NutritionOrder.NutritionOrderOralDietComponent
{
	create representation NutritionOrder.NutritionOrderOralDietComponent
	{
		Type : list(CodeableConcept), 
		Scheduled : Timing, 
		Nutrient : list(NutritionOrder.NutritionOrderOralDietNutrientComponent), 
		Texture : list(NutritionOrder.NutritionOrderOralDietTextureComponent), 
		FluidConsistencyType : list(CodeableConcept), 
		InstructionElement : FHIRString, 
		Instruction : String
	}
};
create type NutritionOrder.NutritionOrderSupplementComponent from class "Hl7.Fhir.Model.NutritionOrder+NutritionOrderSupplementComponent" is { BackboneElement };
alter type NutritionOrder.NutritionOrderSupplementComponent
{
	create representation NutritionOrder.NutritionOrderSupplementComponent
	{
		Type : CodeableConcept, 
		ProductNameElement : FHIRString, 
		ProductName : String, 
		Scheduled : Timing, 
		Quantity : Quantity, 
		InstructionElement : FHIRString, 
		Instruction : String
	}
};
create type NutritionOrder.NutritionOrderEnteralFormulaComponent from class "Hl7.Fhir.Model.NutritionOrder+NutritionOrderEnteralFormulaComponent" is { BackboneElement };
create type Ratio from class "Hl7.Fhir.Model.Ratio" is { Element };
alter type Ratio
{
	create representation Ratio
	{
		Numerator : Quantity, 
		Denominator : Quantity
	}
};
alter type NutritionOrder.NutritionOrderEnteralFormulaComponent
{
	create representation NutritionOrder.NutritionOrderEnteralFormulaComponent
	{
		AdministrationInstructionsElement : FHIRString, 
		AdministrationInstructions : String, 
		BaseFormulaType : CodeableConcept, 
		BaseFormulaProductNameElement : FHIRString, 
		BaseFormulaProductName : String, 
		Scheduled : Timing, 
		AdditiveType : CodeableConcept, 
		AdditiveProductNameElement : FHIRString, 
		AdditiveProductName : String, 
		CaloricDensity : Quantity, 
		RouteofAdministration : CodeableConcept, 
		Quantity : Quantity, 
		Rate : Ratio, 
		RateAdjustment : Quantity, 
		MaxVolumeToDeliver : Quantity
	}
};
alter type NutritionOrder
{
	create representation NutritionOrder
	{
		Patient : ResourceReference, 
		Orderer : ResourceReference, 
		Identifier : list(Identifier), 
		Encounter : ResourceReference, 
		DateTimeElement : FHIRDateTime, 
		DateTime : String, 
		StatusElement : Code, 
		Status : String, 
		AllergyIntolerance : list(ResourceReference), 
		FoodPreferenceModifier : list(CodeableConcept), 
		ExcludeFoodModifier : list(CodeableConcept), 
		OralDiet : NutritionOrder.NutritionOrderOralDietComponent, 
		Supplement : list(NutritionOrder.NutritionOrderSupplementComponent), 
		EnteralFormula : NutritionOrder.NutritionOrderEnteralFormulaComponent
	}
};
create type OperationDefinition from class "Hl7.Fhir.Model.OperationDefinition" is { DomainResource };
create type OperationDefinition.OperationDefinitionContactComponent from class "Hl7.Fhir.Model.OperationDefinition+OperationDefinitionContactComponent" is { BackboneElement };
alter type OperationDefinition.OperationDefinitionContactComponent
{
	create representation OperationDefinition.OperationDefinitionContactComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Telecom : list(ContactPoint)
	}
};
create type OperationDefinition.OperationDefinitionParameterComponent from class "Hl7.Fhir.Model.OperationDefinition+OperationDefinitionParameterComponent" is { BackboneElement };
create type OperationDefinition.OperationDefinitionParameterPartComponent from class "Hl7.Fhir.Model.OperationDefinition+OperationDefinitionParameterPartComponent" is { BackboneElement };
alter type OperationDefinition.OperationDefinitionParameterPartComponent
{
	create representation OperationDefinition.OperationDefinitionParameterPartComponent
	{
		NameElement : Code, 
		Name : String, 
		MinElement : UnsignedInt, 
		Min : Integer, 
		MaxElement : FHIRString, 
		Max : String, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		TypeElement : Code, 
		Type : String, 
		Profile : ResourceReference
	}
};
alter type OperationDefinition.OperationDefinitionParameterComponent
{
	create representation OperationDefinition.OperationDefinitionParameterComponent
	{
		NameElement : Code, 
		Name : String, 
		UseElement : Code, 
		Use : String, 
		MinElement : FHIRInteger, 
		Min : Integer, 
		MaxElement : FHIRString, 
		Max : String, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		TypeElement : Code, 
		Type : String, 
		Profile : ResourceReference, 
		Part : list(OperationDefinition.OperationDefinitionParameterPartComponent)
	}
};
alter type OperationDefinition
{
	create representation OperationDefinition
	{
		UrlElement : FHIRUri, 
		Url : String, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(OperationDefinition.OperationDefinitionContactComponent), 
		DescriptionElement : FHIRString, 
		Description : String, 
		RequirementsElement : FHIRString, 
		Requirements : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		KindElement : Code, 
		Kind : String, 
		IdempotentElement : FHIRBoolean, 
		Idempotent : Boolean, 
		CodeElement : Code, 
		Code : String, 
		NotesElement : FHIRString, 
		Notes : String, 
		Base : ResourceReference, 
		SystemElement : FHIRBoolean, 
		System : Boolean, 
		TypeElement : list(Code), 
		Type : list(String), 
		InstanceElement : FHIRBoolean, 
		Instance : Boolean, 
		Parameter : list(OperationDefinition.OperationDefinitionParameterComponent)
	}
};
create type PaymentNotice from class "Hl7.Fhir.Model.PaymentNotice" is { DomainResource };
alter type PaymentNotice
{
	create representation PaymentNotice
	{
		Identifier : list(Identifier), 
		Ruleset : Coding, 
		OriginalRuleset : Coding, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Target : ResourceReference, 
		Provider : ResourceReference, 
		Organization : ResourceReference, 
		Request : ResourceReference, 
		Response : ResourceReference, 
		PaymentStatus : Coding
	}
};
create type PaymentReconciliation from class "Hl7.Fhir.Model.PaymentReconciliation" is { DomainResource };
create type PaymentReconciliation.DetailsComponent from class "Hl7.Fhir.Model.PaymentReconciliation+DetailsComponent" is { BackboneElement };
alter type PaymentReconciliation.DetailsComponent
{
	create representation PaymentReconciliation.DetailsComponent
	{
		Type : Coding, 
		Request : ResourceReference, 
		Responce : ResourceReference, 
		Submitter : ResourceReference, 
		Payee : ResourceReference, 
		DateElement : FHIRDate, 
		Date : String, 
		Amount : Money
	}
};
create type PaymentReconciliation.NotesComponent from class "Hl7.Fhir.Model.PaymentReconciliation+NotesComponent" is { BackboneElement };
alter type PaymentReconciliation.NotesComponent
{
	create representation PaymentReconciliation.NotesComponent
	{
		Type : Coding, 
		TextElement : FHIRString, 
		Text : String
	}
};
alter type PaymentReconciliation
{
	create representation PaymentReconciliation
	{
		Identifier : list(Identifier), 
		Request : ResourceReference, 
		OutcomeElement : Code, 
		Outcome : String, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		Ruleset : Coding, 
		OriginalRuleset : Coding, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Period : Period, 
		Organization : ResourceReference, 
		RequestProvider : ResourceReference, 
		RequestOrganization : ResourceReference, 
		Detail : list(PaymentReconciliation.DetailsComponent), 
		Form : Coding, 
		Total : Money, 
		Note : list(PaymentReconciliation.NotesComponent)
	}
};
create type Person from class "Hl7.Fhir.Model.Person" is { DomainResource };
create type HumanName from class "Hl7.Fhir.Model.HumanName" is { Element };
alter type HumanName
{
	create representation HumanName
	{
		UseElement : Code, 
		Use : String, 
		TextElement : FHIRString, 
		Text : String, 
		FamilyElement : list(FHIRString), 
		Family : list(String), 
		GivenElement : list(FHIRString), 
		Given : list(String), 
		PrefixElement : list(FHIRString), 
		Prefix : list(String), 
		SuffixElement : list(FHIRString), 
		Suffix : list(String), 
		Period : Period
	}
};
create type Address from class "Hl7.Fhir.Model.Address" is { Element };
alter type Address
{
	create representation Address
	{
		UseElement : Code, 
		Use : String, 
		TextElement : FHIRString, 
		Text : String, 
		LineElement : list(FHIRString), 
		Line : list(String), 
		CityElement : FHIRString, 
		City : String, 
		StateElement : FHIRString, 
		State : String, 
		PostalCodeElement : FHIRString, 
		PostalCode : String, 
		CountryElement : FHIRString, 
		Country : String, 
		Period : Period
	}
};
create type Person.PersonLinkComponent from class "Hl7.Fhir.Model.Person+PersonLinkComponent" is { BackboneElement };
alter type Person.PersonLinkComponent
{
	create representation Person.PersonLinkComponent
	{
		Target : ResourceReference, 
		AssuranceElement : Code, 
		Assurance : String
	}
};
alter type Person
{
	create representation Person
	{
		Identifier : list(Identifier), 
		Name : list(HumanName), 
		Telecom : list(ContactPoint), 
		GenderElement : Code, 
		Gender : String, 
		BirthDateElement : FHIRDateTime, 
		BirthDate : String, 
		Address : list(Address), 
		Photo : Attachment, 
		ManagingOrganization : ResourceReference, 
		ActiveElement : FHIRBoolean, 
		Active : Boolean, 
		Link : list(Person.PersonLinkComponent)
	}
};
create type ProcedureRequest from class "Hl7.Fhir.Model.ProcedureRequest" is { DomainResource };
create type ProcedureRequest.ProcedureRequestBodySiteComponent from class "Hl7.Fhir.Model.ProcedureRequest+ProcedureRequestBodySiteComponent" is { BackboneElement };
alter type ProcedureRequest.ProcedureRequestBodySiteComponent
{
	create representation ProcedureRequest.ProcedureRequestBodySiteComponent
	{
		Site : Element
	}
};
alter type ProcedureRequest
{
	create representation ProcedureRequest
	{
		Identifier : list(Identifier), 
		Subject : ResourceReference, 
		Type : CodeableConcept, 
		BodySite : list(ProcedureRequest.ProcedureRequestBodySiteComponent), 
		Indication : list(CodeableConcept), 
		Timing : Element, 
		Encounter : ResourceReference, 
		Performer : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		NotesElement : list(FHIRString), 
		Notes : list(String), 
		AsNeeded : Element, 
		OrderedOnElement : FHIRDateTime, 
		OrderedOn : String, 
		Orderer : ResourceReference, 
		PriorityElement : Code, 
		Priority : String
	}
};
create type ProcessRequest from class "Hl7.Fhir.Model.ProcessRequest" is { DomainResource };
create type ProcessRequest.ItemsComponent from class "Hl7.Fhir.Model.ProcessRequest+ItemsComponent" is { BackboneElement };
alter type ProcessRequest.ItemsComponent
{
	create representation ProcessRequest.ItemsComponent
	{
		SequenceLinkIdElement : FHIRInteger, 
		SequenceLinkId : Integer
	}
};
alter type ProcessRequest
{
	create representation ProcessRequest
	{
		ActionElement : Code, 
		Action : String, 
		Identifier : list(Identifier), 
		Ruleset : Coding, 
		OriginalRuleset : Coding, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Target : ResourceReference, 
		Provider : ResourceReference, 
		Organization : ResourceReference, 
		Request : ResourceReference, 
		Response : ResourceReference, 
		NullifyElement : FHIRBoolean, 
		Nullify : Boolean, 
		ReferenceElement : FHIRString, 
		Reference : String, 
		Item : list(ProcessRequest.ItemsComponent), 
		IncludeElement : list(FHIRString), 
		Include : list(String), 
		ExcludeElement : list(FHIRString), 
		Exclude : list(String), 
		Period : Period
	}
};
create type ProcessResponse from class "Hl7.Fhir.Model.ProcessResponse" is { DomainResource };
create type ProcessResponse.ProcessResponseNotesComponent from class "Hl7.Fhir.Model.ProcessResponse+ProcessResponseNotesComponent" is { BackboneElement };
alter type ProcessResponse.ProcessResponseNotesComponent
{
	create representation ProcessResponse.ProcessResponseNotesComponent
	{
		Type : Coding, 
		TextElement : FHIRString, 
		Text : String
	}
};
alter type ProcessResponse
{
	create representation ProcessResponse
	{
		Identifier : list(Identifier), 
		Request : ResourceReference, 
		Outcome : Coding, 
		DispositionElement : FHIRString, 
		Disposition : String, 
		Ruleset : Coding, 
		OriginalRuleset : Coding, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		Organization : ResourceReference, 
		RequestProvider : ResourceReference, 
		RequestOrganization : ResourceReference, 
		Form : Coding, 
		Notes : list(ProcessResponse.ProcessResponseNotesComponent), 
		Error : list(Coding)
	}
};
create type QuestionnaireAnswers from class "Hl7.Fhir.Model.QuestionnaireAnswers" is { DomainResource };
create type QuestionnaireAnswers.GroupComponent from class "Hl7.Fhir.Model.QuestionnaireAnswers+GroupComponent" is { BackboneElement };
create type QuestionnaireAnswers.QuestionComponent from class "Hl7.Fhir.Model.QuestionnaireAnswers+QuestionComponent" is { BackboneElement };
create type QuestionnaireAnswers.QuestionAnswerComponent from class "Hl7.Fhir.Model.QuestionnaireAnswers+QuestionAnswerComponent" is { BackboneElement };
alter type QuestionnaireAnswers.QuestionAnswerComponent
{
	create representation QuestionnaireAnswers.QuestionAnswerComponent
	{
		Value : Element
	}
};
alter type QuestionnaireAnswers.QuestionComponent
{
	create representation QuestionnaireAnswers.QuestionComponent
	{
		LinkIdElement : FHIRString, 
		LinkId : String, 
		TextElement : FHIRString, 
		Text : String, 
		Answer : list(QuestionnaireAnswers.QuestionAnswerComponent), 
		Group : list(QuestionnaireAnswers.GroupComponent)
	}
};
alter type QuestionnaireAnswers.GroupComponent
{
	create representation QuestionnaireAnswers.GroupComponent
	{
		LinkIdElement : FHIRString, 
		LinkId : String, 
		TitleElement : FHIRString, 
		Title : String, 
		TextElement : FHIRString, 
		Text : String, 
		Subject : ResourceReference, 
		Group : list(QuestionnaireAnswers.GroupComponent), 
		Question : list(QuestionnaireAnswers.QuestionComponent)
	}
};
alter type QuestionnaireAnswers
{
	create representation QuestionnaireAnswers
	{
		Identifier : Identifier, 
		Questionnaire : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		Subject : ResourceReference, 
		Author : ResourceReference, 
		AuthoredElement : FHIRDateTime, 
		Authored : String, 
		Source : ResourceReference, 
		Encounter : ResourceReference, 
		Group : QuestionnaireAnswers.GroupComponent
	}
};
create type ReferralRequest from class "Hl7.Fhir.Model.ReferralRequest" is { DomainResource };
alter type ReferralRequest
{
	create representation ReferralRequest
	{
		StatusElement : Code, 
		Status : String, 
		Identifier : list(Identifier), 
		Type : CodeableConcept, 
		Specialty : CodeableConcept, 
		Priority : CodeableConcept, 
		Patient : ResourceReference, 
		Requester : ResourceReference, 
		Recipient : list(ResourceReference), 
		Encounter : ResourceReference, 
		DateSentElement : FHIRDateTime, 
		DateSent : String, 
		Reason : CodeableConcept, 
		DescriptionElement : FHIRString, 
		Description : String, 
		ServiceRequested : list(CodeableConcept), 
		SupportingInformation : list(ResourceReference), 
		FulfillmentTime : Period
	}
};
create type RiskAssessment from class "Hl7.Fhir.Model.RiskAssessment" is { DomainResource };
create type RiskAssessment.RiskAssessmentPredictionComponent from class "Hl7.Fhir.Model.RiskAssessment+RiskAssessmentPredictionComponent" is { BackboneElement };
alter type RiskAssessment.RiskAssessmentPredictionComponent
{
	create representation RiskAssessment.RiskAssessmentPredictionComponent
	{
		Outcome : CodeableConcept, 
		Probability : Element, 
		RelativeRiskElement : FHIRDecimal, 
		RelativeRisk : Decimal, 
		When : Element, 
		RationaleElement : FHIRString, 
		Rationale : String
	}
};
alter type RiskAssessment
{
	create representation RiskAssessment
	{
		Subject : ResourceReference, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Condition : ResourceReference, 
		Performer : ResourceReference, 
		Identifier : Identifier, 
		Method : CodeableConcept, 
		Basis : list(ResourceReference), 
		Prediction : list(RiskAssessment.RiskAssessmentPredictionComponent), 
		MitigationElement : FHIRString, 
		Mitigation : String
	}
};
create type Schedule from class "Hl7.Fhir.Model.Schedule" is { DomainResource };
alter type Schedule
{
	create representation Schedule
	{
		Identifier : list(Identifier), 
		Type : list(CodeableConcept), 
		Actor : ResourceReference, 
		PlanningHorizon : Period, 
		CommentElement : FHIRString, 
		Comment : String
	}
};
create type SearchParameter from class "Hl7.Fhir.Model.SearchParameter" is { DomainResource };
create type SearchParameter.SearchParameterContactComponent from class "Hl7.Fhir.Model.SearchParameter+SearchParameterContactComponent" is { BackboneElement };
alter type SearchParameter.SearchParameterContactComponent
{
	create representation SearchParameter.SearchParameterContactComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Telecom : list(ContactPoint)
	}
};
alter type SearchParameter
{
	create representation SearchParameter
	{
		UrlElement : FHIRUri, 
		Url : String, 
		NameElement : FHIRString, 
		Name : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(SearchParameter.SearchParameterContactComponent), 
		RequirementsElement : FHIRString, 
		Requirements : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		BaseElement : Code, 
		Base : String, 
		TypeElement : Code, 
		Type : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		XpathElement : FHIRString, 
		Xpath : String, 
		TargetElement : list(Code), 
		Target : list(String)
	}
};
create type Signature from class "Hl7.Fhir.Model.Signature" is { Element };
alter type Signature
{
	create representation Signature
	{
		Type : list(Coding), 
		WhenElement : Instant, 
		When : DateTime, 
		Who : Element, 
		BlobElement : Base64Binary, 
		Blob : Binary
	}
};
create type Slot from class "Hl7.Fhir.Model.Slot" is { DomainResource };
alter type Slot
{
	create representation Slot
	{
		Identifier : list(Identifier), 
		Type : CodeableConcept, 
		Schedule : ResourceReference, 
		FreeBusyTypeElement : Code, 
		FreeBusyType : String, 
		StartElement : Instant, 
		Start : DateTime, 
		EndElement : Instant, 
		End : DateTime, 
		OverbookedElement : FHIRBoolean, 
		Overbooked : Boolean, 
		CommentElement : FHIRString, 
		Comment : String
	}
};
create type StructureDefinition from class "Hl7.Fhir.Model.StructureDefinition" is { DomainResource };
create type StructureDefinition.StructureDefinitionContactComponent from class "Hl7.Fhir.Model.StructureDefinition+StructureDefinitionContactComponent" is { BackboneElement };
alter type StructureDefinition.StructureDefinitionContactComponent
{
	create representation StructureDefinition.StructureDefinitionContactComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Telecom : list(ContactPoint)
	}
};
create type StructureDefinition.StructureDefinitionMappingComponent from class "Hl7.Fhir.Model.StructureDefinition+StructureDefinitionMappingComponent" is { BackboneElement };
alter type StructureDefinition.StructureDefinitionMappingComponent
{
	create representation StructureDefinition.StructureDefinitionMappingComponent
	{
		IdentityElement : Id, 
		Identity : String, 
		UriElement : FHIRUri, 
		Uri : String, 
		NameElement : FHIRString, 
		Name : String, 
		CommentsElement : FHIRString, 
		Comments : String
	}
};
create type StructureDefinition.StructureDefinitionSnapshotComponent from class "Hl7.Fhir.Model.StructureDefinition+StructureDefinitionSnapshotComponent" is { BackboneElement };
alter type StructureDefinition.StructureDefinitionSnapshotComponent
{
	create representation StructureDefinition.StructureDefinitionSnapshotComponent
	{
		Element : list(ElementDefinition)
	}
};
create type StructureDefinition.StructureDefinitionDifferentialComponent from class "Hl7.Fhir.Model.StructureDefinition+StructureDefinitionDifferentialComponent" is { BackboneElement };
alter type StructureDefinition.StructureDefinitionDifferentialComponent
{
	create representation StructureDefinition.StructureDefinitionDifferentialComponent
	{
		Element : list(ElementDefinition)
	}
};
alter type StructureDefinition
{
	create representation StructureDefinition
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		UseContext : list(CodeableConcept), 
		DisplayElement : FHIRString, 
		Display : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(StructureDefinition.StructureDefinitionContactComponent), 
		DescriptionElement : FHIRString, 
		Description : String, 
		RequirementsElement : FHIRString, 
		Requirements : String, 
		CopyrightElement : FHIRString, 
		Copyright : String, 
		Code : list(Coding), 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		FhirVersionElement : Id, 
		FhirVersion : String, 
		Mapping : list(StructureDefinition.StructureDefinitionMappingComponent), 
		TypeElement : Code, 
		Type : String, 
		AbstractElement : FHIRBoolean, 
		Abstract : Boolean, 
		ContextTypeElement : Code, 
		ContextType : String, 
		ContextElement : list(FHIRString), 
		Context : list(String), 
		BaseElement : FHIRUri, 
		Base : String, 
		Snapshot : StructureDefinition.StructureDefinitionSnapshotComponent, 
		Differential : StructureDefinition.StructureDefinitionDifferentialComponent
	}
};
create type Subscription from class "Hl7.Fhir.Model.Subscription" is { DomainResource };
create type Subscription.SubscriptionChannelComponent from class "Hl7.Fhir.Model.Subscription+SubscriptionChannelComponent" is { BackboneElement };
alter type Subscription.SubscriptionChannelComponent
{
	create representation Subscription.SubscriptionChannelComponent
	{
		TypeElement : Code, 
		Type : String, 
		EndpointElement : FHIRUri, 
		Endpoint : String, 
		PayloadElement : FHIRString, 
		Payload : String, 
		HeaderElement : FHIRString, 
		Header : String
	}
};
alter type Subscription
{
	create representation Subscription
	{
		CriteriaElement : FHIRString, 
		Criteria : String, 
		Contact : list(ContactPoint), 
		ReasonElement : FHIRString, 
		Reason : String, 
		StatusElement : Code, 
		Status : String, 
		ErrorElement : FHIRString, 
		Error : String, 
		Channel : Subscription.SubscriptionChannelComponent, 
		EndElement : Instant, 
		End : DateTime, 
		Tag : list(Coding)
	}
};
create type VisionPrescription from class "Hl7.Fhir.Model.VisionPrescription" is { DomainResource };
create type VisionPrescription.VisionPrescriptionDispenseComponent from class "Hl7.Fhir.Model.VisionPrescription+VisionPrescriptionDispenseComponent" is { BackboneElement };
alter type VisionPrescription.VisionPrescriptionDispenseComponent
{
	create representation VisionPrescription.VisionPrescriptionDispenseComponent
	{
		Product : Coding, 
		EyeElement : Code, 
		Eye : String, 
		SphereElement : FHIRDecimal, 
		Sphere : Decimal, 
		CylinderElement : FHIRDecimal, 
		Cylinder : Decimal, 
		AxisElement : FHIRInteger, 
		Axis : Integer, 
		PrismElement : FHIRDecimal, 
		Prism : Decimal, 
		BaseElement : Code, 
		Base : String, 
		AddElement : FHIRDecimal, 
		Add : Decimal, 
		PowerElement : FHIRDecimal, 
		Power : Decimal, 
		BackCurveElement : FHIRDecimal, 
		BackCurve : Decimal, 
		DiameterElement : FHIRDecimal, 
		Diameter : Decimal, 
		Duration : Quantity, 
		ColorElement : FHIRString, 
		Color : String, 
		BrandElement : FHIRString, 
		Brand : String, 
		NotesElement : FHIRString, 
		Notes : String
	}
};
alter type VisionPrescription
{
	create representation VisionPrescription
	{
		Identifier : list(Identifier), 
		DateWrittenElement : FHIRDateTime, 
		DateWritten : String, 
		Patient : ResourceReference, 
		Prescriber : ResourceReference, 
		Encounter : ResourceReference, 
		Reason : Element, 
		Dispense : list(VisionPrescription.VisionPrescriptionDispenseComponent)
	}
};
create type ValueSet from class "Hl7.Fhir.Model.ValueSet" is { DomainResource };
create type ValueSet.ValueSetContactComponent from class "Hl7.Fhir.Model.ValueSet+ValueSetContactComponent" is { BackboneElement };
alter type ValueSet.ValueSetContactComponent
{
	create representation ValueSet.ValueSetContactComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Telecom : list(ContactPoint)
	}
};
create type ValueSet.ValueSetDefineComponent from class "Hl7.Fhir.Model.ValueSet+ValueSetDefineComponent" is { BackboneElement };
create type ValueSet.ConceptDefinitionComponent from class "Hl7.Fhir.Model.ValueSet+ConceptDefinitionComponent" is { BackboneElement };
create type ValueSet.ConceptDefinitionDesignationComponent from class "Hl7.Fhir.Model.ValueSet+ConceptDefinitionDesignationComponent" is { BackboneElement };
alter type ValueSet.ConceptDefinitionDesignationComponent
{
	create representation ValueSet.ConceptDefinitionDesignationComponent
	{
		LanguageElement : Code, 
		Language : String, 
		Use : Coding, 
		ValueElement : FHIRString, 
		Value : String
	}
};
alter type ValueSet.ConceptDefinitionComponent
{
	create representation ValueSet.ConceptDefinitionComponent
	{
		CodeElement : Code, 
		Code : String, 
		AbstractElement : FHIRBoolean, 
		Abstract : Boolean, 
		DisplayElement : FHIRString, 
		Display : String, 
		DefinitionElement : FHIRString, 
		Definition : String, 
		Designation : list(ValueSet.ConceptDefinitionDesignationComponent), 
		Concept : list(ValueSet.ConceptDefinitionComponent)
	}
};
alter type ValueSet.ValueSetDefineComponent
{
	create representation ValueSet.ValueSetDefineComponent
	{
		SystemElement : FHIRUri, 
		System : String, 
		VersionElement : FHIRString, 
		Version : String, 
		CaseSensitiveElement : FHIRBoolean, 
		CaseSensitive : Boolean, 
		Concept : list(ValueSet.ConceptDefinitionComponent)
	}
};
create type ValueSet.ValueSetComposeComponent from class "Hl7.Fhir.Model.ValueSet+ValueSetComposeComponent" is { BackboneElement };
create type ValueSet.ConceptSetComponent from class "Hl7.Fhir.Model.ValueSet+ConceptSetComponent" is { BackboneElement };
create type ValueSet.ConceptReferenceComponent from class "Hl7.Fhir.Model.ValueSet+ConceptReferenceComponent" is { BackboneElement };
alter type ValueSet.ConceptReferenceComponent
{
	create representation ValueSet.ConceptReferenceComponent
	{
		CodeElement : Code, 
		Code : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		Designation : list(ValueSet.ConceptDefinitionDesignationComponent)
	}
};
create type ValueSet.ConceptSetFilterComponent from class "Hl7.Fhir.Model.ValueSet+ConceptSetFilterComponent" is { BackboneElement };
alter type ValueSet.ConceptSetFilterComponent
{
	create representation ValueSet.ConceptSetFilterComponent
	{
		PropertyElement : Code, 
		Property : String, 
		OpElement : Code, 
		Op : String, 
		ValueElement : Code, 
		Value : String
	}
};
alter type ValueSet.ConceptSetComponent
{
	create representation ValueSet.ConceptSetComponent
	{
		SystemElement : FHIRUri, 
		System : String, 
		VersionElement : FHIRString, 
		Version : String, 
		Concept : list(ValueSet.ConceptReferenceComponent), 
		Filter : list(ValueSet.ConceptSetFilterComponent)
	}
};
alter type ValueSet.ValueSetComposeComponent
{
	create representation ValueSet.ValueSetComposeComponent
	{
		ImportElement : list(FHIRUri), 
		Import : list(String), 
		Include : list(ValueSet.ConceptSetComponent), 
		Exclude : list(ValueSet.ConceptSetComponent)
	}
};
create type ValueSet.ValueSetExpansionComponent from class "Hl7.Fhir.Model.ValueSet+ValueSetExpansionComponent" is { BackboneElement };
create type ValueSet.ValueSetExpansionParameterComponent from class "Hl7.Fhir.Model.ValueSet+ValueSetExpansionParameterComponent" is { BackboneElement };
alter type ValueSet.ValueSetExpansionParameterComponent
{
	create representation ValueSet.ValueSetExpansionParameterComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Value : Element
	}
};
create type ValueSet.ValueSetExpansionContainsComponent from class "Hl7.Fhir.Model.ValueSet+ValueSetExpansionContainsComponent" is { BackboneElement };
alter type ValueSet.ValueSetExpansionContainsComponent
{
	create representation ValueSet.ValueSetExpansionContainsComponent
	{
		SystemElement : FHIRUri, 
		System : String, 
		AbstractElement : FHIRBoolean, 
		Abstract : Boolean, 
		VersionElement : FHIRString, 
		Version : String, 
		CodeElement : Code, 
		Code : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		Contains : list(ValueSet.ValueSetExpansionContainsComponent)
	}
};
alter type ValueSet.ValueSetExpansionComponent
{
	create representation ValueSet.ValueSetExpansionComponent
	{
		IdentifierElement : FHIRUri, 
		Identifier : String, 
		TimestampElement : FHIRDateTime, 
		Timestamp : String, 
		Parameter : list(ValueSet.ValueSetExpansionParameterComponent), 
		Contains : list(ValueSet.ValueSetExpansionContainsComponent)
	}
};
alter type ValueSet
{
	create representation ValueSet
	{
		UrlElement : FHIRUri, 
		Url : String, 
		Identifier : Identifier, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		UseContext : list(CodeableConcept), 
		ImmutableElement : FHIRBoolean, 
		Immutable : Boolean, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(ValueSet.ValueSetContactComponent), 
		DescriptionElement : FHIRString, 
		Description : String, 
		RequirementsElement : FHIRString, 
		Requirements : String, 
		CopyrightElement : FHIRString, 
		Copyright : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		ExtensibleElement : FHIRBoolean, 
		Extensible : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		LockedDateElement : FHIRDate, 
		LockedDate : String, 
		Define : ValueSet.ValueSetDefineComponent, 
		Compose : ValueSet.ValueSetComposeComponent, 
		Expansion : ValueSet.ValueSetExpansionComponent
	}
};
create type Conformance from class "Hl7.Fhir.Model.Conformance" is { DomainResource };
create type Conformance.ConformanceContactComponent from class "Hl7.Fhir.Model.Conformance+ConformanceContactComponent" is { BackboneElement };
alter type Conformance.ConformanceContactComponent
{
	create representation Conformance.ConformanceContactComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Telecom : list(ContactPoint)
	}
};
create type Conformance.ConformanceSoftwareComponent from class "Hl7.Fhir.Model.Conformance+ConformanceSoftwareComponent" is { BackboneElement };
alter type Conformance.ConformanceSoftwareComponent
{
	create representation Conformance.ConformanceSoftwareComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		VersionElement : FHIRString, 
		Version : String, 
		ReleaseDateElement : FHIRDateTime, 
		ReleaseDate : String
	}
};
create type Conformance.ConformanceImplementationComponent from class "Hl7.Fhir.Model.Conformance+ConformanceImplementationComponent" is { BackboneElement };
alter type Conformance.ConformanceImplementationComponent
{
	create representation Conformance.ConformanceImplementationComponent
	{
		DescriptionElement : FHIRString, 
		Description : String, 
		UrlElement : FHIRUri, 
		Url : String
	}
};
create type Conformance.ConformanceRestComponent from class "Hl7.Fhir.Model.Conformance+ConformanceRestComponent" is { BackboneElement };
create type Conformance.ConformanceRestSecurityComponent from class "Hl7.Fhir.Model.Conformance+ConformanceRestSecurityComponent" is { BackboneElement };
create type Conformance.ConformanceRestSecurityCertificateComponent from class "Hl7.Fhir.Model.Conformance+ConformanceRestSecurityCertificateComponent" is { BackboneElement };
alter type Conformance.ConformanceRestSecurityCertificateComponent
{
	create representation Conformance.ConformanceRestSecurityCertificateComponent
	{
		TypeElement : Code, 
		Type : String, 
		BlobElement : Base64Binary, 
		Blob : Binary
	}
};
alter type Conformance.ConformanceRestSecurityComponent
{
	create representation Conformance.ConformanceRestSecurityComponent
	{
		CorsElement : FHIRBoolean, 
		Cors : Boolean, 
		Service : list(CodeableConcept), 
		DescriptionElement : FHIRString, 
		Description : String, 
		Certificate : list(Conformance.ConformanceRestSecurityCertificateComponent)
	}
};
create type Conformance.ConformanceRestResourceComponent from class "Hl7.Fhir.Model.Conformance+ConformanceRestResourceComponent" is { BackboneElement };
create type Conformance.ResourceInteractionComponent from class "Hl7.Fhir.Model.Conformance+ResourceInteractionComponent" is { BackboneElement };
alter type Conformance.ResourceInteractionComponent
{
	create representation Conformance.ResourceInteractionComponent
	{
		CodeElement : Code, 
		Code : String, 
		DocumentationElement : FHIRString, 
		Documentation : String
	}
};
create type Conformance.ConformanceRestResourceSearchParamComponent from class "Hl7.Fhir.Model.Conformance+ConformanceRestResourceSearchParamComponent" is { BackboneElement };
alter type Conformance.ConformanceRestResourceSearchParamComponent
{
	create representation Conformance.ConformanceRestResourceSearchParamComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		DefinitionElement : FHIRUri, 
		Definition : String, 
		TypeElement : Code, 
		Type : String, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		TargetElement : list(Code), 
		Target : list(String), 
		ChainElement : list(FHIRString), 
		Chain : list(String)
	}
};
alter type Conformance.ConformanceRestResourceComponent
{
	create representation Conformance.ConformanceRestResourceComponent
	{
		TypeElement : Code, 
		Type : String, 
		Profile : ResourceReference, 
		Interaction : list(Conformance.ResourceInteractionComponent), 
		VersioningElement : Code, 
		Versioning : String, 
		ReadHistoryElement : FHIRBoolean, 
		ReadHistory : Boolean, 
		UpdateCreateElement : FHIRBoolean, 
		UpdateCreate : Boolean, 
		ConditionalCreateElement : FHIRBoolean, 
		ConditionalCreate : Boolean, 
		ConditionalUpdateElement : FHIRBoolean, 
		ConditionalUpdate : Boolean, 
		ConditionalDeleteElement : FHIRBoolean, 
		ConditionalDelete : Boolean, 
		SearchIncludeElement : list(FHIRString), 
		SearchInclude : list(String), 
		SearchParam : list(Conformance.ConformanceRestResourceSearchParamComponent)
	}
};
create type Conformance.SystemInteractionComponent from class "Hl7.Fhir.Model.Conformance+SystemInteractionComponent" is { BackboneElement };
alter type Conformance.SystemInteractionComponent
{
	create representation Conformance.SystemInteractionComponent
	{
		CodeElement : Code, 
		Code : String, 
		DocumentationElement : FHIRString, 
		Documentation : String
	}
};
create type Conformance.ConformanceRestOperationComponent from class "Hl7.Fhir.Model.Conformance+ConformanceRestOperationComponent" is { BackboneElement };
alter type Conformance.ConformanceRestOperationComponent
{
	create representation Conformance.ConformanceRestOperationComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Definition : ResourceReference
	}
};
alter type Conformance.ConformanceRestComponent
{
	create representation Conformance.ConformanceRestComponent
	{
		ModeElement : Code, 
		Mode : String, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		Security : Conformance.ConformanceRestSecurityComponent, 
		Resource : list(Conformance.ConformanceRestResourceComponent), 
		Interaction : list(Conformance.SystemInteractionComponent), 
		Operation : list(Conformance.ConformanceRestOperationComponent), 
		DocumentMailboxElement : list(FHIRUri), 
		DocumentMailbox : list(String), 
		CompartmentElement : list(FHIRUri), 
		Compartment : list(String)
	}
};
create type Conformance.ConformanceMessagingComponent from class "Hl7.Fhir.Model.Conformance+ConformanceMessagingComponent" is { BackboneElement };
create type Conformance.ConformanceMessagingEventComponent from class "Hl7.Fhir.Model.Conformance+ConformanceMessagingEventComponent" is { BackboneElement };
alter type Conformance.ConformanceMessagingEventComponent
{
	create representation Conformance.ConformanceMessagingEventComponent
	{
		Code : Coding, 
		CategoryElement : Code, 
		Category : String, 
		ModeElement : Code, 
		Mode : String, 
		Protocol : list(Coding), 
		FocusElement : Code, 
		Focus : String, 
		Request : ResourceReference, 
		Response : ResourceReference, 
		DocumentationElement : FHIRString, 
		Documentation : String
	}
};
alter type Conformance.ConformanceMessagingComponent
{
	create representation Conformance.ConformanceMessagingComponent
	{
		EndpointElement : FHIRUri, 
		Endpoint : String, 
		ReliableCacheElement : UnsignedInt, 
		ReliableCache : Integer, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		Event : list(Conformance.ConformanceMessagingEventComponent)
	}
};
create type Conformance.ConformanceDocumentComponent from class "Hl7.Fhir.Model.Conformance+ConformanceDocumentComponent" is { BackboneElement };
alter type Conformance.ConformanceDocumentComponent
{
	create representation Conformance.ConformanceDocumentComponent
	{
		ModeElement : Code, 
		Mode : String, 
		DocumentationElement : FHIRString, 
		Documentation : String, 
		Profile : ResourceReference
	}
};
alter type Conformance
{
	create representation Conformance
	{
		UrlElement : FHIRUri, 
		Url : String, 
		VersionElement : FHIRString, 
		Version : String, 
		NameElement : FHIRString, 
		Name : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Contact : list(Conformance.ConformanceContactComponent), 
		DescriptionElement : FHIRString, 
		Description : String, 
		RequirementsElement : FHIRString, 
		Requirements : String, 
		CopyrightElement : FHIRString, 
		Copyright : String, 
		StatusElement : Code, 
		Status : String, 
		ExperimentalElement : FHIRBoolean, 
		Experimental : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Software : Conformance.ConformanceSoftwareComponent, 
		Implementation : Conformance.ConformanceImplementationComponent, 
		FhirVersionElement : Id, 
		FhirVersion : String, 
		AcceptUnknownElement : FHIRBoolean, 
		AcceptUnknown : Boolean, 
		FormatElement : list(Code), 
		Format : list(String), 
		Profile : list(ResourceReference), 
		Rest : list(Conformance.ConformanceRestComponent), 
		Messaging : list(Conformance.ConformanceMessagingComponent), 
		Document : list(Conformance.ConformanceDocumentComponent)
	}
};
create type Age from class "Hl7.Fhir.Model.Age" is { Quantity };
create type AllergyIntolerance from class "Hl7.Fhir.Model.AllergyIntolerance" is { DomainResource };
create type AllergyIntolerance.AllergyIntoleranceEventComponent from class "Hl7.Fhir.Model.AllergyIntolerance+AllergyIntoleranceEventComponent" is { BackboneElement };
create type Duration from class "Hl7.Fhir.Model.Duration" is { Quantity };
alter type AllergyIntolerance.AllergyIntoleranceEventComponent
{
	create representation AllergyIntolerance.AllergyIntoleranceEventComponent
	{
		Substance : CodeableConcept, 
		CertaintyElement : Code, 
		Certainty : String, 
		Manifestation : list(CodeableConcept), 
		DescriptionElement : FHIRString, 
		Description : String, 
		OnsetElement : FHIRDateTime, 
		Onset : String, 
		Duration : Duration, 
		SeverityElement : Code, 
		Severity : String, 
		ExposureRoute : CodeableConcept, 
		CommentElement : FHIRString, 
		Comment : String
	}
};
alter type AllergyIntolerance
{
	create representation AllergyIntolerance
	{
		Identifier : list(Identifier), 
		RecordedDateElement : FHIRDateTime, 
		RecordedDate : String, 
		Recorder : ResourceReference, 
		Patient : ResourceReference, 
		Reporter : ResourceReference, 
		Substance : CodeableConcept, 
		StatusElement : Code, 
		Status : String, 
		CriticalityElement : Code, 
		Criticality : String, 
		TypeElement : Code, 
		Type : String, 
		CategoryElement : Code, 
		Category : String, 
		LastOccurenceElement : FHIRDateTime, 
		LastOccurence : String, 
		CommentElement : FHIRString, 
		Comment : String, 
		Event : list(AllergyIntolerance.AllergyIntoleranceEventComponent)
	}
};
create type CarePlan from class "Hl7.Fhir.Model.CarePlan" is { DomainResource };
create type CarePlan.CarePlanParticipantComponent from class "Hl7.Fhir.Model.CarePlan+CarePlanParticipantComponent" is { BackboneElement };
alter type CarePlan.CarePlanParticipantComponent
{
	create representation CarePlan.CarePlanParticipantComponent
	{
		Role : CodeableConcept, 
		Member : ResourceReference
	}
};
create type CarePlan.CarePlanActivityComponent from class "Hl7.Fhir.Model.CarePlan+CarePlanActivityComponent" is { BackboneElement };
create type CarePlan.CarePlanActivityDetailComponent from class "Hl7.Fhir.Model.CarePlan+CarePlanActivityDetailComponent" is { BackboneElement };
alter type CarePlan.CarePlanActivityDetailComponent
{
	create representation CarePlan.CarePlanActivityDetailComponent
	{
		CategoryElement : Code, 
		Category : String, 
		Code : CodeableConcept, 
		Reason : Element, 
		Goal : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		StatusReason : CodeableConcept, 
		ProhibitedElement : FHIRBoolean, 
		Prohibited : Boolean, 
		Scheduled : Element, 
		Location : ResourceReference, 
		Performer : list(ResourceReference), 
		Product : ResourceReference, 
		DailyAmount : Quantity, 
		Quantity : Quantity, 
		NoteElement : FHIRString, 
		Note : String
	}
};
alter type CarePlan.CarePlanActivityComponent
{
	create representation CarePlan.CarePlanActivityComponent
	{
		ActionResulting : list(ResourceReference), 
		NotesElement : FHIRString, 
		Notes : String, 
		Reference : ResourceReference, 
		Detail : CarePlan.CarePlanActivityDetailComponent
	}
};
alter type CarePlan
{
	create representation CarePlan
	{
		Identifier : list(Identifier), 
		Patient : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		Period : Period, 
		Author : list(ResourceReference), 
		ModifiedElement : FHIRDateTime, 
		Modified : String, 
		Category : list(CodeableConcept), 
		Concern : list(ResourceReference), 
		Support : list(ResourceReference), 
		Participant : list(CarePlan.CarePlanParticipantComponent), 
		Goal : list(ResourceReference), 
		Activity : list(CarePlan.CarePlanActivityComponent), 
		NotesElement : FHIRString, 
		Notes : String
	}
};
create type Composition from class "Hl7.Fhir.Model.Composition" is { DomainResource };
create type Composition.CompositionAttesterComponent from class "Hl7.Fhir.Model.Composition+CompositionAttesterComponent" is { BackboneElement };
alter type Composition.CompositionAttesterComponent
{
	create representation Composition.CompositionAttesterComponent
	{
		ModeElement : list(Code), 
		Mode : list(String), 
		TimeElement : FHIRDateTime, 
		Time : String, 
		Party : ResourceReference
	}
};
create type Composition.CompositionEventComponent from class "Hl7.Fhir.Model.Composition+CompositionEventComponent" is { BackboneElement };
alter type Composition.CompositionEventComponent
{
	create representation Composition.CompositionEventComponent
	{
		Code : list(CodeableConcept), 
		Period : Period, 
		Detail : list(ResourceReference)
	}
};
create type Composition.SectionComponent from class "Hl7.Fhir.Model.Composition+SectionComponent" is { BackboneElement };
alter type Composition.SectionComponent
{
	create representation Composition.SectionComponent
	{
		TitleElement : FHIRString, 
		Title : String, 
		Code : CodeableConcept, 
		Content : ResourceReference, 
		Section : list(Composition.SectionComponent)
	}
};
alter type Composition
{
	create representation Composition
	{
		Identifier : Identifier, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Type : CodeableConcept, 
		Class : CodeableConcept, 
		TitleElement : FHIRString, 
		Title : String, 
		StatusElement : Code, 
		Status : String, 
		ConfidentialityElement : Code, 
		Confidentiality : String, 
		Subject : ResourceReference, 
		Author : list(ResourceReference), 
		Attester : list(Composition.CompositionAttesterComponent), 
		Custodian : ResourceReference, 
		Event : list(Composition.CompositionEventComponent), 
		Encounter : ResourceReference, 
		Section : list(Composition.SectionComponent)
	}
};
create type Condition from class "Hl7.Fhir.Model.Condition" is { DomainResource };
create type Condition.ConditionStageComponent from class "Hl7.Fhir.Model.Condition+ConditionStageComponent" is { BackboneElement };
alter type Condition.ConditionStageComponent
{
	create representation Condition.ConditionStageComponent
	{
		Summary : CodeableConcept, 
		Assessment : list(ResourceReference)
	}
};
create type Condition.ConditionEvidenceComponent from class "Hl7.Fhir.Model.Condition+ConditionEvidenceComponent" is { BackboneElement };
alter type Condition.ConditionEvidenceComponent
{
	create representation Condition.ConditionEvidenceComponent
	{
		Code : CodeableConcept, 
		Detail : list(ResourceReference)
	}
};
create type Condition.ConditionLocationComponent from class "Hl7.Fhir.Model.Condition+ConditionLocationComponent" is { BackboneElement };
alter type Condition.ConditionLocationComponent
{
	create representation Condition.ConditionLocationComponent
	{
		Site : Element
	}
};
create type Condition.ConditionDueToComponent from class "Hl7.Fhir.Model.Condition+ConditionDueToComponent" is { BackboneElement };
alter type Condition.ConditionDueToComponent
{
	create representation Condition.ConditionDueToComponent
	{
		Code : CodeableConcept, 
		Target : ResourceReference
	}
};
create type Condition.ConditionOccurredFollowingComponent from class "Hl7.Fhir.Model.Condition+ConditionOccurredFollowingComponent" is { BackboneElement };
alter type Condition.ConditionOccurredFollowingComponent
{
	create representation Condition.ConditionOccurredFollowingComponent
	{
		Code : CodeableConcept, 
		Target : ResourceReference
	}
};
alter type Condition
{
	create representation Condition
	{
		Identifier : list(Identifier), 
		Patient : ResourceReference, 
		Encounter : ResourceReference, 
		Asserter : ResourceReference, 
		DateAssertedElement : FHIRDate, 
		DateAsserted : String, 
		Code : CodeableConcept, 
		Category : CodeableConcept, 
		ClinicalStatusElement : Code, 
		ClinicalStatus : String, 
		Severity : CodeableConcept, 
		Onset : Element, 
		Abatement : Element, 
		Stage : Condition.ConditionStageComponent, 
		Evidence : list(Condition.ConditionEvidenceComponent), 
		Location : list(Condition.ConditionLocationComponent), 
		DueTo : list(Condition.ConditionDueToComponent), 
		OccurredFollowing : list(Condition.ConditionOccurredFollowingComponent), 
		NotesElement : FHIRString, 
		Notes : String
	}
};
create type Count from class "Hl7.Fhir.Model.Count" is { Quantity };
create type Device from class "Hl7.Fhir.Model.Device" is { DomainResource };
alter type Device
{
	create representation Device
	{
		Identifier : list(Identifier), 
		Type : CodeableConcept, 
		StatusElement : Code, 
		Status : String, 
		ManufacturerElement : FHIRString, 
		Manufacturer : String, 
		ModelElement : FHIRString, 
		Model : String, 
		VersionElement : FHIRString, 
		Version : String, 
		ManufactureDateElement : FHIRDateTime, 
		ManufactureDate : String, 
		ExpiryElement : FHIRDateTime, 
		Expiry : String, 
		UdiElement : FHIRString, 
		Udi : String, 
		LotNumberElement : FHIRString, 
		LotNumber : String, 
		Owner : ResourceReference, 
		Location : ResourceReference, 
		Patient : ResourceReference, 
		Contact : list(ContactPoint), 
		UrlElement : FHIRUri, 
		Url : String
	}
};
create type DiagnosticOrder from class "Hl7.Fhir.Model.DiagnosticOrder" is { DomainResource };
create type DiagnosticOrder.DiagnosticOrderEventComponent from class "Hl7.Fhir.Model.DiagnosticOrder+DiagnosticOrderEventComponent" is { BackboneElement };
alter type DiagnosticOrder.DiagnosticOrderEventComponent
{
	create representation DiagnosticOrder.DiagnosticOrderEventComponent
	{
		StatusElement : Code, 
		Status : String, 
		Description : CodeableConcept, 
		DateTimeElement : FHIRDateTime, 
		DateTime : String, 
		Actor : ResourceReference
	}
};
create type DiagnosticOrder.DiagnosticOrderItemComponent from class "Hl7.Fhir.Model.DiagnosticOrder+DiagnosticOrderItemComponent" is { BackboneElement };
alter type DiagnosticOrder.DiagnosticOrderItemComponent
{
	create representation DiagnosticOrder.DiagnosticOrderItemComponent
	{
		Code : CodeableConcept, 
		Specimen : list(ResourceReference), 
		BodySite : Element, 
		StatusElement : Code, 
		Status : String, 
		Event : list(DiagnosticOrder.DiagnosticOrderEventComponent)
	}
};
alter type DiagnosticOrder
{
	create representation DiagnosticOrder
	{
		Subject : ResourceReference, 
		Orderer : ResourceReference, 
		Identifier : list(Identifier), 
		Encounter : ResourceReference, 
		ClinicalNotesElement : FHIRString, 
		ClinicalNotes : String, 
		SupportingInformation : list(ResourceReference), 
		Specimen : list(ResourceReference), 
		StatusElement : Code, 
		Status : String, 
		PriorityElement : Code, 
		Priority : String, 
		Event : list(DiagnosticOrder.DiagnosticOrderEventComponent), 
		Item : list(DiagnosticOrder.DiagnosticOrderItemComponent)
	}
};
create type DiagnosticReport from class "Hl7.Fhir.Model.DiagnosticReport" is { DomainResource };
create type DiagnosticReport.DiagnosticReportImageComponent from class "Hl7.Fhir.Model.DiagnosticReport+DiagnosticReportImageComponent" is { BackboneElement };
alter type DiagnosticReport.DiagnosticReportImageComponent
{
	create representation DiagnosticReport.DiagnosticReportImageComponent
	{
		CommentElement : FHIRString, 
		Comment : String, 
		Link : ResourceReference
	}
};
alter type DiagnosticReport
{
	create representation DiagnosticReport
	{
		Name : CodeableConcept, 
		StatusElement : Code, 
		Status : String, 
		IssuedElement : FHIRDateTime, 
		Issued : String, 
		Subject : ResourceReference, 
		Performer : ResourceReference, 
		Encounter : ResourceReference, 
		Identifier : list(Identifier), 
		RequestDetail : list(ResourceReference), 
		ServiceCategory : CodeableConcept, 
		Diagnostic : Element, 
		Specimen : list(ResourceReference), 
		Result : list(ResourceReference), 
		ImagingStudy : list(ResourceReference), 
		Image : list(DiagnosticReport.DiagnosticReportImageComponent), 
		ConclusionElement : FHIRString, 
		Conclusion : String, 
		CodedDiagnosis : list(CodeableConcept), 
		PresentedForm : list(Attachment)
	}
};
create type Distance from class "Hl7.Fhir.Model.Distance" is { Quantity };
create type DocumentManifest from class "Hl7.Fhir.Model.DocumentManifest" is { DomainResource };
create type DocumentManifest.DocumentManifestContentComponent from class "Hl7.Fhir.Model.DocumentManifest+DocumentManifestContentComponent" is { BackboneElement };
alter type DocumentManifest.DocumentManifestContentComponent
{
	create representation DocumentManifest.DocumentManifestContentComponent
	{
		P : Element
	}
};
create type DocumentManifest.DocumentManifestRelatedComponent from class "Hl7.Fhir.Model.DocumentManifest+DocumentManifestRelatedComponent" is { BackboneElement };
alter type DocumentManifest.DocumentManifestRelatedComponent
{
	create representation DocumentManifest.DocumentManifestRelatedComponent
	{
		Identifier : Identifier, 
		Ref : ResourceReference
	}
};
alter type DocumentManifest
{
	create representation DocumentManifest
	{
		MasterIdentifier : Identifier, 
		Identifier : list(Identifier), 
		Subject : ResourceReference, 
		Recipient : list(ResourceReference), 
		Type : CodeableConcept, 
		Author : list(ResourceReference), 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		SourceElement : FHIRUri, 
		Source : String, 
		StatusElement : Code, 
		Status : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Content : list(DocumentManifest.DocumentManifestContentComponent), 
		Related : list(DocumentManifest.DocumentManifestRelatedComponent)
	}
};
create type DocumentReference from class "Hl7.Fhir.Model.DocumentReference" is { DomainResource };
create type DocumentReference.DocumentReferenceRelatesToComponent from class "Hl7.Fhir.Model.DocumentReference+DocumentReferenceRelatesToComponent" is { BackboneElement };
alter type DocumentReference.DocumentReferenceRelatesToComponent
{
	create representation DocumentReference.DocumentReferenceRelatesToComponent
	{
		CodeElement : Code, 
		Code : String, 
		Target : ResourceReference
	}
};
create type DocumentReference.DocumentReferenceContextComponent from class "Hl7.Fhir.Model.DocumentReference+DocumentReferenceContextComponent" is { BackboneElement };
create type DocumentReference.DocumentReferenceContextRelatedComponent from class "Hl7.Fhir.Model.DocumentReference+DocumentReferenceContextRelatedComponent" is { BackboneElement };
alter type DocumentReference.DocumentReferenceContextRelatedComponent
{
	create representation DocumentReference.DocumentReferenceContextRelatedComponent
	{
		Identifier : Identifier, 
		Ref : ResourceReference
	}
};
alter type DocumentReference.DocumentReferenceContextComponent
{
	create representation DocumentReference.DocumentReferenceContextComponent
	{
		Event : list(CodeableConcept), 
		Period : Period, 
		FacilityType : CodeableConcept, 
		PracticeSetting : CodeableConcept, 
		SourcePatientInfo : ResourceReference, 
		Related : list(DocumentReference.DocumentReferenceContextRelatedComponent)
	}
};
alter type DocumentReference
{
	create representation DocumentReference
	{
		MasterIdentifier : Identifier, 
		Identifier : list(Identifier), 
		Subject : ResourceReference, 
		Type : CodeableConcept, 
		Class : CodeableConcept, 
		FormatElement : list(FHIRUri), 
		Format : list(String), 
		Author : list(ResourceReference), 
		Custodian : ResourceReference, 
		Authenticator : ResourceReference, 
		CreatedElement : FHIRDateTime, 
		Created : String, 
		IndexedElement : Instant, 
		Indexed : DateTime, 
		StatusElement : Code, 
		Status : String, 
		DocStatus : CodeableConcept, 
		RelatesTo : list(DocumentReference.DocumentReferenceRelatesToComponent), 
		DescriptionElement : FHIRString, 
		Description : String, 
		Confidentiality : list(CodeableConcept), 
		Content : list(Attachment), 
		Context : DocumentReference.DocumentReferenceContextComponent
	}
};
create type Encounter from class "Hl7.Fhir.Model.Encounter" is { DomainResource };
create type Encounter.EncounterStatusHistoryComponent from class "Hl7.Fhir.Model.Encounter+EncounterStatusHistoryComponent" is { BackboneElement };
alter type Encounter.EncounterStatusHistoryComponent
{
	create representation Encounter.EncounterStatusHistoryComponent
	{
		StatusElement : Code, 
		Status : String, 
		Period : Period
	}
};
create type Encounter.EncounterParticipantComponent from class "Hl7.Fhir.Model.Encounter+EncounterParticipantComponent" is { BackboneElement };
alter type Encounter.EncounterParticipantComponent
{
	create representation Encounter.EncounterParticipantComponent
	{
		Type : list(CodeableConcept), 
		Period : Period, 
		Individual : ResourceReference
	}
};
create type Encounter.EncounterHospitalizationComponent from class "Hl7.Fhir.Model.Encounter+EncounterHospitalizationComponent" is { BackboneElement };
alter type Encounter.EncounterHospitalizationComponent
{
	create representation Encounter.EncounterHospitalizationComponent
	{
		PreAdmissionIdentifier : Identifier, 
		Origin : ResourceReference, 
		AdmitSource : CodeableConcept, 
		DietPreference : CodeableConcept, 
		SpecialCourtesy : list(CodeableConcept), 
		SpecialArrangement : list(CodeableConcept), 
		Destination : ResourceReference, 
		DischargeDisposition : CodeableConcept, 
		DischargeDiagnosis : ResourceReference, 
		ReAdmissionElement : FHIRBoolean, 
		ReAdmission : Boolean
	}
};
create type Encounter.EncounterLocationComponent from class "Hl7.Fhir.Model.Encounter+EncounterLocationComponent" is { BackboneElement };
alter type Encounter.EncounterLocationComponent
{
	create representation Encounter.EncounterLocationComponent
	{
		Location : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		Period : Period
	}
};
alter type Encounter
{
	create representation Encounter
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		StatusHistory : list(Encounter.EncounterStatusHistoryComponent), 
		ClassElement : Code, 
		Class : String, 
		Type : list(CodeableConcept), 
		Patient : ResourceReference, 
		EpisodeOfCare : ResourceReference, 
		IncomingReferralRequest : list(ResourceReference), 
		Participant : list(Encounter.EncounterParticipantComponent), 
		Fulfills : ResourceReference, 
		Period : Period, 
		Length : Duration, 
		Reason : list(CodeableConcept), 
		Indication : list(ResourceReference), 
		Priority : CodeableConcept, 
		Hospitalization : Encounter.EncounterHospitalizationComponent, 
		Location : list(Encounter.EncounterLocationComponent), 
		ServiceProvider : ResourceReference, 
		PartOf : ResourceReference
	}
};
create type Group from class "Hl7.Fhir.Model.Group" is { DomainResource };
create type Group.GroupCharacteristicComponent from class "Hl7.Fhir.Model.Group+GroupCharacteristicComponent" is { BackboneElement };
alter type Group.GroupCharacteristicComponent
{
	create representation Group.GroupCharacteristicComponent
	{
		Code : CodeableConcept, 
		Value : Element, 
		ExcludeElement : FHIRBoolean, 
		Exclude : Boolean
	}
};
alter type Group
{
	create representation Group
	{
		Identifier : Identifier, 
		TypeElement : Code, 
		Type : String, 
		ActualElement : FHIRBoolean, 
		Actual : Boolean, 
		Code : CodeableConcept, 
		NameElement : FHIRString, 
		Name : String, 
		QuantityElement : UnsignedInt, 
		Quantity : Integer, 
		Characteristic : list(Group.GroupCharacteristicComponent), 
		Member : list(ResourceReference)
	}
};
create type ImagingStudy from class "Hl7.Fhir.Model.ImagingStudy" is { DomainResource };
create type ImagingStudy.ImagingStudySeriesComponent from class "Hl7.Fhir.Model.ImagingStudy+ImagingStudySeriesComponent" is { BackboneElement };
create type ImagingStudy.ImagingStudySeriesInstanceComponent from class "Hl7.Fhir.Model.ImagingStudy+ImagingStudySeriesInstanceComponent" is { BackboneElement };
alter type ImagingStudy.ImagingStudySeriesInstanceComponent
{
	create representation ImagingStudy.ImagingStudySeriesInstanceComponent
	{
		NumberElement : UnsignedInt, 
		Number : Integer, 
		UidElement : Oid, 
		Uid : String, 
		SopclassElement : Oid, 
		Sopclass : String, 
		TypeElement : FHIRString, 
		Type : String, 
		TitleElement : FHIRString, 
		Title : String, 
		Content : list(Attachment)
	}
};
alter type ImagingStudy.ImagingStudySeriesComponent
{
	create representation ImagingStudy.ImagingStudySeriesComponent
	{
		NumberElement : UnsignedInt, 
		Number : Integer, 
		ModalityElement : Code, 
		Modality : String, 
		UidElement : Oid, 
		Uid : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		NumberOfInstancesElement : UnsignedInt, 
		NumberOfInstances : Integer, 
		AvailabilityElement : Code, 
		Availability : String, 
		UrlElement : FHIRUri, 
		Url : String, 
		BodySite : Coding, 
		Laterality : Coding, 
		DateTimeElement : FHIRDateTime, 
		DateTime : String, 
		Instance : list(ImagingStudy.ImagingStudySeriesInstanceComponent)
	}
};
alter type ImagingStudy
{
	create representation ImagingStudy
	{
		StartedElement : FHIRDateTime, 
		Started : String, 
		Patient : ResourceReference, 
		UidElement : Oid, 
		Uid : String, 
		Accession : Identifier, 
		Identifier : list(Identifier), 
		Order : list(ResourceReference), 
		ModalityListElement : list(Code), 
		ModalityList : list(String), 
		Referrer : ResourceReference, 
		AvailabilityElement : Code, 
		Availability : String, 
		UrlElement : FHIRUri, 
		Url : String, 
		NumberOfSeriesElement : UnsignedInt, 
		NumberOfSeries : Integer, 
		NumberOfInstancesElement : UnsignedInt, 
		NumberOfInstances : Integer, 
		ClinicalInformationElement : FHIRString, 
		ClinicalInformation : String, 
		Procedure : list(Coding), 
		Interpreter : ResourceReference, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Series : list(ImagingStudy.ImagingStudySeriesComponent)
	}
};
create type Immunization from class "Hl7.Fhir.Model.Immunization" is { DomainResource };
create type Immunization.ImmunizationExplanationComponent from class "Hl7.Fhir.Model.Immunization+ImmunizationExplanationComponent" is { BackboneElement };
alter type Immunization.ImmunizationExplanationComponent
{
	create representation Immunization.ImmunizationExplanationComponent
	{
		Reason : list(CodeableConcept), 
		ReasonNotGiven : list(CodeableConcept)
	}
};
create type Immunization.ImmunizationReactionComponent from class "Hl7.Fhir.Model.Immunization+ImmunizationReactionComponent" is { BackboneElement };
alter type Immunization.ImmunizationReactionComponent
{
	create representation Immunization.ImmunizationReactionComponent
	{
		DateElement : FHIRDateTime, 
		Date : String, 
		Detail : ResourceReference, 
		ReportedElement : FHIRBoolean, 
		Reported : Boolean
	}
};
create type Immunization.ImmunizationVaccinationProtocolComponent from class "Hl7.Fhir.Model.Immunization+ImmunizationVaccinationProtocolComponent" is { BackboneElement };
alter type Immunization.ImmunizationVaccinationProtocolComponent
{
	create representation Immunization.ImmunizationVaccinationProtocolComponent
	{
		DoseSequenceElement : PositiveInt, 
		DoseSequence : Integer, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Authority : ResourceReference, 
		SeriesElement : FHIRString, 
		Series : String, 
		SeriesDosesElement : PositiveInt, 
		SeriesDoses : Integer, 
		DoseTarget : CodeableConcept, 
		DoseStatus : CodeableConcept, 
		DoseStatusReason : CodeableConcept
	}
};
alter type Immunization
{
	create representation Immunization
	{
		Identifier : list(Identifier), 
		DateElement : FHIRDateTime, 
		Date : String, 
		VaccineType : CodeableConcept, 
		Patient : ResourceReference, 
		WasNotGivenElement : FHIRBoolean, 
		WasNotGiven : Boolean, 
		ReportedElement : FHIRBoolean, 
		Reported : Boolean, 
		Performer : ResourceReference, 
		Requester : ResourceReference, 
		Encounter : ResourceReference, 
		Manufacturer : ResourceReference, 
		Location : ResourceReference, 
		LotNumberElement : FHIRString, 
		LotNumber : String, 
		ExpirationDateElement : FHIRDate, 
		ExpirationDate : String, 
		Site : CodeableConcept, 
		Route : CodeableConcept, 
		DoseQuantity : Quantity, 
		Explanation : Immunization.ImmunizationExplanationComponent, 
		Reaction : list(Immunization.ImmunizationReactionComponent), 
		VaccinationProtocol : list(Immunization.ImmunizationVaccinationProtocolComponent)
	}
};
create type ImmunizationRecommendation from class "Hl7.Fhir.Model.ImmunizationRecommendation" is { DomainResource };
create type ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent from class "Hl7.Fhir.Model.ImmunizationRecommendation+ImmunizationRecommendationRecommendationComponent" is { BackboneElement };
create type ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent from class "Hl7.Fhir.Model.ImmunizationRecommendation+ImmunizationRecommendationRecommendationDateCriterionComponent" is { BackboneElement };
alter type ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent
{
	create representation ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent
	{
		Code : CodeableConcept, 
		ValueElement : FHIRDateTime, 
		Value : String
	}
};
create type ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent from class "Hl7.Fhir.Model.ImmunizationRecommendation+ImmunizationRecommendationRecommendationProtocolComponent" is { BackboneElement };
alter type ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent
{
	create representation ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent
	{
		DoseSequenceElement : FHIRInteger, 
		DoseSequence : Integer, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Authority : ResourceReference, 
		SeriesElement : FHIRString, 
		Series : String
	}
};
alter type ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent
{
	create representation ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent
	{
		DateElement : FHIRDateTime, 
		Date : String, 
		VaccineType : CodeableConcept, 
		DoseNumberElement : PositiveInt, 
		DoseNumber : Integer, 
		ForecastStatus : CodeableConcept, 
		DateCriterion : list(ImmunizationRecommendation.ImmunizationRecommendationRecommendationDateCriterionComponent), 
		Protocol : ImmunizationRecommendation.ImmunizationRecommendationRecommendationProtocolComponent, 
		SupportingImmunization : list(ResourceReference), 
		SupportingPatientInformation : list(ResourceReference)
	}
};
alter type ImmunizationRecommendation
{
	create representation ImmunizationRecommendation
	{
		Identifier : list(Identifier), 
		Patient : ResourceReference, 
		Recommendation : list(ImmunizationRecommendation.ImmunizationRecommendationRecommendationComponent)
	}
};
create type List from class "Hl7.Fhir.Model.List" is { DomainResource };
create type List.ListEntryComponent from class "Hl7.Fhir.Model.List+ListEntryComponent" is { BackboneElement };
alter type List.ListEntryComponent
{
	create representation List.ListEntryComponent
	{
		Flag : list(CodeableConcept), 
		DeletedElement : FHIRBoolean, 
		Deleted : Boolean, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Item : ResourceReference
	}
};
alter type List
{
	create representation List
	{
		Identifier : list(Identifier), 
		TitleElement : FHIRString, 
		Title : String, 
		Code : CodeableConcept, 
		Subject : ResourceReference, 
		Source : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		DateElement : FHIRDateTime, 
		Date : String, 
		OrderedBy : CodeableConcept, 
		ModeElement : Code, 
		Mode : String, 
		NoteElement : FHIRString, 
		Note : String, 
		Entry : list(List.ListEntryComponent), 
		EmptyReason : CodeableConcept
	}
};
create type Location from class "Hl7.Fhir.Model.Location" is { DomainResource };
create type Location.LocationPositionComponent from class "Hl7.Fhir.Model.Location+LocationPositionComponent" is { BackboneElement };
alter type Location.LocationPositionComponent
{
	create representation Location.LocationPositionComponent
	{
		LongitudeElement : FHIRDecimal, 
		Longitude : Decimal, 
		LatitudeElement : FHIRDecimal, 
		Latitude : Decimal, 
		AltitudeElement : FHIRDecimal, 
		Altitude : Decimal
	}
};
alter type Location
{
	create representation Location
	{
		Identifier : list(Identifier), 
		NameElement : FHIRString, 
		Name : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		ModeElement : Code, 
		Mode : String, 
		Type : CodeableConcept, 
		Telecom : list(ContactPoint), 
		Address : Address, 
		PhysicalType : CodeableConcept, 
		Position : Location.LocationPositionComponent, 
		ManagingOrganization : ResourceReference, 
		PartOf : ResourceReference, 
		StatusElement : Code, 
		Status : String
	}
};
create type Media from class "Hl7.Fhir.Model.Media" is { DomainResource };
alter type Media
{
	create representation Media
	{
		TypeElement : Code, 
		Type : String, 
		Subtype : CodeableConcept, 
		Identifier : list(Identifier), 
		Subject : ResourceReference, 
		Operator : ResourceReference, 
		View : CodeableConcept, 
		DeviceNameElement : FHIRString, 
		DeviceName : String, 
		HeightElement : PositiveInt, 
		Height : Integer, 
		WidthElement : PositiveInt, 
		Width : Integer, 
		FramesElement : PositiveInt, 
		Frames : Integer, 
		DurationElement : UnsignedInt, 
		Duration : Integer, 
		Content : Attachment
	}
};
create type Medication from class "Hl7.Fhir.Model.Medication" is { DomainResource };
create type Medication.MedicationProductComponent from class "Hl7.Fhir.Model.Medication+MedicationProductComponent" is { BackboneElement };
create type Medication.MedicationProductIngredientComponent from class "Hl7.Fhir.Model.Medication+MedicationProductIngredientComponent" is { BackboneElement };
alter type Medication.MedicationProductIngredientComponent
{
	create representation Medication.MedicationProductIngredientComponent
	{
		Item : ResourceReference, 
		Amount : Ratio
	}
};
create type Medication.MedicationProductBatchComponent from class "Hl7.Fhir.Model.Medication+MedicationProductBatchComponent" is { BackboneElement };
alter type Medication.MedicationProductBatchComponent
{
	create representation Medication.MedicationProductBatchComponent
	{
		LotNumberElement : FHIRString, 
		LotNumber : String, 
		ExpirationDateElement : FHIRDateTime, 
		ExpirationDate : String
	}
};
alter type Medication.MedicationProductComponent
{
	create representation Medication.MedicationProductComponent
	{
		Form : CodeableConcept, 
		Ingredient : list(Medication.MedicationProductIngredientComponent), 
		Batch : list(Medication.MedicationProductBatchComponent)
	}
};
create type Medication.MedicationPackageComponent from class "Hl7.Fhir.Model.Medication+MedicationPackageComponent" is { BackboneElement };
create type Medication.MedicationPackageContentComponent from class "Hl7.Fhir.Model.Medication+MedicationPackageContentComponent" is { BackboneElement };
alter type Medication.MedicationPackageContentComponent
{
	create representation Medication.MedicationPackageContentComponent
	{
		Item : ResourceReference, 
		Amount : Quantity
	}
};
alter type Medication.MedicationPackageComponent
{
	create representation Medication.MedicationPackageComponent
	{
		Container : CodeableConcept, 
		Content : list(Medication.MedicationPackageContentComponent)
	}
};
alter type Medication
{
	create representation Medication
	{
		NameElement : FHIRString, 
		Name : String, 
		Code : CodeableConcept, 
		IsBrandElement : FHIRBoolean, 
		IsBrand : Boolean, 
		Manufacturer : ResourceReference, 
		KindElement : Code, 
		Kind : String, 
		Product : Medication.MedicationProductComponent, 
		Package : Medication.MedicationPackageComponent
	}
};
create type MedicationAdministration from class "Hl7.Fhir.Model.MedicationAdministration" is { DomainResource };
create type MedicationAdministration.MedicationAdministrationDosageComponent from class "Hl7.Fhir.Model.MedicationAdministration+MedicationAdministrationDosageComponent" is { BackboneElement };
alter type MedicationAdministration.MedicationAdministrationDosageComponent
{
	create representation MedicationAdministration.MedicationAdministrationDosageComponent
	{
		TextElement : FHIRString, 
		Text : String, 
		Site : CodeableConcept, 
		Route : CodeableConcept, 
		Method : CodeableConcept, 
		Quantity : Quantity, 
		Rate : Ratio
	}
};
alter type MedicationAdministration
{
	create representation MedicationAdministration
	{
		Identifier : list(Identifier), 
		StatusElement : Code, 
		Status : String, 
		Patient : ResourceReference, 
		Practitioner : ResourceReference, 
		Encounter : ResourceReference, 
		Prescription : ResourceReference, 
		WasNotGivenElement : FHIRBoolean, 
		WasNotGiven : Boolean, 
		ReasonNotGiven : list(CodeableConcept), 
		ReasonGiven : list(CodeableConcept), 
		EffectiveTime : Element, 
		Medication : ResourceReference, 
		Device : list(ResourceReference), 
		NoteElement : FHIRString, 
		Note : String, 
		Dosage : MedicationAdministration.MedicationAdministrationDosageComponent
	}
};
create type MedicationDispense from class "Hl7.Fhir.Model.MedicationDispense" is { DomainResource };
create type MedicationDispense.MedicationDispenseDosageInstructionComponent from class "Hl7.Fhir.Model.MedicationDispense+MedicationDispenseDosageInstructionComponent" is { BackboneElement };
alter type MedicationDispense.MedicationDispenseDosageInstructionComponent
{
	create representation MedicationDispense.MedicationDispenseDosageInstructionComponent
	{
		AdditionalInstructions : CodeableConcept, 
		Schedule : Element, 
		AsNeeded : Element, 
		Site : CodeableConcept, 
		Route : CodeableConcept, 
		Method : CodeableConcept, 
		Dose : Element, 
		Rate : Ratio, 
		MaxDosePerPeriod : Ratio
	}
};
create type MedicationDispense.MedicationDispenseSubstitutionComponent from class "Hl7.Fhir.Model.MedicationDispense+MedicationDispenseSubstitutionComponent" is { BackboneElement };
alter type MedicationDispense.MedicationDispenseSubstitutionComponent
{
	create representation MedicationDispense.MedicationDispenseSubstitutionComponent
	{
		Type : CodeableConcept, 
		Reason : list(CodeableConcept), 
		ResponsibleParty : list(ResourceReference)
	}
};
alter type MedicationDispense
{
	create representation MedicationDispense
	{
		Identifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		Patient : ResourceReference, 
		Dispenser : ResourceReference, 
		AuthorizingPrescription : list(ResourceReference), 
		Type : CodeableConcept, 
		Quantity : Quantity, 
		DaysSupply : Quantity, 
		Medication : ResourceReference, 
		WhenPreparedElement : FHIRDateTime, 
		WhenPrepared : String, 
		WhenHandedOverElement : FHIRDateTime, 
		WhenHandedOver : String, 
		Destination : ResourceReference, 
		Receiver : list(ResourceReference), 
		NoteElement : FHIRString, 
		Note : String, 
		DosageInstruction : list(MedicationDispense.MedicationDispenseDosageInstructionComponent), 
		Substitution : MedicationDispense.MedicationDispenseSubstitutionComponent
	}
};
create type MedicationPrescription from class "Hl7.Fhir.Model.MedicationPrescription" is { DomainResource };
create type MedicationPrescription.MedicationPrescriptionDosageInstructionComponent from class "Hl7.Fhir.Model.MedicationPrescription+MedicationPrescriptionDosageInstructionComponent" is { BackboneElement };
alter type MedicationPrescription.MedicationPrescriptionDosageInstructionComponent
{
	create representation MedicationPrescription.MedicationPrescriptionDosageInstructionComponent
	{
		TextElement : FHIRString, 
		Text : String, 
		AdditionalInstructions : CodeableConcept, 
		Scheduled : Element, 
		AsNeeded : Element, 
		Site : CodeableConcept, 
		Route : CodeableConcept, 
		Method : CodeableConcept, 
		Dose : Element, 
		Rate : Ratio, 
		MaxDosePerPeriod : Ratio
	}
};
create type MedicationPrescription.MedicationPrescriptionDispenseComponent from class "Hl7.Fhir.Model.MedicationPrescription+MedicationPrescriptionDispenseComponent" is { BackboneElement };
alter type MedicationPrescription.MedicationPrescriptionDispenseComponent
{
	create representation MedicationPrescription.MedicationPrescriptionDispenseComponent
	{
		Medication : ResourceReference, 
		ValidityPeriod : Period, 
		NumberOfRepeatsAllowedElement : PositiveInt, 
		NumberOfRepeatsAllowed : Integer, 
		Quantity : Quantity, 
		ExpectedSupplyDuration : Duration
	}
};
create type MedicationPrescription.MedicationPrescriptionSubstitutionComponent from class "Hl7.Fhir.Model.MedicationPrescription+MedicationPrescriptionSubstitutionComponent" is { BackboneElement };
alter type MedicationPrescription.MedicationPrescriptionSubstitutionComponent
{
	create representation MedicationPrescription.MedicationPrescriptionSubstitutionComponent
	{
		Type : CodeableConcept, 
		Reason : CodeableConcept
	}
};
alter type MedicationPrescription
{
	create representation MedicationPrescription
	{
		Identifier : list(Identifier), 
		DateWrittenElement : FHIRDateTime, 
		DateWritten : String, 
		StatusElement : Code, 
		Status : String, 
		Patient : ResourceReference, 
		Prescriber : ResourceReference, 
		Encounter : ResourceReference, 
		Reason : Element, 
		NoteElement : FHIRString, 
		Note : String, 
		Medication : ResourceReference, 
		DosageInstruction : list(MedicationPrescription.MedicationPrescriptionDosageInstructionComponent), 
		Dispense : MedicationPrescription.MedicationPrescriptionDispenseComponent, 
		Substitution : MedicationPrescription.MedicationPrescriptionSubstitutionComponent
	}
};
create type MedicationStatement from class "Hl7.Fhir.Model.MedicationStatement" is { DomainResource };
create type MedicationStatement.MedicationStatementDosageComponent from class "Hl7.Fhir.Model.MedicationStatement+MedicationStatementDosageComponent" is { BackboneElement };
alter type MedicationStatement.MedicationStatementDosageComponent
{
	create representation MedicationStatement.MedicationStatementDosageComponent
	{
		TextElement : FHIRString, 
		Text : String, 
		Schedule : Timing, 
		AsNeeded : Element, 
		Site : CodeableConcept, 
		Route : CodeableConcept, 
		Method : CodeableConcept, 
		Quantity : Quantity, 
		Rate : Ratio, 
		MaxDosePerPeriod : Ratio
	}
};
alter type MedicationStatement
{
	create representation MedicationStatement
	{
		Identifier : list(Identifier), 
		Patient : ResourceReference, 
		InformationSource : ResourceReference, 
		DateAssertedElement : FHIRDateTime, 
		DateAsserted : String, 
		StatusElement : Code, 
		Status : String, 
		WasNotGivenElement : FHIRBoolean, 
		WasNotGiven : Boolean, 
		ReasonNotGiven : list(CodeableConcept), 
		ReasonForUse : Element, 
		Effective : Element, 
		NoteElement : FHIRString, 
		Note : String, 
		Medication : ResourceReference, 
		Dosage : list(MedicationStatement.MedicationStatementDosageComponent)
	}
};
create type MessageHeader from class "Hl7.Fhir.Model.MessageHeader" is { DomainResource };
create type MessageHeader.MessageHeaderResponseComponent from class "Hl7.Fhir.Model.MessageHeader+MessageHeaderResponseComponent" is { BackboneElement };
alter type MessageHeader.MessageHeaderResponseComponent
{
	create representation MessageHeader.MessageHeaderResponseComponent
	{
		IdentifierElement : Id, 
		Identifier : String, 
		CodeElement : Code, 
		Code : String, 
		Details : ResourceReference
	}
};
create type MessageHeader.MessageSourceComponent from class "Hl7.Fhir.Model.MessageHeader+MessageSourceComponent" is { BackboneElement };
alter type MessageHeader.MessageSourceComponent
{
	create representation MessageHeader.MessageSourceComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		SoftwareElement : FHIRString, 
		Software : String, 
		VersionElement : FHIRString, 
		Version : String, 
		Contact : ContactPoint, 
		EndpointElement : FHIRUri, 
		Endpoint : String
	}
};
create type MessageHeader.MessageDestinationComponent from class "Hl7.Fhir.Model.MessageHeader+MessageDestinationComponent" is { BackboneElement };
alter type MessageHeader.MessageDestinationComponent
{
	create representation MessageHeader.MessageDestinationComponent
	{
		NameElement : FHIRString, 
		Name : String, 
		Target : ResourceReference, 
		EndpointElement : FHIRUri, 
		Endpoint : String
	}
};
alter type MessageHeader
{
	create representation MessageHeader
	{
		IdentifierElement : Id, 
		Identifier : String, 
		TimestampElement : Instant, 
		Timestamp : DateTime, 
		Event : Coding, 
		Response : MessageHeader.MessageHeaderResponseComponent, 
		Source : MessageHeader.MessageSourceComponent, 
		Destination : list(MessageHeader.MessageDestinationComponent), 
		Enterer : ResourceReference, 
		Author : ResourceReference, 
		Receiver : ResourceReference, 
		Responsible : ResourceReference, 
		Reason : CodeableConcept, 
		Data : list(ResourceReference)
	}
};
create type Observation from class "Hl7.Fhir.Model.Observation" is { DomainResource };
create type Observation.ObservationReferenceRangeComponent from class "Hl7.Fhir.Model.Observation+ObservationReferenceRangeComponent" is { BackboneElement };
create type Range from class "Hl7.Fhir.Model.Range" is { Element };
alter type Range
{
	create representation Range
	{
		Low : Quantity, 
		High : Quantity
	}
};
alter type Observation.ObservationReferenceRangeComponent
{
	create representation Observation.ObservationReferenceRangeComponent
	{
		Low : Quantity, 
		High : Quantity, 
		Meaning : CodeableConcept, 
		Age : Range, 
		TextElement : FHIRString, 
		Text : String
	}
};
create type Observation.ObservationRelatedComponent from class "Hl7.Fhir.Model.Observation+ObservationRelatedComponent" is { BackboneElement };
alter type Observation.ObservationRelatedComponent
{
	create representation Observation.ObservationRelatedComponent
	{
		TypeElement : Code, 
		Type : String, 
		Target : ResourceReference
	}
};
alter type Observation
{
	create representation Observation
	{
		Code : CodeableConcept, 
		Value : Element, 
		DataAbsentReason : CodeableConcept, 
		Interpretation : CodeableConcept, 
		CommentsElement : FHIRString, 
		Comments : String, 
		Applies : Element, 
		IssuedElement : Instant, 
		Issued : DateTime, 
		StatusElement : Code, 
		Status : String, 
		ReliabilityElement : Code, 
		Reliability : String, 
		BodySite : Element, 
		Method : CodeableConcept, 
		Identifier : list(Identifier), 
		Subject : ResourceReference, 
		Specimen : ResourceReference, 
		Performer : list(ResourceReference), 
		Device : ResourceReference, 
		Encounter : ResourceReference, 
		ReferenceRange : list(Observation.ObservationReferenceRangeComponent), 
		Related : list(Observation.ObservationRelatedComponent)
	}
};
create type OperationOutcome from class "Hl7.Fhir.Model.OperationOutcome" is { DomainResource };
create type OperationOutcome.OperationOutcomeIssueComponent from class "Hl7.Fhir.Model.OperationOutcome+OperationOutcomeIssueComponent" is { BackboneElement };
alter type OperationOutcome.OperationOutcomeIssueComponent
{
	create representation OperationOutcome.OperationOutcomeIssueComponent
	{
		SeverityElement : Code, 
		Severity : String, 
		Code : CodeableConcept, 
		DetailsElement : FHIRString, 
		Details : String, 
		LocationElement : list(FHIRString), 
		Location : list(String)
	}
};
alter type OperationOutcome
{
	create representation OperationOutcome
	{
		Issue : list(OperationOutcome.OperationOutcomeIssueComponent)
	}
};
create type Order from class "Hl7.Fhir.Model.Order" is { DomainResource };
create type Order.OrderWhenComponent from class "Hl7.Fhir.Model.Order+OrderWhenComponent" is { BackboneElement };
alter type Order.OrderWhenComponent
{
	create representation Order.OrderWhenComponent
	{
		Code : CodeableConcept, 
		Schedule : Timing
	}
};
alter type Order
{
	create representation Order
	{
		Identifier : list(Identifier), 
		DateElement : FHIRDateTime, 
		Date : String, 
		Subject : ResourceReference, 
		Source : ResourceReference, 
		Target : ResourceReference, 
		Reason : Element, 
		Authority : ResourceReference, 
		When : Order.OrderWhenComponent, 
		Detail : list(ResourceReference)
	}
};
create type OrderResponse from class "Hl7.Fhir.Model.OrderResponse" is { DomainResource };
alter type OrderResponse
{
	create representation OrderResponse
	{
		Identifier : list(Identifier), 
		Request : ResourceReference, 
		DateElement : FHIRDateTime, 
		Date : String, 
		Who : ResourceReference, 
		Authority : Element, 
		OrderStatus_Element : Code, 
		OrderStatus_ : String, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Fulfillment : list(ResourceReference)
	}
};
create type Organization from class "Hl7.Fhir.Model.Organization" is { DomainResource };
create type Organization.OrganizationContactComponent from class "Hl7.Fhir.Model.Organization+OrganizationContactComponent" is { BackboneElement };
alter type Organization.OrganizationContactComponent
{
	create representation Organization.OrganizationContactComponent
	{
		Purpose : CodeableConcept, 
		Name : HumanName, 
		Telecom : list(ContactPoint), 
		Address : Address
	}
};
alter type Organization
{
	create representation Organization
	{
		Identifier : list(Identifier), 
		NameElement : FHIRString, 
		Name : String, 
		Type : CodeableConcept, 
		Telecom : list(ContactPoint), 
		Address : list(Address), 
		PartOf : ResourceReference, 
		Contact : list(Organization.OrganizationContactComponent), 
		ActiveElement : FHIRBoolean, 
		Active : Boolean
	}
};
create type Patient from class "Hl7.Fhir.Model.Patient" is { DomainResource };
create type Patient.ContactComponent from class "Hl7.Fhir.Model.Patient+ContactComponent" is { BackboneElement };
alter type Patient.ContactComponent
{
	create representation Patient.ContactComponent
	{
		Relationship : list(CodeableConcept), 
		Name : HumanName, 
		Telecom : list(ContactPoint), 
		Address : Address, 
		GenderElement : Code, 
		Gender : String, 
		Organization : ResourceReference, 
		Period : Period
	}
};
create type Patient.AnimalComponent from class "Hl7.Fhir.Model.Patient+AnimalComponent" is { BackboneElement };
alter type Patient.AnimalComponent
{
	create representation Patient.AnimalComponent
	{
		Species : CodeableConcept, 
		Breed : CodeableConcept, 
		GenderStatus : CodeableConcept
	}
};
create type Patient.PatientCommunicationComponent from class "Hl7.Fhir.Model.Patient+PatientCommunicationComponent" is { BackboneElement };
alter type Patient.PatientCommunicationComponent
{
	create representation Patient.PatientCommunicationComponent
	{
		Language : CodeableConcept, 
		PreferredElement : FHIRBoolean, 
		Preferred : Boolean
	}
};
create type Patient.PatientLinkComponent from class "Hl7.Fhir.Model.Patient+PatientLinkComponent" is { BackboneElement };
alter type Patient.PatientLinkComponent
{
	create representation Patient.PatientLinkComponent
	{
		Other : ResourceReference, 
		TypeElement : Code, 
		Type : String
	}
};
alter type Patient
{
	create representation Patient
	{
		Identifier : list(Identifier), 
		Name : list(HumanName), 
		Telecom : list(ContactPoint), 
		GenderElement : Code, 
		Gender : String, 
		BirthDateElement : FHIRDate, 
		BirthDate : String, 
		Deceased : Element, 
		Address : list(Address), 
		MaritalStatus : CodeableConcept, 
		MultipleBirth : Element, 
		Photo : list(Attachment), 
		Contact : list(Patient.ContactComponent), 
		Animal : Patient.AnimalComponent, 
		Communication : list(Patient.PatientCommunicationComponent), 
		CareProvider : list(ResourceReference), 
		ManagingOrganization : ResourceReference, 
		Link : list(Patient.PatientLinkComponent), 
		ActiveElement : FHIRBoolean, 
		Active : Boolean
	}
};
create type Practitioner from class "Hl7.Fhir.Model.Practitioner" is { DomainResource };
create type Practitioner.PractitionerPractitionerRoleComponent from class "Hl7.Fhir.Model.Practitioner+PractitionerPractitionerRoleComponent" is { BackboneElement };
alter type Practitioner.PractitionerPractitionerRoleComponent
{
	create representation Practitioner.PractitionerPractitionerRoleComponent
	{
		ManagingOrganization : ResourceReference, 
		Role : CodeableConcept, 
		Specialty : list(CodeableConcept), 
		Period : Period, 
		Location : list(ResourceReference), 
		HealthcareService : list(ResourceReference)
	}
};
create type Practitioner.PractitionerQualificationComponent from class "Hl7.Fhir.Model.Practitioner+PractitionerQualificationComponent" is { BackboneElement };
alter type Practitioner.PractitionerQualificationComponent
{
	create representation Practitioner.PractitionerQualificationComponent
	{
		Identifier : list(Identifier), 
		Code : CodeableConcept, 
		Period : Period, 
		Issuer : ResourceReference
	}
};
alter type Practitioner
{
	create representation Practitioner
	{
		Identifier : list(Identifier), 
		Name : HumanName, 
		Telecom : list(ContactPoint), 
		Address : list(Address), 
		GenderElement : Code, 
		Gender : String, 
		BirthDateElement : FHIRDate, 
		BirthDate : String, 
		Photo : list(Attachment), 
		PractitionerRole : list(Practitioner.PractitionerPractitionerRoleComponent), 
		Qualification : list(Practitioner.PractitionerQualificationComponent), 
		Communication : list(CodeableConcept)
	}
};
create type Procedure from class "Hl7.Fhir.Model.Procedure" is { DomainResource };
create type Procedure.ProcedureBodySiteComponent from class "Hl7.Fhir.Model.Procedure+ProcedureBodySiteComponent" is { BackboneElement };
alter type Procedure.ProcedureBodySiteComponent
{
	create representation Procedure.ProcedureBodySiteComponent
	{
		Site : Element
	}
};
create type Procedure.ProcedurePerformerComponent from class "Hl7.Fhir.Model.Procedure+ProcedurePerformerComponent" is { BackboneElement };
alter type Procedure.ProcedurePerformerComponent
{
	create representation Procedure.ProcedurePerformerComponent
	{
		Person : ResourceReference, 
		Role : CodeableConcept
	}
};
create type Procedure.ProcedureRelatedItemComponent from class "Hl7.Fhir.Model.Procedure+ProcedureRelatedItemComponent" is { BackboneElement };
alter type Procedure.ProcedureRelatedItemComponent
{
	create representation Procedure.ProcedureRelatedItemComponent
	{
		TypeElement : Code, 
		Type : String, 
		Target : ResourceReference
	}
};
create type Procedure.ProcedureDeviceComponent from class "Hl7.Fhir.Model.Procedure+ProcedureDeviceComponent" is { BackboneElement };
alter type Procedure.ProcedureDeviceComponent
{
	create representation Procedure.ProcedureDeviceComponent
	{
		Action : CodeableConcept, 
		Manipulated : ResourceReference
	}
};
alter type Procedure
{
	create representation Procedure
	{
		Identifier : list(Identifier), 
		Patient : ResourceReference, 
		StatusElement : Code, 
		Status : String, 
		Category : CodeableConcept, 
		Type : CodeableConcept, 
		BodySite : list(Procedure.ProcedureBodySiteComponent), 
		Indication : list(CodeableConcept), 
		Performer : list(Procedure.ProcedurePerformerComponent), 
		Performed : Element, 
		Encounter : ResourceReference, 
		Location : ResourceReference, 
		Outcome : CodeableConcept, 
		Report : list(ResourceReference), 
		Complication : list(CodeableConcept), 
		FollowUp : list(CodeableConcept), 
		RelatedItem : list(Procedure.ProcedureRelatedItemComponent), 
		NotesElement : FHIRString, 
		Notes : String, 
		Device : list(Procedure.ProcedureDeviceComponent), 
		Used : list(ResourceReference)
	}
};
create type Provenance from class "Hl7.Fhir.Model.Provenance" is { DomainResource };
create type Provenance.ProvenanceAgentComponent from class "Hl7.Fhir.Model.Provenance+ProvenanceAgentComponent" is { BackboneElement };
alter type Provenance.ProvenanceAgentComponent
{
	create representation Provenance.ProvenanceAgentComponent
	{
		Role : Coding, 
		Type : Coding, 
		Reference : Element, 
		DisplayElement : FHIRString, 
		Display : String
	}
};
create type Provenance.ProvenanceEntityComponent from class "Hl7.Fhir.Model.Provenance+ProvenanceEntityComponent" is { BackboneElement };
alter type Provenance.ProvenanceEntityComponent
{
	create representation Provenance.ProvenanceEntityComponent
	{
		RoleElement : Code, 
		Role : String, 
		Type : Coding, 
		ReferenceElement : FHIRUri, 
		Reference : String, 
		DisplayElement : FHIRString, 
		Display : String, 
		Agent : Provenance.ProvenanceAgentComponent
	}
};
alter type Provenance
{
	create representation Provenance
	{
		Target : list(ResourceReference), 
		Period : Period, 
		RecordedElement : Instant, 
		Recorded : DateTime, 
		Reason : CodeableConcept, 
		Location : ResourceReference, 
		PolicyElement : list(FHIRUri), 
		Policy : list(String), 
		Agent : list(Provenance.ProvenanceAgentComponent), 
		Entity : list(Provenance.ProvenanceEntityComponent), 
		Signature : list(Signature)
	}
};
create type Questionnaire from class "Hl7.Fhir.Model.Questionnaire" is { DomainResource };
create type Questionnaire.GroupComponent from class "Hl7.Fhir.Model.Questionnaire+GroupComponent" is { BackboneElement };
create type Questionnaire.QuestionComponent from class "Hl7.Fhir.Model.Questionnaire+QuestionComponent" is { BackboneElement };
alter type Questionnaire.QuestionComponent
{
	create representation Questionnaire.QuestionComponent
	{
		LinkIdElement : FHIRString, 
		LinkId : String, 
		Concept : list(Coding), 
		TextElement : FHIRString, 
		Text : String, 
		TypeElement : Code, 
		Type : String, 
		RequiredElement : FHIRBoolean, 
		Required : Boolean, 
		RepeatsElement : FHIRBoolean, 
		Repeats : Boolean, 
		Options : ResourceReference, 
		Group : list(Questionnaire.GroupComponent)
	}
};
alter type Questionnaire.GroupComponent
{
	create representation Questionnaire.GroupComponent
	{
		LinkIdElement : FHIRString, 
		LinkId : String, 
		TitleElement : FHIRString, 
		Title : String, 
		Concept : list(Coding), 
		TextElement : FHIRString, 
		Text : String, 
		RequiredElement : FHIRBoolean, 
		Required : Boolean, 
		RepeatsElement : FHIRBoolean, 
		Repeats : Boolean, 
		Group : list(Questionnaire.GroupComponent), 
		Question : list(Questionnaire.QuestionComponent)
	}
};
alter type Questionnaire
{
	create representation Questionnaire
	{
		Identifier : list(Identifier), 
		VersionElement : FHIRString, 
		Version : String, 
		StatusElement : Code, 
		Status : String, 
		DateElement : FHIRDateTime, 
		Date : String, 
		PublisherElement : FHIRString, 
		Publisher : String, 
		Telecom : list(ContactPoint), 
		Group : Questionnaire.GroupComponent
	}
};
create type RelatedPerson from class "Hl7.Fhir.Model.RelatedPerson" is { DomainResource };
alter type RelatedPerson
{
	create representation RelatedPerson
	{
		Identifier : list(Identifier), 
		Patient : ResourceReference, 
		Relationship : CodeableConcept, 
		Name : HumanName, 
		Telecom : list(ContactPoint), 
		GenderElement : Code, 
		Gender : String, 
		Address : Address, 
		Photo : list(Attachment), 
		Period : Period
	}
};
create type SampledData from class "Hl7.Fhir.Model.SampledData" is { Element };
alter type SampledData
{
	create representation SampledData
	{
		Origin : Quantity, 
		PeriodElement : FHIRDecimal, 
		Period : Decimal, 
		FactorElement : FHIRDecimal, 
		Factor : Decimal, 
		LowerLimitElement : FHIRDecimal, 
		LowerLimit : Decimal, 
		UpperLimitElement : FHIRDecimal, 
		UpperLimit : Decimal, 
		DimensionsElement : PositiveInt, 
		Dimensions : Integer, 
		DataElement : FHIRString, 
		Data : String
	}
};
create type Specimen from class "Hl7.Fhir.Model.Specimen" is { DomainResource };
create type Specimen.SpecimenCollectionComponent from class "Hl7.Fhir.Model.Specimen+SpecimenCollectionComponent" is { BackboneElement };
alter type Specimen.SpecimenCollectionComponent
{
	create representation Specimen.SpecimenCollectionComponent
	{
		Collector : ResourceReference, 
		CommentElement : list(FHIRString), 
		Comment : list(String), 
		Collected : Element, 
		Quantity : Quantity, 
		Method : CodeableConcept, 
		BodySite : Element
	}
};
create type Specimen.SpecimenTreatmentComponent from class "Hl7.Fhir.Model.Specimen+SpecimenTreatmentComponent" is { BackboneElement };
alter type Specimen.SpecimenTreatmentComponent
{
	create representation Specimen.SpecimenTreatmentComponent
	{
		DescriptionElement : FHIRString, 
		Description : String, 
		Procedure : CodeableConcept, 
		Additive : list(ResourceReference)
	}
};
create type Specimen.SpecimenContainerComponent from class "Hl7.Fhir.Model.Specimen+SpecimenContainerComponent" is { BackboneElement };
alter type Specimen.SpecimenContainerComponent
{
	create representation Specimen.SpecimenContainerComponent
	{
		Identifier : list(Identifier), 
		DescriptionElement : FHIRString, 
		Description : String, 
		Type : CodeableConcept, 
		Capacity : Quantity, 
		SpecimenQuantity : Quantity, 
		Additive : Element
	}
};
alter type Specimen
{
	create representation Specimen
	{
		Identifier : list(Identifier), 
		Type : CodeableConcept, 
		Parent : list(ResourceReference), 
		Subject : ResourceReference, 
		AccessionIdentifier : Identifier, 
		ReceivedTimeElement : FHIRDateTime, 
		ReceivedTime : String, 
		Collection : Specimen.SpecimenCollectionComponent, 
		Treatment : list(Specimen.SpecimenTreatmentComponent), 
		Container : list(Specimen.SpecimenContainerComponent)
	}
};
create type Substance from class "Hl7.Fhir.Model.Substance" is { DomainResource };
create type Substance.SubstanceInstanceComponent from class "Hl7.Fhir.Model.Substance+SubstanceInstanceComponent" is { BackboneElement };
alter type Substance.SubstanceInstanceComponent
{
	create representation Substance.SubstanceInstanceComponent
	{
		Identifier : Identifier, 
		ExpiryElement : FHIRDateTime, 
		Expiry : String, 
		Quantity : Quantity
	}
};
create type Substance.SubstanceIngredientComponent from class "Hl7.Fhir.Model.Substance+SubstanceIngredientComponent" is { BackboneElement };
alter type Substance.SubstanceIngredientComponent
{
	create representation Substance.SubstanceIngredientComponent
	{
		Quantity : Ratio, 
		Substance : ResourceReference
	}
};
alter type Substance
{
	create representation Substance
	{
		Type : CodeableConcept, 
		DescriptionElement : FHIRString, 
		Description : String, 
		Instance : Substance.SubstanceInstanceComponent, 
		Ingredient : list(Substance.SubstanceIngredientComponent)
	}
};
create type Supply from class "Hl7.Fhir.Model.Supply" is { DomainResource };
create type Supply.SupplyDispenseComponent from class "Hl7.Fhir.Model.Supply+SupplyDispenseComponent" is { BackboneElement };
alter type Supply.SupplyDispenseComponent
{
	create representation Supply.SupplyDispenseComponent
	{
		Identifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		Type : CodeableConcept, 
		Quantity : Quantity, 
		SuppliedItem : ResourceReference, 
		Supplier : ResourceReference, 
		WhenPrepared : Period, 
		WhenHandedOverElement : FHIRDateTime, 
		WhenHandedOver : String, 
		Destination : ResourceReference, 
		Receiver : list(ResourceReference)
	}
};
alter type Supply
{
	create representation Supply
	{
		Kind : CodeableConcept, 
		Identifier : Identifier, 
		StatusElement : Code, 
		Status : String, 
		OrderedItem : ResourceReference, 
		Patient : ResourceReference, 
		Dispense : list(Supply.SupplyDispenseComponent)
	}
};
create type Uuid from class "Hl7.Fhir.Model.Uuid" is { Element };
alter type Uuid
{
	create representation Uuid
	{
		Value : String
	}
};
