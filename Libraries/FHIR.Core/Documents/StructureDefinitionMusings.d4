/*
create operator Replace(const AString : String, const OldString : String, const NewString : String): String
begin
	if IsNil(AString) then
		result := "";
	if IsNil(NewString) then
		result := "";
	if IsNil(OldString) then
		result := "";
	
	var temp := "";
	for var i := 0  to AString.Length() do
   begin
     if AString[i] = OldString then
     		temp := temp + NewString
     else
     		temp := temp + AString[i];
   end;
   result := temp;
end;

create operator Exists(resource: String, element1: FHIR.Core.Dynamic, element2: FHIR.Core.Dynamic , diffList: list(String), elementName: String): Boolean
begin
	var one := IsNil(element1.Get(elementName));
	var two := IsNil(element2.Get(elementName));
	
	// both nil
	if one then
	begin
		if two then
			result := false;
	end;
	
	//both true
	if one  = false then
	begin
		if two = false then
			result := true;
	end;
	
	//one true, two nil
	if one = false then
	begin
		if two then
		begin
			diffList.Add(resource + "," + element1.Get("path").ToString() + "," + elementName + ",Removed," + '"' + Replace(element1.Get(elementName).ToString(), '"', "'") + '"' + ", ");
			result := false;
		end;
	end;
	
	//one nil, two true
	if one then
	begin	
		if two = false then
		begin
			diffList.Add(resource + "," + element2.Get("path").ToString() + "," + elementName + ",Added, ," + '"' + Replace(element2.Get(elementName).ToString(), '"', "'") + '"');
			result := false;
		end;
	end;
end;


create operator getDiff(resource: String, element1: FHIR.Core.Dynamic, element2: FHIR.Core.Dynamic , diffList: list(String), elementName: String)
begin
	var att1 := '"' + Replace(element1.Get(elementName).ToString(), '"', "'") + '"';
	var att2 := '"' + Replace(element2.Get(elementName).ToString(), '"', "'") + '"';
	diffList.Add(resource + "," + element1.Get("path").ToString() + "," + elementName + ",Updated," + att1 + "," + att2); 
end;

create operator compare(resource: String, element1: FHIR.Core.Dynamic, element2: FHIR.Core.Dynamic , diffList: list(String), elementName: String)
begin
	if Exists(resource, element1, element2, diffList, elementName) then
	begin
		if element1.Get(elementName).iEqual(element2.Get(elementName)) = false then
			getDiff(resource, element1, element2, diffList, elementName);
	end;
end;
*/


var profileDir := "C:\dev\FHIR\publish\qicore";
var DSTU2URL := "http://hl7.org/fhir/DSTU2/";
var DevURL := "http://hl7.org/fhir/2016May/";
var output := "C:\Users\jacob\Desktop\Qicore.csv";



var DiffList := list(String) {};
DiffList.Add("Resource,ElementPath,Attribute,ModifiedCode,OldValue,NewValue");

var resources := list(String) {};

var fileList := ListFiles(FileName(profileDir)) where Path like "%profile.json";

foreach var r in fileList do
begin
	resources.Add(Lower(Dynamic(LoadTextFile(r.Path)).Get("snapshot").Get("element").ToList()[0].Get("type").ToList()[0].Get("code").ToString()));
end;

foreach var resourceURL in resources do
begin
	var DSTU2Structure := Dynamic(HTTP("GET", DSTU2URL + resourceURL +".profile.json", nil, nil));
	var DSTU2StructureElements :=  DSTU2Structure.Get("snapshot").Get("element").ToList();
	
	var DevStructure := Dynamic(HTTP("GET", DevURL + resourceURL +".profile.json", nil, nil));
	var DevStructureElements := DevStructure.Get("snapshot").Get("element").ToList();
	
	var resource := DSTU2Structure.Get("id").ToString();
	
	//Find elements only in DSTU2 and add them to DiffList
	var found := false;
	foreach var DSTU2Element in DSTU2StructureElements do 
	begin
		foreach var DevElement in DevStructureElements do 
		begin
			if DSTU2Element.Get("path") = DevElement.Get("path") then found := true;
		end;
		if found = false then 
			DiffList.Add(resource + "," + DSTU2Element.Get("path").ToString() + ", ,Removed, , ");
		found := false;
	end;
	
	//Find elements only in Dev and add them to DiffList
	found := false;
	foreach var DevElement in DevStructureElements do 
	begin
		foreach var DSTU2Element in DSTU2StructureElements do
		begin
			if DSTU2Element.Get("path") = DevElement.Get("path") then found := true;
		end;
		if found = false then 
			DiffList.Add(resource + "," + DevElement.Get("path").ToString() + ", ,Added, , ");
		found := false;
	end;
	
	//Add elements to Defflist that have been changed between DSTU2 and Dev
	foreach var DSTU2Element in DSTU2StructureElements do 
	begin
		foreach var DevElement in DevStructureElements do 
		begin
			if DSTU2Element.Get("path").iEqual(DevElement.Get("path")) then 
			begin
				compare(resource, DSTU2Element, DevElement, DiffList, "representation");
				compare(resource, DSTU2Element, DevElement, DiffList, "name");
				compare(resource, DSTU2Element, DevElement, DiffList, "label");
				compare(resource, DSTU2Element, DevElement, DiffList, "code");
				compare(resource, DSTU2Element, DevElement, DiffList, "slicing");
				compare(resource, DSTU2Element, DevElement, DiffList, "short");
				compare(resource, DSTU2Element, DevElement, DiffList, "definition");
				compare(resource, DSTU2Element, DevElement, DiffList, "comments");
				compare(resource, DSTU2Element, DevElement, DiffList, "requirements");
				compare(resource, DSTU2Element, DevElement, DiffList, "alias");
				compare(resource, DSTU2Element, DevElement, DiffList, "min");
				compare(resource, DSTU2Element, DevElement, DiffList, "max");
				//compare(resource, DSTU2Element, DevElement, DiffList, "base");
				compare(resource, DSTU2Element, DevElement, DiffList, "contentReference");
				compare(resource, DSTU2Element, DevElement, DiffList, "type");
				compare(resource, DSTU2Element, DevElement, DiffList, "defaultValue[x]");
				compare(resource, DSTU2Element, DevElement, DiffList, "meaningWhenMissing");
				compare(resource, DSTU2Element, DevElement, DiffList, "fixed[x]");
				compare(resource, DSTU2Element, DevElement, DiffList, "pattern[x]");
				compare(resource, DSTU2Element, DevElement, DiffList, "example[x]");
				compare(resource, DSTU2Element, DevElement, DiffList, "minValue[x]");
				compare(resource, DSTU2Element, DevElement, DiffList, "maxValue[x]");
				compare(resource, DSTU2Element, DevElement, DiffList, "maxLength");
				compare(resource, DSTU2Element, DevElement, DiffList, "condition");
				compare(resource, DSTU2Element, DevElement, DiffList, "constraint");
				compare(resource, DSTU2Element, DevElement, DiffList, "mustSupport");
				compare(resource, DSTU2Element, DevElement, DiffList, "isModifier");
				//compare(resource, DSTU2Element, DevElement, DiffList, "isSummary");
				compare(resource, DSTU2Element, DevElement, DiffList, "binding");
				//compare(resource, DSTU2Element, DevElement, DiffList, "mapping");
			end;
		end;
	end;
end;

var FileStr := "";

foreach var line in DiffList do 
begin
	FileStr := FileStr + line + Unicode({ 13, 10 });
end;

var fileName := FileName(output);

if FileExists(fileName) = false then
	CreateFile(fileName);
	
SaveTextFile(fileName, FileStr);