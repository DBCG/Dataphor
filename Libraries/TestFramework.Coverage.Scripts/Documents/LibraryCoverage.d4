/*
	Dataphor
	Â© Copyright 2000-2008 Alphora
	This file is licensed under a modified BSD-license which can be found here: http://dataphor.org/dataphor_license.txt
*/
// Library coverage

begin
	var LErrorHit : Boolean := false;
	try
		// Cannot modify system library
		SetLibraryDescriptor('System', LibraryDescriptor('System', VersionNumber(1), "", {FileReference("Alphora.Dataphor.DAE.dll", true)}, list(LibraryReference){}));
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("System library modification allowed.");
		
	LErrorHit := false;
	try
		RenameLibrary('System', 'TestSystem');
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("System library rename allowed.");
	
	LErrorHit := false;
	try
		// Cannot rename general library
		SetLibraryDescriptor('General', LibraryDescriptor('System', VersionNumber(1), "", list(FileReference){}, {LibraryReference("System", VersionNumber(1))}));
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("General library rename through SetLibraryDescriptor allowed.");
		
	LErrorHit := false;
	try
		RenameLibrary('General', 'TestGeneral');
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("General library rename allowed.");
		
	LErrorHit := false;
	try
		UnregisterLibrary('System');
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("System library unregister allowed.");
		
	LErrorHit := false;
	try
		DropLibrary('System');
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("System library drop allowed.");
		
	LErrorHit := false;
	try
		UnregisterLibrary('General');
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("General library unregister allowed.");
		
	LErrorHit := false;
	try
		DropLibrary('General');
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("General library drop allowed.");
end;

CreateLibrary(LibraryDescriptor('LibraryTest', VersionNumber(1, 0), "TestDevice", list(FileReference){}, {LibraryReference('System', VersionNumber(-1))}));
if not exists (Libraries where Name = 'LibraryTest') then
	raise Error("CreateLibrary failed.");
	
if GetLibraryDescriptor('LibraryTest') <> LibraryDescriptor('LibraryTest', VersionNumber(1, 0), "TestDevice", list(FileReference){}, {LibraryReference('System', VersionNumber(-1))}) then
	raise Error('GetLibraryDescriptor failed.');
	
SetLibraryDescriptor('LibraryTest', LibraryDescriptor('LibraryTest', VersionNumber(2, 0), "TestingDevice", list(FileReference){}, {LibraryReference('System', VersionNumber(3))}));
if GetLibraryDescriptor('LibraryTest') <> LibraryDescriptor('LibraryTest', VersionNumber(2, 0), "TestingDevice", list(FileReference){}, {LibraryReference('System', VersionNumber(3))}) then
	raise Error("SetLibraryDescriptor failed.");
	
if (GetDefaultDeviceName('LibraryTest') <> "TestingDevice") then
	raise Error("GetDefaultDeviceName for library failed.");
	
SetDefaultDeviceName('LibraryTest', "TestDevice");
if (GetDefaultDeviceName('LibraryTest') <> "TestDevice") then
	raise Error("SetDefaultDeviceName for library failed.");
	
RenameLibrary('LibraryTest', 'NewTest');
if exists (Libraries where Name = 'LibraryTest') then
	raise Error('RenameLibrary failed.');

if not exists (Libraries where Name = 'NewTest') then
	raise Error('RenameLibrary failed.');
	
begin
	var LLibraryDescriptor : LibraryDescriptor := GetLibraryDescriptor('NewTest');
	LLibraryDescriptor.Name := 'LibraryTest';
	SetLibraryDescriptor('NewTest', LLibraryDescriptor);
	if exists (Libraries where Name = 'NewTest') then
		raise Error("Rename through SetLibraryDescriptor failed.");
		
	if not exists (Libraries where Name = 'LibraryTest') then
		raise Error("Rename through SetLibraryDescriptor failed.");
end;

RegisterLibrary('LibraryTest');
if not exists (LoadedLibraries where Name = 'LibraryTest') then
	raise Error("RegisterLibrary failed.");
	
UnregisterLibrary('LibraryTest');
if exists (LoadedLibraries where Name = 'LibraryTest') then
	raise Error("UnregisterLibrary failed.");

CreateLibrary(LibraryDescriptor("TestDependent", VersionNumber(1), "", list(FileReference){}, {LibraryReference('LibraryTest', VersionNumber(3))}));

if (GetDefaultDeviceName("TestDependent") <> "TestDevice") then
	raise Error("Default device from required libraries failed.");

begin
	var LErrorHit : Boolean := false;
	try
		RegisterLibrary('TestDependent');
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("Version mismatch allowed.");
end;

SetLibraryDescriptor('TestDependent', LibraryDescriptor('TestDependent', VersionNumber(1), "", list(FileReference){}, {LibraryReference('LibraryTest', VersionNumber(2))}));

RegisterLibrary('TestDependent');

if not exists (LoadedLibraries where Name = 'LibraryTest') then
	raise Error("Required library registration failed.");
	
if (GetDefaultDeviceName() <> "TestDevice") then
	raise Error("GetDefaultDeviceName for current library failed.");
	
SetDefaultDeviceName("TestingDevice");
if (GetDefaultDeviceName() <> "TestingDevice") then
	raise Error("SetDefaultDeviceName for current library failed.");
	
SetLibrary('LibraryTest');
if LibraryName() <> 'LibraryTest' then
	raise Error("SetLibrary failed.");
	
UnregisterLibrary("TestDependent");
UnregisterLibrary('LibraryTest');

if LibraryName() <> "General" then
	raise Error("Unregistering current library does not set current library to general.");

SetLibraryDescriptor('TestDependent', LibraryDescriptor('TestDependent', VersionNumber(1), "", list(FileReference){}, list(LibraryReference){}));
RegisterLibrary('TestDependent');

SetLibraryDescriptor('TestDependent', LibraryDescriptor('TestDependent', VersionNumber(1), "", list(FileReference){}, {LibraryReference('LibraryTest', VersionNumber(2))}));

if not exists (LoadedLibraries where Name = 'LibraryTest') then
	raise Error("Adding requisite to registered library does not register required library.");
	
begin
	var LErrorHit : Boolean := false;
	try
		SetLibraryDescriptor('TestDependent', LibraryDescriptor('TestDependent', VersionNumber(1), "", list(FileReference){}, list(LibraryReference){}));
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("Requisite removal from registered library allowed.");

	LErrorHit := false;
	try
		SetLibraryDescriptor('TestDependent', LibraryDescriptor('TestDependencies', VersionNumber(1), "", list(FileReference){}, {LibraryReference('LibraryTest', VersionNumber(2))}));
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("Registered library rename allowed.");

	LErrorHit := false;
	try
		SetLibraryDescriptor('TestDependent', LibraryDescriptor('TestDependent', VersionNumber(2), "", list(FileReference){}, {LibraryReference('LibraryTest', VersionNumber(2))}));
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("Registered library version change allowed.");

	LErrorHit := false;
	try
		DropLibrary('TestDependent');
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("Registered library drop allowed.");
		
	LErrorHit := false;
	try
		SetLibraryDescriptor('LibraryTest', LibraryDescriptor('LibraryTest', VersionNumber(2, 0), "", list(FileReference){}, {LibraryReference('System', VersionNumber(3)), LibraryReference('TestDependent', VersionNumber(-1))}));
	except
		LErrorHit := true;
	end;
	if not LErrorHit then
		raise Error("Circular library reference allowed.");
end;

UnregisterLibrary('TestDependent');
UnregisterLibrary('LibraryTest');

DropLibrary("TestDependent");
DropLibrary('LibraryTest');

if exists (Libraries where Name in {'LibraryTest', 'TestDependent'}) then
	raise Error("DropLibrary failed.");

// TODO: Test assemblies	
