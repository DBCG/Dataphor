// QUICKFHIR.CreateModelInfo
// Creates the base FHIR Model Info, but with primitives replaced with CQL primitives

// Needs FHIR.LoadConformance to load the structure definitions for FHIR
// Needs FHIR.LoadConformanceCache to load the structure definitions into in-memory tables for processing
// Needs ModelInfo.Operators to create the required operators

delete Models where Url = "http://hl7.org/fhir";
insert row { "QUICKFHIR" Name, "http://hl7.org/fhir" Url } into Models;

select TypeInfos
delete TypeInfos where ModelName <> 'System';

select Models
select ModelInfoSettings
update ModelInfoSettings set { UseCQLPrimitives := true };

// TODO: Don't define types for FHIR types that are not referenced due to the use of CQL Primitives
// All the FHIR Primitives
// Age, Money, Count, Duration, Range, Period, Quantity, SimpleQuantity
// If underlying quantity values have a comparator, we have an issue
// In addition, we lose the fact that some integer are positiveInt, some uri are oid, etc. Should try to preserve those, but would require new types in QUICKFHIR

select PrimitiveTypeMappings
// TODO: Construct actual mappings here, this is a shortcut...
update PrimitiveTypeMappings set { SourceTypeName := 'QUICK' + SourceTypeName };
select CQLTypeMappings
// TODO: Construct actual mappings here, this is a shortcut...
update CQLTypeMappings set { SourceTypeName := 'QUICK' + SourceTypeName };
// Generate Primitive Types
foreach row in 
	StructureDefinitions where StructureDefinition.Kind = "PrimitiveType" 
do
  BuildClassInfo("QUICKFHIR", StructureDefinition);
  
// Generate Complex Types
foreach row in 
  StructureDefinitions
    where StructureDefinition.Kind = "ComplexType" 
		and (StructureDefinition.BaseDefinition.IsNil() or StructureDefinition.BaseDefinition <> "http://hl7.org/fhir/StructureDefinition/Extension")
do
begin
  delete Messages;
  BuildClassInfo("QUICKFHIR", StructureDefinition);
end;  

// Generate Resources
foreach row in
  StructureDefinitions
    where StructureDefinition.Kind = "Resource"
      and (StructureDefinition.Derivation.IsNil() or StructureDefinition.Derivation = "Specialization")
do
begin
  delete Messages;
  BuildClassInfo("QUICKFHIR", StructureDefinition);
end;

// Walk all the types and fixup any content reference types (NamedTypeSpecifiers with no modelName and a name that begins with #)
create table Fixups in Temp from TypeInfos where false;
foreach row in
  TypeInfos
    where ModelName = "QUICKFHIR"
      and Value is ClassInfo
do
begin
  delete Messages;
  var elements := list(ClassInfoElement) { };
  var hasFixups := false;
  foreach var e in (Value as ClassInfo).element do
  begin
    if e.HasContentReferenceTypeSpecifier() then
    begin
      hasFixups := true;
      elements.Add(FixupContentReferenceTypeSpecifier("QUICKFHIR", e));
    end
    else
      elements.Add(e);
  end;
  if hasFixups then
  begin
    var typeInfo := Value as ClassInfo;
    typeInfo.element := elements;
    insert row { Name Name, ModelName ModelName, typeInfo Value } into Fixups;
  end;
end;

select TypeInfos where ModelName = "QUICKFHIR"
select TypeInfos where Value is ClassInfo and ModelName = "QUICKFHIR" and Name = "QUICKFHIR.Bundle.EntryComponent"
var elements := ((TypeInfos where Value is ClassInfo and ModelName = "QUICKFHIR" and Name = "QUICKFHIR.Bundle.EntryComponent")[].Value as ClassInfo).element;
var linkElement := elements.ForPath("link");
var linkElementTypeSpecifier := linkElement.typeSpecifier as ListTypeSpecifier;
select IsContentReferenceTypeSpecifier(linkElement.typeSpecifier);
select linkElementTypeSpecifier.elementType;

select Fixups

select StructureDefinitions["Bundle"].StructureDefinition.AsXML

//delete Documents where Library_Name = "CQF.Model.FHIR" and Name <> "Register"
//foreach row in TypeInfos do
//begin
//  var name := Name.Replace("-", "_");
//  CreateAndSave("CQF.Model.FHIR", name, "xml", Value.AsXML);
//end

//    <ns4:conversionInfo fromType="FHIR.Coding" toType="System.Code" functionName="FHIRHelpers.ToCode"/>
//    <ns4:conversionInfo fromType="FHIR.CodeableConcept" toType="System.Concept" functionName="FHIRHelpers.ToConcept"/>
//    <ns4:conversionInfo fromType="FHIR.Quantity" toType="System.Quantity" functionName="FHIRHelpers.ToQuantity"/>
//    <ns4:conversionInfo fromType="FHIR.Period" toType="Interval&lt;System.DateTime&gt;" functionName="FHIRHelpers.ToInterval"/>
//    <ns4:conversionInfo fromType="FHIR.Range" toType="Interval&lt;System.Quantity&gt;" functionName="FHIRHelpers.ToInterval"/>

// TODO: Figure out why primitives are not being added to the conversion lists here...

select 
  TypeInfos 
    where Value is ClassInfo and Value.baseType = "QUICKFHIR.Element"
    where (Value as ClassInfo).element.Count() = 1
    

DeleteDocument("CQF.Model.FHIR", "QUICKFHIRModelInfo");
CreateAndSave("CQF.Model.FHIR", "QUICKFHIRModelInfo", "xml",
  ModelInfo(row { 
    { ModelSpecifier(row { "System" name, "1.0.0" version }) } requiredModelInfo, 
    foreach row in TypeInfos where ModelName = "QUICKFHIR" do Value typeInfo,
	"QUICKFHIR" name, 
	"3.0.1" version, 
	Models["QUICKFHIR"].Url url, 
	//"fhir" targetQualifier, 
	"QUICKFHIR.Patient" patientClassName, 
	"birthDate" patientBirthDatePropertyName
}).AsXML);

