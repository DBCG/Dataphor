// FHIR.CreateModelInfo
// Creates the base FHIR Model Info
// This creates a "Pure" Model Info that exposes the FHIR model directly in CQL

// Needs FHIR.LoadConformance to load the structure definitions for FHIR
// Needs FHIR.LoadConformanceCache to load the structure definitions into in-memory tables for processing
// Needs ModelInfo.Operators to create the required operators

delete TypeInfos;

// Generate Primitive Types
foreach row in 
	StructureDefinitions where StructureDefinition.Kind = "PrimitiveType" 
do
  BuildClassInfo(StructureDefinition);

// Generate Complex Types
foreach row in 
  StructureDefinitions
    where StructureDefinition.Kind = "ComplexType" 
		and (StructureDefinition.BaseDefinition.IsNil() or StructureDefinition.BaseDefinition <> "http://hl7.org/fhir/StructureDefinition/Extension")
do
  BuildClassInfo(StructureDefinition);

// Generate Resources
foreach row in
  StructureDefinitions
    where StructureDefinition.Kind = "Resource"
      and (StructureDefinition.Derivation.IsNil() or StructureDefinition.Derivation = "Specialization")
do
begin
  delete Messages;
  BuildClassInfo(StructureDefinition);
end;

//delete Documents where Library_Name = "CQF.Model.FHIR" and Name <> "Register"
//foreach row in TypeInfos do
//begin
//  var name := Name.Replace("-", "_");
//  CreateAndSave("CQF.Model.FHIR", name, "xml", Value.AsXML);
//end

    <ns4:conversionInfo fromType="FHIR.Coding" toType="System.Code" functionName="FHIRHelpers.ToCode"/>
    <ns4:conversionInfo fromType="FHIR.CodeableConcept" toType="System.Concept" functionName="FHIRHelpers.ToConcept"/>
    <ns4:conversionInfo fromType="FHIR.Quantity" toType="System.Quantity" functionName="FHIRHelpers.ToQuantity"/>
    <ns4:conversionInfo fromType="FHIR.Period" toType="Interval&lt;System.DateTime&gt;" functionName="FHIRHelpers.ToInterval"/>
    <ns4:conversionInfo fromType="FHIR.Range" toType="Interval&lt;System.Quantity&gt;" functionName="FHIRHelpers.ToInterval"/>


DeleteDocument("CQF.Model.FHIR", "FHIRModelInfo");
CreateAndSave("CQF.Model.FHIR", "FHIRModelInfo", "xml",
  ModelInfo(row { 
    { ModelSpecifier(row { "System" name, "1.0.0" version }) } requiredModelInfo, 
    foreach row in TypeInfos where ModelName = "FHIR" do Value typeInfo,
    foreach row in 
      (TypeInfos 
        where Value is ClassInfo 
          and Value.baseType = "FHIR.Element" 
          and (Value as ClassInfo).element.Count() = 1 
        { Name, Value as ClassInfo Value } 
        { Name, Value, Value.name sourceTypeName, Value.element[0].type targetTypeName }
        { Name, sourceTypeName, targetTypeName, "To" + Unqualify(targetTypeName) functionName }
       where sourceTypeName.IsNotNil() and targetTypeName.IsNotNil() and functionName.IsNotNil())
       union (table {
         row { "Coding" Name, "Coding" sourceTypeName, "System.Code" targetTypeName, "ToCode" functionName },
         row { "CodeableConcept" Name, "CodeableConcept" sourceTypeName, "System.Concept" targetTypeName, "ToCode" functionName },
         row { "Quantity" Name, "Quantity" sourceTypeName, "System.Quantity" targetTypeName, "ToQuantity" functionName },
         row { "Period" Name, "Period" sourceTypeName, "Interval<System.DateTime>", "ToInterval" functionName },
         row { "Range" Name, "Range" sourceTypeName, "Interval<System.Quantity>", "ToInterval" functionName }
       })
    do
      //<ns4:conversionInfo fromType="FHIR.string" toType="System.String" functionName="FHIRHelpers.ToString"/>
      ConversionInfo(row { sourceTypeName fromType, targetTypeName toType, "FHIRHelpers." + functionName functionName })
   conversionInfo, 
	"FHIR" name, 
	"3.0.1" version, 
	Models["FHIR"].Url url, 
	//"fhir" targetQualifier, 
	"FHIR.Patient" patientClassName, 
	"birthDate.value" patientBirthDatePropertyName
}).AsXML);

// Build FHIRHelpers CQL
var statements := list(String) { };
foreach row in 
  TypeInfos 
    where Value is ClassInfo 
      and Value.baseType = "FHIR.Element" 
      and (Value as ClassInfo).element.Count() = 1 
    { Name, Value as ClassInfo Value } 
    { Name, Value, Value.name sourceTypeName, Value.element[0].type targetTypeName }
    { Name, Value, sourceTypeName, targetTypeName, "To" + Unqualify(targetTypeName) functionName }
   where sourceTypeName.IsNotNil() and targetTypeName.IsNotNil() and functionName.IsNotNil()
do
begin
  statements.Add("define function " + functionName + "(value " + sourceTypeName + "): value.value");
end;
select statements;
  
