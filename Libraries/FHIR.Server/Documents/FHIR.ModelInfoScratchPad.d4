// CreateModelInfo
// Iterate through a set of profiles to create a CQL model info that:
// 1. Optionally uses CQL primitives, rather than FHIR primitives
// 2. Creates first class elements for extensions
// 3. Creates links, rather than references

// First task is to identify the set of profiles
select Resource where Type = "StructureDefinition" return 1
select Resource where Type = "StructureDefinition" { Id }
select Resource where Id = "us-core-allergyintolerance" { (Content as StructureDefinition) StructureDefinition }
	{ StructureDefinition.Kind Kind, StructureDefinition.Type Type, StructureDefinition.BaseDefinition BaseDefinition, StructureDefinition.Derivation Derivation }

select Resource where Type = "StructureDefinition" { Id, (Content as StructureDefinition) StructureDefinition }
   where StructureDefinition.Kind = "Resource"
	{ 
		Id, 
		StructureDefinition.Url Url, 
		StructureDefinition.Kind Kind, 
		StructureDefinition.Type Type, 
		StructureDefinition.BaseDefinition BaseDefinition, 
		StructureDefinition.Derivation Derivation 
	}

create table Results in Temp from
Resource where Type = "StructureDefinition" { Id, (Content as StructureDefinition) StructureDefinition }
   where StructureDefinition.Kind = "Resource"
     and Id in list(String){ 'ActivityDefinition', 'EventDefinition', 'Measure', 'OperationDefinition', 'PlanDefinition', 'Questionnaire' }
	{ 
		Id,
		Id Display,
		StructureDefinition.Differential.Element[0].Short Description
	}

select Results { Id, Description }

drop table Results;
create table Results in Temp from
Resource where Type = "StructureDefinition" { Id, (Content as StructureDefinition) StructureDefinition }
   where StructureDefinition.Kind = "Resource"
     and Id in list(String){ 'Appointment',
'AppointmentResponse',
'CarePlan',
'Claim',
'CommunicationRequest',
'Contract',
'CoverageEligibilityRequest',
'DeviceRequest',
'EnrollmentRequest',
'ImmunizationRecommendation',
'MedicationRequest',
'NutritionOrder',
'ServiceRequest',
'Task',
'SupplyRequest',
'VisionPrescription'}
	{ 
		Id,
		Id Display,
		StructureDefinition.Differential.Element[0].Short Description
	}

select Results { '"' + Id + '","' + Display + '","' + Description + '"' Result }

drop table Results;
create table Results in Temp from
Resource where Type = "StructureDefinition" { Id, (Content as StructureDefinition) StructureDefinition }
   where StructureDefinition.Kind = "Resource"
     and Id in list(String){ 
'ChargeItem',
'ClaimResponse',
'ClinicalImpression',
'Communication',
'Composition',
'Condition',
'Consent',
'Coverage',
'CoverageEligibilityResponse',
'DeviceUseStatement',
'DiagnosticReport',
'DocumentManifest',
'DocumentReference',
'Encounter',
'EnrollmentResponse',
'EpisodeOfCare',
'ExplanationOfBenefit',
'FamilyMemberHistory',
'GuidanceResponse',
'ImagingStudy',
'Immunization',
'MeasureReport',
'Media',
'MedicationAdministration',
'MedicationDispense',
'MedicationStatement',
'Observation',
'PaymentNotice',
'PaymentReconciliation',
'Procedure',
'ProcessResponse',
'QuestionnaireResponse',
'RiskAssessment',
'SupplyDelivery',
'Task'
}
	{ 
		Id,
		Id Display,
		StructureDefinition.Differential.Element[0].Short Description
	}

select Results { '"' + Id + '","' + Display + '","' + Description + '"' Result }

drop table Results;
create table Results in Temp from
Resource where Type = "StructureDefinition" { Id, (Content as StructureDefinition) StructureDefinition }
   where StructureDefinition.Kind = "Resource"
     and Id in list(String){ 
'ActivityDefinition',
'CodeSystem',
'ConceptMap',
'EventDefinition',
'Library',
'Measure',
'PlanDefinition',
'StructureDefinition',
'StructureMap',
'ValueSet'
}
	{ 
		Id,
		Id Display,
		StructureDefinition.Differential.Element[0].Short Description
	}

select Results { '"' + Id + '","' + Display + '","' + Description + '"' Result }

select Resource where Type = "StructureDefinition" { Id, (Content as StructureDefinition) StructureDefinition }
   explode by (parent StructureDefinition).Url = StructureDefinition.BaseDefinition 
   	where StructureDefinition.Kind = "Resource" and StructureDefinition.BaseDefinition.IsNil()

drop table StructureDefinitions;
create table StructureDefinitions in Temp from
	Resource where Type = "StructureDefinition" { Id, (Content as StructureDefinition) StructureDefinition }
	
select Resource where Type = "ImplementationGuide"
drop table ImplementationGuides;
create table ImplementationGuides in Temp from
	Resource where Type = "ImplementationGuide" { Id, (Content as ImplementationGuide) ImplementationGuide }
	
select ImplementationGuides { Id, ImplementationGuide.Package.Count() PackageCount }

select ImplementationGuides["ig"].ImplementationGuide.AsJSON

// Resources included in the implementation guides
select 
	ToTable(
  foreach var LIg in ImplementationGuides do
    foreach var LPackage in LIg.ImplementationGuide.Package do
      foreach var LResource in LPackage.Resource do
        if not LResource.Example and (LResource.Source as ResourceReference).Reference.GetResourceTypeFromPath() = "StructureDefinition" then
          row { LIg.ImplementationGuide.Id Id, LPackage.Name PackageName, LResource.Name ResourceName, (LResource.Source as ResourceReference).Reference Reference, (LResource.Source as ResourceReference).Reference.GetResourceIdFromPath() StructureDefinitionId, StructureDefinitions[(LResource.Source as ResourceReference).Reference.GetResourceIdFromPath()].StructureDefinition StructureDefinition }
        else
          nil
          )
   // Profiles
   where StructureDefinition.Kind = "Resource"
   // Extensions
	//where StructureDefinition.Kind = "ComplexType" 
	//	and StructureDefinition.BaseDefinition = "http://hl7.org/fhir/StructureDefinition/Extension"
	
select foreach var LPackage in ImplementationGuides['qicore'].ImplementationGuide.Package do LPackage.Name
foreach row in
select
  StructureDefinitions
    where StructureDefinition.Kind = "Resource"
      and (
        StructureDefinition.Derivation.IsNil() or StructureDefinition.Derivation = "Specialization"
        //StructureDefinition.BaseDefinition.IsNil() 
//          or StructureDefinition.BaseDefinition = "http://hl7.org/fhir/StructureDefinition/DomainResource" 
//          or StructureDefinition.BaseDefinition = "http://hl7.org/fhir/StructureDefinition/Resource"
      )
      and StructureDefinition.Url.GetHead().GetHead() = Models["FHIR"].Url
  { StructureDefinition.Id Id, StructureDefinition.BaseDefinition BaseDefinition, StructureDefinition.Derivation Derivation }
	
	
select ImplementationGuides { Id, ImplementationGuide.Id IgId, ImplementationGuide.Url Url, ImplementationGuide.Url.GetHead().GetHead() Base }
	
// StructureDefinitions in the implementation guides
select
  (ImplementationGuides rename I)
    times (StructureDefinitions rename S)
    where S.StructureDefinition.Url.StartsWith(I.ImplementationGuide.Url.GetHead().GetHead())
      and S.StructureDefinition.Kind = 'Resource'
    

select Models  
 		  
select StructureDefinitions 
select StructureDefinitions { StructureDefinition.Kind Kind }
select StructureDefinitions where StructureDefinition.Kind = "PrimitiveType"
select StructureDefinitions where StructureDefinition.Kind = "ComplexType" { Id, StructureDefinition.BaseDefinition BaseDefinition, StructureDefinition.Derivation Derivation, StructureDefinition.Abstract Abstract }

create table Models in Temp { Name : String, Url : String, key { Name } };

// Create a model for the System model
insert row { "System" Name, "urn:hl7-org:elm-types:r1" Url } into Models;
// Create a model for the FHIR Model
insert row { "FHIR" Name, "http://hl7.org/fhir" Url } into Models;

// TODO: Kill this profile, it's causing issues and isn't necessary:
delete StructureDefinitions where Id = "elementdefinition-de";

// TODO: Would be nice to use "Name" here, but it's not machine-friendly in these IGs
//select ImplementationGuides { ImplementationGuide.Url Url, ImplementationGuide.Id Id }

// Create a row for the US Core model
insert row { "USCore" Name, "http://hl7.org/fhir/us/core" Url } into Models;

// Create a row for the QI Core model
insert row { "QICore" Name, "http://hl7.org/fhir/us/qicore" Url } into Models;

// Create a TypeInfos table to store TypeInfos already generated   	
SafeDrop("TypeInfos");
create table TypeInfos in Temp { Name : String, ModelName : String, Value : CQF.Model.TypeInfo, key { Name } };

// Populate it with the System Model Info
//select (CQF.Model.Base.AsXML(LoadDocument("CQF.Model", "SystemModelInfo")) as ModelInfo)
insert
//select 
	ToTable(
	foreach var typeInfo in (CQF.Model.Base.AsXML(LoadDocument("CQF.Model", "SystemModelInfo")) as ModelInfo).typeInfo do
	  row { GetTypeName("System", typeInfo) Name, "System" ModelName, typeInfo Value }
	)
	adorn { key { Name } }
	{ Name, ModelName, Value }
into TypeInfos;

// select TypeInfos;

// FHIR Primitives
// base64Binary - value: xs:base64Binary
// boolean - value: xs:boolean
// code: string - value: xs:token
// date - value: xs:date | xs:gYearMonth | xs:gYear
// dateTime - value: xs:dateTime | xs:date | xs:gYearMonth | xs:gYear
// decimal - value: xs:decimal
// id: string - value: xs:string
// instant - value: xs:dateTime
// integer - value: xs:int
// markdown: string - value: xs:string
// oid: uri - value: xs:anyUri
// positiveInt: integer - value: xs:positiveInteger
// string - value: xs:string
// time - value: xs:time
// unsignedInt - value: xs:nonNegativeInteger
// uri - value: xs:anyUri
// uuid - value: xs:anyUri
// xhtml - value: xhtml:div

// Define primitive mappings
create table PrimitiveTypeMappings in Temp { SourceTypeName : String, TargetTypeName : String, key { SourceTypeName } };

insert
	table
	{
		row { "FHIR.base64Binary" SourceTypeName, "System.String" TargetTypeName },
		row { "FHIR.boolean", "System.Boolean" },
		row { "FHIR.code", "System.String" },
		row { "FHIR.date", "System.DateTime" },
		row { "FHIR.dateTime", "System.DateTime" },
		row { "FHIR.decimal", "System.Decimal" },
		row { "FHIR.id", "System.String" },
		row { "FHIR.instant", "System.DateTime" },
		row { "FHIR.integer", "System.Integer" },
		row { "FHIR.markdown", "System.String" },
		row { "FHIR.oid", "System.String" },
		row { "FHIR.positiveInt", "System.Integer" },
		row { "FHIR.string", "System.String" },
		row { "FHIR.time", "System.Time" },
		row { "FHIR.unsignedInt", "System.Integer" },
		row { "FHIR.uri", "System.String" },
		row { "FHIR.uuid", "System.String" },
		row { "FHIR.xhtml", "System.String" }
	}
	into PrimitiveTypeMappings;

// Define CQL type mappings	
create table CQLTypeMappings in Temp { SourceTypeName : String, TargetTypeName : String, key { SourceTypeName } };

insert
	table
	{
		row { "FHIR.base64Binary" SourceTypeName, "System.String" TargetTypeName },
		row { "FHIR.boolean", "System.Boolean" },
		row { "FHIR.code", "System.String" },
		row { "FHIR.date", "System.DateTime" },
		row { "FHIR.dateTime", "System.DateTime" },
		row { "FHIR.decimal", "System.Decimal" },
		row { "FHIR.id", "System.String" },
		row { "FHIR.instant", "System.DateTime" },
		row { "FHIR.integer", "System.Integer" },
		row { "FHIR.markdown", "System.String" },
		row { "FHIR.oid", "System.String" },
		row { "FHIR.positiveInt", "System.Integer" },
		row { "FHIR.string", "System.String" },
		row { "FHIR.time", "System.Time" },
		row { "FHIR.unsignedInt", "System.Integer" },
		row { "FHIR.uri", "System.String" },
		row { "FHIR.uuid", "System.String" },
		row { "FHIR.xhtml", "System.String" },
		row { "FHIR.Coding", "System.Code" },
		row { "FHIR.CodeableConcept", "System.Concept" },
		row { "FHIR.Period", "Interval<System.DateTime>" },
		row { "FHIR.Range", "Interval<System.Quantity>" },
		row { "FHIR.Quantity", "System.Quantity" },
		row { "FHIR.Age", "System.Quantity" },
		row { "FHIR.Distance", "System.Quantity" },
		row { "FHIR.SimpleQuantity", "System.Quantity" },
		row { "FHIR.Duration", "System.Quantity" },
		row { "FHIR.Count", "System.Quantity" },
		row { "FHIR.Money", "System.Quantity" }
	}
	into CQLTypeMappings;

// If we are generating a "Simple" FHIR model, primitives can't have extensions, so they will map directly to CQL types
// If we are generating a "Complex" FHIR model, primitives will have value elements that map to CQL types
// For Primitive Types, either map to a CQL type, or create a ClassInfo descending from Element with a value property of the CQL type

select StructureDefinitions where Id = "xhtml" { StructureDefinition.Differential.Element[0] Value }

select StructureDefinitions where Id = "us-core-allergyintolerance" { StructureDefinition.Id Id, StructureDefinition.AsJSON JSON }
select
  foreach row in StructureDefinitions where Id = "Patient" do
  	foreach var element in StructureDefinition.Differential.Element do
  	  //row { element.AsJSON JSON }
  	  row { element.Path Path, element.Min Min, element.Max Max, element.Base.Path BasePath, Concat(foreach var type in element.Type do type.Code, ', ') Types  }

select TypeInfos
select TypeInfos { Name, Value.AsXML Value }

foreach row in Documents where Library_Name = "CQF.Model.FHIR" do
  if Name.StartsWith("FHIR") or Name.StartsWith("System") then
    DeleteDocument("CQF.Model.FHIR", Name);
    
delete Documents where Library_Name = "CQF.Model.FHIR" and Name <> "Register"
    
select Documents where Library_Name = "CQF.Model.FHIR"



// Build the base classes
select BuildClassInfo("FHIR", StructureDefinitions["Element"].StructureDefinition);
select BuildClassInfo("FHIR", StructureDefinitions["Extension"].StructureDefinition);
select BuildClassInfo("FHIR", StructureDefinitions["Resource"].StructureDefinition);

select TypeInfos

select ObjectDependencies where Dependency_Object_ID = 24602   	
select Objects where ID = 24602   	
select ObjectDependencies where Object_ID = 24602
select Objects where ID = 22557

// Primitive Types
// Structures marked as Primitive Type, descend from Element or another primitive type
select StructureDefinitions
   where StructureDefinition.Kind = "PrimitiveType"
   //explode by (parent StructureDefinition).Url = StructureDefinition.BaseDefinition 
   //	where StructureDefinition.Kind = "PrimitiveType"
   	{ Id, StructureDefinition.BaseDefinition BaseDefinition, StructureDefinition.Type Type }

foreach row in 
	StructureDefinitions where StructureDefinition.Kind = "PrimitiveType" 
	  //where StructureDefinition.Id <> StructureDefinition.Type
do
  BuildClassInfo(StructureDefinition);
  
select Messages

select TypeInfos
delete TypeInfos where ModelName <> "System"
foreach row in TypeInfos do
begin
  if DocumentExists("CQF.Model.FHIR", Name) then
    DeleteDocument("CQF.Model.FHIR", Name);
  CreateDocument("CQF.Model.FHIR", Name, "xml");
  SaveDocument("CQF.Model.FHIR", Name, Value.AsXML);
end
   	
select StructureDefinitions { StructureDefinition.Kind Kind }
select StructureDefinitions["Element"] { Id, StructureDefinition.BaseDefinition BaseDefinition }
select StructureDefinitions where StructureDefinition.BaseDefinition.IsNil()
select StructureDefinitions where StructureDefinition.Kind = "ComplexType" { Id, StructureDefinition.BaseDefinition BaseDefinition }
   	
// Complex Types
// Structures marked as ComplexType, descend from Element, except Extension
select StructureDefinitions
	where StructureDefinition.Kind = "ComplexType" 
		and (StructureDefinition.BaseDefinition.IsNil() or StructureDefinition.BaseDefinition <> "http://hl7.org/fhir/StructureDefinition/Extension")
   explode by (parent StructureDefinition).Url = StructureDefinition.BaseDefinition 
   	where StructureDefinition.BaseDefinition.IsNil()
   	{ Id, StructureDefinition.BaseDefinition BaseDefinition }

foreach row in 
  StructureDefinitions
    where StructureDefinition.Kind = "ComplexType" 
		and (StructureDefinition.BaseDefinition.IsNil() or StructureDefinition.BaseDefinition <> "http://hl7.org/fhir/StructureDefinition/Extension")
do
  BuildClassInfo(StructureDefinition);
  
select TypeInfos
delete TypeInfos where ModelName = "FHIR"

select TypeInfos

// Note that we _could_ have the ModelInfo do the transformation to FHIR, instead of having it be a runtime consideration....

// For primitives, this would mean:

// Patient.gender would translate as
// Patient.gender.value

// For extensions, this would mean:

// Patient.race would translate as
// Patient.extension["http://hl7.org/fhir/us/core/us-core-race"]
// Patient.race.category would translate as
// Patient.extension["http://hl7.org/fhir/us/core/us-core-race"].extension["category"].valueCoding

// For references, this would mean:

// Patient.organization would translate as
// Resolve(Patient, Patient.organization.reference)
// Where resolve is a run-time operation that resolves to either a contained reference or a retrieve
// Note that this would not support references in a bundle

// Extensions
// Structures marked as ComplexType, descending from Extension
select StructureDefinitions
	where StructureDefinition.Kind = "ComplexType" 
		and StructureDefinition.BaseDefinition = "http://hl7.org/fhir/StructureDefinition/Extension"
   //explode by (parent StructureDefinition).Url = StructureDefinition.BaseDefinition 
   //	where StructureDefinition.BaseDefinition = "http://hl7.org/fhir/StructureDefinition/Extension"
   	{ Id, StructureDefinition.BaseDefinition BaseDefinition }

delete TypeInfos where ModelName = 'USCore'
select BuildClassInfo(StructureDefinitions["us-core-direct"].StructureDefinition);   	
select BuildClassInfo(StructureDefinitions["us-core-race"].StructureDefinition);
delete Messages
select Messages
select TypeInfos["USCore.us-core-direct"].Value.AsXML
select TypeInfos["USCore.us-core-race"].Value.AsXML
select TypeInfos

select foreach var e in StructureDefinitions["Extension"].StructureDefinition.Differential.Element do e.Path

// Resources	
select StructureDefinitions
   explode by (parent StructureDefinition).Url = StructureDefinition.BaseDefinition 
   	where StructureDefinition.Kind = "Resource" and StructureDefinition.BaseDefinition.IsNil()

select TypeInfos   	
delete Messages;
delete TypeInfos where Name.StartsWith("FHIR.Patient");
delete TypeInfos where Name.StartsWith("USCore");
delete TypeInfos where Name.StartsWith("QICore");
select BuildClassInfo(StructureDefinitions["Patient"].StructureDefinition);
select BuildClassInfo(StructureDefinitions["us-core-patient"].StructureDefinition);
select BuildClassInfo(StructureDefinitions["qicore-patient"].StructureDefinition);
foreach row in TypeInfos do
begin
  var name := Name.Replace("-", "_");
  CreateAndSave("CQF.Model.FHIR", name, "xml", Value.AsXML);
end

delete Messages

select
  foreach var e in BuildClassInfo(StructureDefinitions["us-core-patient"].StructureDefinition).element do
    e.type

select 
  foreach var E in StructureDefinitions["us-core-patient"].StructureDefinition.Differential.Element do
    BuildClassInfoElement(E, "Patient", BuildTypeSpecifier("USCore", E.Type)).type

select TypeInfos where Name = "USCore.us-core-patient"    
select
  foreach var e in (TypeInfos["USCore.us-core-patient"].Value as ClassInfo).element do
    e.AsXML
    
select TypeInfos["USCore.us-core-patient"].Value.AsXML
    
   	
select StructureDefinitions where StructureDefinition.BaseDefinition.IsNil()
select StructureDefinitions where StructureDefinition.BaseDefinition = "http://hl7.org/fhir/StructureDefinition/Element"
select StructureDefinitions where StructureDefinition.BaseDefinition = "http://hl7.org/fhir/StructureDefinition/Resource"
select StructureDefinitions where StructureDefinition.BaseDefinition = "http://hl7.org/fhir/StructureDefinition/DomainResource"
   	
select Resource where Type = "StructureDefinition" { Id, (Content as StructureDefinition) StructureDefinition }
  where Id = "Resource" and StructureDefinition.BaseDefinition.IsNil()
  { Id, StructureDefinition.Url Url }

select Resource where Type = "StructureDefinition" { Id, (Content as StructureDefinition) StructureDefinition }
  where StructureDefinition.BaseDefinition = "http://hl7.org/fhir/StructureDefinition/Resource"
  
// Conversions
select 
  foreach row in 
    TypeInfos 
      where Value is ClassInfo 
        and Value.baseType = "FHIR.Element" 
        and (Value as ClassInfo).element.Count() = 1 
      { Name, Value as ClassInfo Value } 
      { Name, Value, Value.name sourceTypeName, Value.element[0].type targetTypeName }
      { Name, Value, sourceTypeName, targetTypeName, "To" + Unqualify(targetTypeName) functionName }
      where sourceTypeName.IsNotNil()
  do
    //<ns4:conversionInfo fromType="FHIR.string" toType="System.String" functionName="FHIRHelpers.ToString"/>
    ConversionInfo(row { sourceTypeName fromType, targetTypeName toType, "FHIRHelpers." + functionName functionName })


// Load primaryCodePaths...
create table ResourcePrimaryCodePaths in Temp from
  ToTable(
  foreach var t in (CQF.Model.Base.AsXML(LoadDocument("CQF.Model", "CurrentFHIRModelInfo")) as ModelInfo).typeInfo do
    if (t.baseType = "FHIR.Resource" or t.baseType = "FHIR.DomainResource") and t is ClassInfo then 
      row { (t as ClassInfo).name name, (t as ClassInfo).primaryCodePath primaryCodePath } 
    else
      nil
  )
    where primaryCodePath.IsNotNil()
    { name ResourceType, primaryCodePath PrimaryCodePath }
    
select ScriptData("ResourcePrimaryCodePaths")    
 
    
    
  

